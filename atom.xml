<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lightsmile&#39;s Blog</title>
  
  <subtitle>lightsmile</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.iamlightsmile.com/"/>
  <updated>2020-09-06T08:09:46.940Z</updated>
  <id>https://www.iamlightsmile.com/</id>
  
  <author>
    <name>lightsmile</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos安装mongodb</title>
    <link href="https://www.iamlightsmile.com/articles/centos%E5%AE%89%E8%A3%85mongodb/"/>
    <id>https://www.iamlightsmile.com/articles/centos%E5%AE%89%E8%A3%85mongodb/</id>
    <published>2020-09-06T07:54:30.000Z</published>
    <updated>2020-09-06T08:09:46.940Z</updated>
    
    <content type="html"><![CDATA[<p>安装方式详情参见<a href="https://cloud.tencent.com/developer/article/1329170" target="_blank" rel="noopener">在CentOS 7上安装MongoDB - 云+社区 - 腾讯云</a>，只是貌似最新的版本是4.4，即需要将添加MongoDB源部分的3.2都换成4.4。</p><p>另外更精简的文档：<a href="https://www.jb51.net/article/194001.htm" target="_blank" rel="noopener">Centos7 yum安装mongodb实现步骤详解_MongoDB_脚本之家</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装方式详情参见&lt;a href=&quot;https://cloud.tencent.com/developer/article/1329170&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在CentOS 7上安装MongoDB - 云+社区 - 腾讯云&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="centos" scheme="https://www.iamlightsmile.com/tags/centos/"/>
    
      <category term="mongodb" scheme="https://www.iamlightsmile.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>配置VSCode Remote</title>
    <link href="https://www.iamlightsmile.com/articles/%E9%85%8D%E7%BD%AEVSCode-Remote/"/>
    <id>https://www.iamlightsmile.com/articles/%E9%85%8D%E7%BD%AEVSCode-Remote/</id>
    <published>2020-09-05T08:15:15.000Z</published>
    <updated>2020-09-05T09:26:25.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>在写前一篇文档调研使用brat的时候，由于涉及到操作服务器中文件，然而直接通过命令行操作实在是有些不太方便，毕竟vim不咋熟练，自己突然想到使用vscode可以配置remote开发。于是趁此机会也尝试着配置一下，这里简单记录一下。</p><a id="more"></a><h2 id="1-配置VSCode-Remote-SSH"><a href="#1-配置VSCode-Remote-SSH" class="headerlink" title="1.配置VSCode Remote-SSH"></a>1.配置VSCode Remote-SSH</h2><h3 id="1-1-安装Remote-SSH插件"><a href="#1-1-安装Remote-SSH插件" class="headerlink" title="1.1 安装Remote-SSH插件"></a>1.1 安装Remote-SSH插件</h3><p>在拓展里搜索”remote”，然后安装”Remote-SSH”插件。</p><p>在安装完成之后，侧边栏会多出一个选项，如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/vscode_remote.png" alt=""></p><p>点击之后，其会从一些默认位置自动读取系统已有的一些ssh配置信息，如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/vscode_remote_2.png" alt=""></p><h2 id="2-配置远程服务器"><a href="#2-配置远程服务器" class="headerlink" title="2.配置远程服务器"></a>2.配置远程服务器</h2><h3 id="2-1-添加远程服务器配置信息"><a href="#2-1-添加远程服务器配置信息" class="headerlink" title="2.1 添加远程服务器配置信息"></a>2.1 添加远程服务器配置信息</h3><p>我们可以在<code>config</code>文件中继续添加配置，格式如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/vscode_remote_3.png" alt=""></p><h3 id="2-2-配置ssh连接"><a href="#2-2-配置ssh连接" class="headerlink" title="2.2 配置ssh连接"></a>2.2 配置ssh连接</h3><p><strong>注意</strong>：以下命令均是在Git Bash下执行的。</p><h4 id="2-2-1-切换目录至ssh目录"><a href="#2-2-1-切换目录至ssh目录" class="headerlink" title="2.2.1 切换目录至ssh目录"></a>2.2.1 切换目录至ssh目录</h4><pre><code class="lang-bash">cd ~/.ssh</code></pre><h4 id="2-2-2-生成ssh公钥"><a href="#2-2-2-生成ssh公钥" class="headerlink" title="2.2.2 生成ssh公钥"></a>2.2.2 生成ssh公钥</h4><pre><code class="lang-bash">ssh-keygen</code></pre><h4 id="2-2-3-将公钥存储至远程主机"><a href="#2-2-3-将公钥存储至远程主机" class="headerlink" title="2.2.3 将公钥存储至远程主机"></a>2.2.3 将公钥存储至远程主机</h4><p>假如1.3.2步生成的公钥名称为<code>id_rsa.pub</code>，假设远程主机ip地址为<code>12.34.56.78</code>，用户名为<code>root</code></p><pre><code class="lang-bash">ssh-copy-id -i id_rsa.pub root@12.34.56.78</code></pre><h2 id="3-连接至远程服务器"><a href="#3-连接至远程服务器" class="headerlink" title="3.连接至远程服务器"></a>3.连接至远程服务器</h2><p>在上述过程配置完成之后，便可以连接至远程服务器了。如图点击红圈内的图标：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/vscode_remote_5.png" alt=""></p><p>连接成功后如图所示：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/vscode_remote_6.png" alt=""></p><p>如果还不明白的可以继续看下面的参考文章。</p><h2 id="1-参考"><a href="#1-参考" class="headerlink" title="-1.参考"></a>-1.参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/64849549" target="_blank" rel="noopener">VSCode Remote 体验 | 远程Linux环境开发真香 - 知乎</a></li><li><a href="https://www.jianshu.com/p/6761199bedba" target="_blank" rel="noopener">服务器免密登录:ssh公钥配置 - 简书</a></li><li><a href="https://www.jianshu.com/p/1e793e386beb" target="_blank" rel="noopener">ssh配置文件详解 - 简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;p&gt;在写前一篇文档调研使用brat的时候，由于涉及到操作服务器中文件，然而直接通过命令行操作实在是有些不太方便，毕竟vim不咋熟练，自己突然想到使用vscode可以配置remote开发。于是趁此机会也尝试着配置一下，这里简单记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="VSCode" scheme="https://www.iamlightsmile.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>centos下brat安装使用</title>
    <link href="https://www.iamlightsmile.com/articles/centos%E4%B8%8Bbrat%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.iamlightsmile.com/articles/centos%E4%B8%8Bbrat%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2020-09-05T02:09:50.000Z</published>
    <updated>2020-09-07T00:40:01.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-更新"><a href="#1-更新" class="headerlink" title="-1.更新"></a>-1.更新</h2><p>发现现在brat直接Python3就可以使用，只是brat官网上和Github上最新release版本还停留在2012年，然而brat近几年有所更新，所以我们可以直接clone Github上的brat的最新源码进行使用hhh。</p><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><h3 id="0-1-背景"><a href="#0-1-背景" class="headerlink" title="0.1 背景"></a>0.1 背景</h3><p>近日简单调研一下NLP标注工具brat的使用，其<a href="http://brat.nlplab.org/examples.html" target="_blank" rel="noopener">官网示例</a>中可以标注的任务包括命名实体识别、事件抽取、指代消解、依存句法、成分句法等等。</p><a id="more"></a><h3 id="0-2-brat介绍"><a href="#0-2-brat介绍" class="headerlink" title="0.2 brat介绍"></a>0.2 brat介绍</h3><p>brat是使用Python2开发的文本标注工具，只支持在Unix-like环境下使用，同时最新版v1.3提供两种使用方式，即：using CGI和standalone server，第一种方式官方推荐使用Apache2服务器，并提供了简单的配置教程；第二种模式更新，但可能有更多潜在的问题。另外其实也可以通过Docker使用，这种方法相对而言更加方便。</p><h3 id="0-3-个人使用方式"><a href="#0-3-个人使用方式" class="headerlink" title="0.3 个人使用方式"></a>0.3 个人使用方式</h3><p>我个人使用的是第一种方式，关键是我自己试了试第二种，没有成功，所以只能拿第一种搞了。网上的教程既有将brat当server端用的，也有简单的在localhost环境下使用的。由于自己的笔记本系统是Win10，所以选择在腾讯云服务器Cnetos7上搭建brat。</p><h2 id="1-brat相关信息"><a href="#1-brat相关信息" class="headerlink" title="1.brat相关信息"></a>1.brat相关信息</h2><h3 id="1-1-brat相关网址"><a href="#1-1-brat相关网址" class="headerlink" title="1.1 brat相关网址"></a>1.1 brat相关网址</h3><ul><li>brat官网：<a href="http://brat.nlplab.org/" target="_blank" rel="noopener">brat rapid annotation tool</a></li><li>brat安装说明：<a href="http://brat.nlplab.org/installation.html" target="_blank" rel="noopener">Installation - brat rapid annotation tool</a></li><li>brat手册网址：<a href="http://brat.nlplab.org/manual.html" target="_blank" rel="noopener">Manual - brat rapid annotation tool</a></li><li>brat github地址：<a href="https://github.com/nlplab/brat" target="_blank" rel="noopener">nlplab/brat: brat rapid annotation tool (brat) - for all your textual annotation needs</a></li></ul><h2 id="2-brat安装"><a href="#2-brat安装" class="headerlink" title="2.brat安装"></a>2.brat安装</h2><p><strong>说明</strong>：以下命令在root用户下运行，如普通用户请自行在部分命令前面加<code>sudo</code>。</p><h3 id="2-1-安装Apache"><a href="#2-1-安装Apache" class="headerlink" title="2.1 安装Apache"></a>2.1 安装Apache</h3><p>由于brat需要借助Apache提供cgi访问，所以我们首先需要安装apache。</p><p>安装命令如下：</p><pre><code class="lang-bash">yum install httpd</code></pre><p>启动Apache</p><pre><code class="lang-bash">systemctl start httpd.service</code></pre><p>Apache的默认配置：</p><ul><li>Apache默认将网站的根目录指向/<code>var/www/html</code></li><li>默认的主配置文件<code>/etc/httpd/conf/httpd.conf</code></li><li>配置存储在的<code>/etc/httpd/conf.d/</code>目录</li></ul><p>更多关于CentOS下安装Apache请参考<a href="https://www.jianshu.com/p/5b8903709e66" target="_blank" rel="noopener">CentOS 7下Apache的安装 - 简书</a></p><h3 id="2-2-初步配置Apache（视情况可略过）"><a href="#2-2-初步配置Apache（视情况可略过）" class="headerlink" title="2.2 初步配置Apache（视情况可略过）"></a>2.2 初步配置Apache（视情况可略过）</h3><p>由于自己的服务器上已经安装了Nginx，而Apache和Nginx都默认关联80端口，所以这里需要做一些调整，例如将Apache的监听端口设置为8080。而由于自己的frp程序已经关联了8080端口，所以自己这里将Apache的监听端口设置为8088。</p><p>具体配置请参考：<a href="https://blog.csdn.net/weixin_42912498/article/details/106626219" target="_blank" rel="noopener">CentOS下nginx与apache如何共存_weixin_42912498的博客-CSDN博客</a></p><h3 id="2-3-下载brat"><a href="#2-3-下载brat" class="headerlink" title="2.3 下载brat"></a>2.3 下载brat</h3><p>我们可以通过<a href="http://brat.nlplab.org/index.html" target="_blank" rel="noopener">官网</a>下载brat，也可以通过<a href="https://github.com/nlplab/brat/releases" target="_blank" rel="noopener">Github</a>下载brat。</p><p>在下载完成后，我们需要将brat移动至<code>var/www/html</code>目录，并解压重命名目录为<code>brat</code>。</p><p>由于brat目录内的所有内容要被外网用户通过Apache访问到，所以我们需要配置brat目录的权限，具体命令为：</p><pre><code class="lang-bash">chmod 777 -R /var/www/html/brat</code></pre><h3 id="2-4-配置Apache"><a href="#2-4-配置Apache" class="headerlink" title="2.4 配置Apache"></a>2.4 配置Apache</h3><p>编辑<code>/etc/httpd/conf/httpd.conf</code>文件。</p><h4 id="2-4-1-添加brat配置"><a href="#2-4-1-添加brat配置" class="headerlink" title="2.4.1 添加brat配置"></a>2.4.1 添加brat配置</h4><p>在<code>&lt;Directory &quot;/var/www/html&quot;&gt;...&lt;/Directory&gt;</code>配置后添加如下内容：</p><pre><code class="lang-conf"># add brat&lt;Directory &quot;/var/www/html/brat&quot;&gt;    AllowOverride Options Indexes FileInfo Limit    Require all granted    AddType application/xhtml+xml .xhtml    AddType font/ttf .ttf    Options +ExecCGI    AddHandler cgi-script .cgi&lt;/Directory&gt;</code></pre><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/apache_brat_1.png" alt=""></p><h4 id="2-4-2-添加cgi配置"><a href="#2-4-2-添加cgi配置" class="headerlink" title="2.4.2 添加cgi配置"></a>2.4.2 添加cgi配置</h4><p>在第55行内容大约为<code># Example:# LoadModule foo_module modules/mod_foo.so</code>后面补充：</p><pre><code class="lang-conf">LoadModule cgi_module modules/mod_cgi.soLoadModule cgid_module modules/mod_cgid.so</code></pre><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/apache_brat_2.png" alt=""></p><h4 id="2-4-3-重启Apache"><a href="#2-4-3-重启Apache" class="headerlink" title="2.4.3 重启Apache"></a>2.4.3 重启Apache</h4><pre><code class="lang-bash">systemctl restart httpd.service</code></pre><h3 id="2-5-查看配置结果"><a href="#2-5-查看配置结果" class="headerlink" title="2.5 查看配置结果"></a>2.5 查看配置结果</h3><p>在浏览器输入相应网址如图（以我个人网址为例）：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/apache_test.png" alt=""></p><p>便说明Apache服务配置成功了。</p><p>在浏览器输入<code>http://lightsmile.cn:8088/brat</code>（以我个人网址为例）得到如下结果，便说明brat已经配置成功：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/apache_brat_3.png" alt=""></p><h2 id="3-brat使用"><a href="#3-brat使用" class="headerlink" title="3.brat使用"></a>3.brat使用</h2><h3 id="3-1-一些相关文章"><a href="#3-1-一些相关文章" class="headerlink" title="3.1 一些相关文章"></a>3.1 一些相关文章</h3><ul><li><a href="https://wetest.qq.com/lab/view/31.html" target="_blank" rel="noopener">你爱我吗？企鹅风讯利用BRAT进行中文情感分析语料标注掌握玩家心 - 腾讯WeTest</a></li><li><a href="https://www.cnblogs.com/xiaoqi/p/brat-config.html" target="_blank" rel="noopener">NLP标注工具brat 配置文件说明 - JadePeng - 博客园</a></li><li><a href="https://blog.csdn.net/anyedianxia/article/details/96832229" target="_blank" rel="noopener">Zhong__CentOS7安装配置Brat(初级)_Zhong的博客-CSDN博客</a></li><li><a href="https://www.codenong.com/cs106623370/" target="_blank" rel="noopener">BRAT的安装、配置、标注操作 | 码农家园</a></li></ul><h3 id="3-2-配置brat中文环境"><a href="#3-2-配置brat中文环境" class="headerlink" title="3.2 配置brat中文环境"></a>3.2 配置brat中文环境</h3><p>如前所述，brat目录为<code>/var/www/html/brat</code>，我们需要更改<code>/var/www/html/brat/server/src/projectconfig.py</code>中的第162行，具体为：</p><pre><code class="lang-python">n  = re.sub(r&#39;[^a-zA-Z\u4e00-\u9fa5&lt;&gt;,0-9_-]&#39;, &#39;_&#39;, n)</code></pre><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/brat_project_config.png" alt=""></p><h3 id="3-3-待标记语料配置"><a href="#3-3-待标记语料配置" class="headerlink" title="3.3 待标记语料配置"></a>3.3 待标记语料配置</h3><h4 id="3-3-1-放置带标记语料"><a href="#3-3-1-放置带标记语料" class="headerlink" title="3.3.1 放置带标记语料"></a>3.3.1 放置带标记语料</h4><p>将待标注的语料（txt）格式放入到brat的<code>data</code>目录中。</p><p>如：</p><pre><code class="lang-bash">(base) ➜  brat cd data(base) ➜  data lsexamples  tests  tutorials(base) ➜  data ls testsannotation.conf  fuck.ann  fuck.txt  tools.conf</code></pre><p>其中的<code>fuck.txt</code>就是待标记的纯文本语料，内容为：</p><pre><code class="lang-txt">曾经沧海难为水，除却巫山不是云。何当共剪西窗烛，却话巴山夜雨时。毛泽东出生于湖南。</code></pre><h4 id="3-3-2-创建ann文件"><a href="#3-3-2-创建ann文件" class="headerlink" title="3.3.2 创建ann文件"></a>3.3.2 创建ann文件</h4><p>对于所有的待标记语料，brat要求必须有同名的ann文件（brat会将标注结果存放在该文件中，而brat不会自动创建，需要用户手动创建）。</p><p>我们可以在brat目录下执行如下命令来批量创建ann文件。</p><pre><code class="lang-shell">find data -name &#39;*.txt&#39; | sed -e &#39;s|\.txt|.ann|g&#39; | xargs touch</code></pre><h4 id="3-3-3-配置标注信息"><a href="#3-3-3-配置标注信息" class="headerlink" title="3.3.3 配置标注信息"></a>3.3.3 配置标注信息</h4><p>我们可以在txt和ann同级目录中增加conf文件来对标注项目进行配置，具体详情参考上面提到的brat配置文件说明。</p><p>比如说上面的和<code>fuck.txt</code>同级的<code>annotation.conf</code>文件中的内容为：</p><pre><code class="lang-conf">[spans]PlacePerson[relations]Place-in Arg1:Person, Arg2:Place[events][attributes]</code></pre><p>同时也可以在<code>tools.conf</code>文件中设置记录标注过程日志，如：</p><pre><code class="lang-conf">[options]Annotation-log logfile:./log_history.log</code></pre><h3 id="3-4-对语料进行标注"><a href="#3-4-对语料进行标注" class="headerlink" title="3.4 对语料进行标注"></a>3.4 对语料进行标注</h3><p>具体标注过程略，标注界面如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/brat_chrome.png" alt=""></p><h3 id="3-5-查看并导出标注结果"><a href="#3-5-查看并导出标注结果" class="headerlink" title="3.5 查看并导出标注结果"></a>3.5 查看并导出标注结果</h3><p>我们可以点击data菜单项来查看标注结果，如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/brat_result_1.png" alt=""></p><p>点击<code>ann</code>即可打开新的页面，查看当前ann格式的标注结果，如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/brat_result_2.png" alt=""></p><p>此内容和与<code>fuck.txt</code>同目录的<code>fuck.ann</code>内容一致。</p><p>点击<code>Download tar.gz</code>按钮则可以将当前标注结果下载下来。</p><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4.注意事项"></a>4.注意事项</h2><h3 id="4-1-无法加载标注文件"><a href="#4-1-无法加载标注文件" class="headerlink" title="4.1 无法加载标注文件"></a>4.1 无法加载标注文件</h3><p>可能是由于文件权限原因，当放置新的标注文件到data目录中时，仍然需要改变文件的访问权限。具体来说，我们可以通过如下命令来执行：</p><pre><code class="lang-bash">chmod 777 -R /var/www/html/brat</code></pre><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h2><ul><li><a href="https://www.jianshu.com/p/5b8903709e66" target="_blank" rel="noopener">CentOS 7下Apache的安装 - 简书</a></li><li><a href="https://blog.csdn.net/weixin_42912498/article/details/106626219" target="_blank" rel="noopener">CentOS下nginx与apache如何共存_weixin_42912498的博客-CSDN博客</a></li><li><a href="https://www.jianshu.com/p/c36dd3946e74" target="_blank" rel="noopener">Apache配置文件httpd.conf详解 - 简书</a></li><li><a href="https://cloud.tencent.com/developer/article/1499644" target="_blank" rel="noopener">文本标注工具brat简介 - 云+社区 - 腾讯云</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-更新&quot;&gt;&lt;a href=&quot;#1-更新&quot; class=&quot;headerlink&quot; title=&quot;-1.更新&quot;&gt;&lt;/a&gt;-1.更新&lt;/h2&gt;&lt;p&gt;发现现在brat直接Python3就可以使用，只是brat官网上和Github上最新release版本还停留在2012年，然而brat近几年有所更新，所以我们可以直接clone Github上的brat的最新源码进行使用hhh。&lt;/p&gt;
&lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;h3 id=&quot;0-1-背景&quot;&gt;&lt;a href=&quot;#0-1-背景&quot; class=&quot;headerlink&quot; title=&quot;0.1 背景&quot;&gt;&lt;/a&gt;0.1 背景&lt;/h3&gt;&lt;p&gt;近日简单调研一下NLP标注工具brat的使用，其&lt;a href=&quot;http://brat.nlplab.org/examples.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网示例&lt;/a&gt;中可以标注的任务包括命名实体识别、事件抽取、指代消解、依存句法、成分句法等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NLP" scheme="https://www.iamlightsmile.com/categories/NLP/"/>
    
    
      <category term="NLP" scheme="https://www.iamlightsmile.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>damedane视频制作教程</title>
    <link href="https://www.iamlightsmile.com/articles/damedane%E8%A7%86%E9%A2%91%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/"/>
    <id>https://www.iamlightsmile.com/articles/damedane%E8%A7%86%E9%A2%91%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/</id>
    <published>2020-08-30T02:43:21.000Z</published>
    <updated>2020-09-06T07:57:52.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>近日在B站上接触到了一些换脸演唱的视频，觉得还有点意思，发现不少视频都是没几个粉的用户上传的，这让我意识到或许制作这个的门槛并不高，后来偶然间看到了相关教程，于是乎自己也尝试着搞了搞。</p><a id="more"></a><h2 id="1-参考视频"><a href="#1-参考视频" class="headerlink" title="1.参考视频"></a>1.参考视频</h2><ol><li><a href="https://www.bilibili.com/video/BV1HV411U7zm" target="_blank" rel="noopener">最详细简洁的方法教你如何轻松做damedane梗！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1ni4y1g7xs?p=2&amp;t=14" target="_blank" rel="noopener">教你轻松做出damedane梗图，会不会翻墙都可以！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li></ol><h2 id="2-使用方案"><a href="#2-使用方案" class="headerlink" title="2.使用方案"></a>2.使用方案</h2><p>如下图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/demedane视频制作方案.png" alt=""></p><p>对于程序猿来说，自然是选择方法一了。</p><h2 id="3-使用教程"><a href="#3-使用教程" class="headerlink" title="3.使用教程"></a>3.使用教程</h2><h3 id="3-1-拷贝脚本到colab中"><a href="#3-1-拷贝脚本到colab中" class="headerlink" title="3.1 拷贝脚本到colab中"></a>3.1 拷贝脚本到colab中</h3><p>脚本链接为：<a href="https://colab.research.google.com/github/AliaksandrSiarohin/first-order-model/blob/master/demo.ipynb" target="_blank" rel="noopener">first-order-model-demo.ipynb - Colaboratory</a>。</p><p>该脚本中包含代码运行逻辑所有流程。</p><p>我们可以选择直接编辑拷贝的ipynb文件，或者自己再新建一个ipynb文件，这里我选择的是新创建文件<code>train_image.ipynb</code>。</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/new_ipynb.png" alt=""></p><h3 id="3-2-上传资源文件"><a href="#3-2-上传资源文件" class="headerlink" title="3.2 上传资源文件"></a>3.2 上传资源文件</h3><p>将想要制作的源图片和源视频上传到Google Drive中，这里需要注意的是上传的最好是256*256的png格式的图片（如果不是的话，可以先使用图片编辑工具将图片转换成相应的格式）</p><p>如图我这里将图片放到了Images目录：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/drive_my_images.png" alt=""></p><p>将视频放到了Videos目录：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/drive_my_videos.png" alt=""></p><h3 id="3-3-拷贝模型文件"><a href="#3-3-拷贝模型文件" class="headerlink" title="3.3 拷贝模型文件"></a>3.3 拷贝模型文件</h3><p>我们还需要将<a href="https://drive.google.com/drive/folders/1kZ1gCnpfU0BnpdU47pLM_TQ6RypDDqgw?usp=sharing" target="_blank" rel="noopener">模型文件</a>拷贝到Google Drive中。只需要拷贝两个<code>tar</code>文件就好，如图，放到相应的目录（自己随意，后续代码中对应上即可）：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830114204.png" alt=""></p><h3 id="3-4-启动环境并执行脚本"><a href="#3-4-启动环境并执行脚本" class="headerlink" title="3.4 启动环境并执行脚本"></a>3.4 启动环境并执行脚本</h3><p>打开之前创建的<code>train_image.ipynb</code>文件，然后系统便会分配RAM和磁盘供程序运行，由于Colab默认不会为环境配置GPU或者TPU，所以我们这里需要手动设置一下。</p><p>如下图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830111953.png" alt=""></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830112037.png" alt=""></p><h4 id="step1：-克隆仓库到colab"><a href="#step1：-克隆仓库到colab" class="headerlink" title="step1： 克隆仓库到colab"></a>step1： 克隆仓库到colab</h4><p>依次输入并执行以下指令</p><pre><code class="lang-bash">!git clone https://github.com/AliaksandrSiarohin/first-order-model</code></pre><pre><code class="lang-bash">cd first-order-model</code></pre><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830115609.png" alt=""></p><h4 id="step2-查看GPU信息"><a href="#step2-查看GPU信息" class="headerlink" title="step2: 查看GPU信息"></a>step2: 查看GPU信息</h4><pre><code class="lang-bash">!nvidia-smi</code></pre><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830112835.png" alt=""></p><h4 id="step3-挂载Google-drive到Colab"><a href="#step3-挂载Google-drive到Colab" class="headerlink" title="step3: 挂载Google drive到Colab"></a>step3: 挂载Google drive到Colab</h4><pre><code class="lang-python">from google.colab import drivedrive.mount(&#39;/content/gdrive&#39;)</code></pre><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830115734.png" alt=""></p><p>其中会涉及到使用Google账户授权，只要点击确认并复制相应的验证码到指定位置处运行即可。</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830115305.png" alt=""></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830115646.png" alt=""></p><h4 id="step4-加载驱动视频和源图像"><a href="#step4-加载驱动视频和源图像" class="headerlink" title="step4: 加载驱动视频和源图像"></a>step4: 加载驱动视频和源图像</h4><pre><code class="lang-python">import imageioimport numpy as npimport matplotlib.pyplot as pltimport matplotlib.animation as animationfrom skimage.transform import resizefrom IPython.display import HTMLimport warningswarnings.filterwarnings(&quot;ignore&quot;)source_image = imageio.imread(&#39;/content/gdrive/My Drive/Images/xiao_ke.png&#39;)driving_video = imageio.mimread(&#39;/content/gdrive/My Drive/Videos/bakamitai_template.mp4&#39;)#Resize image and video to 256x256source_image = resize(source_image, (256, 256))[..., :3]driving_video = [resize(frame, (256, 256))[..., :3] for frame in driving_video]def display(source, driving, generated=None):    fig = plt.figure(figsize=(8 + 4 * (generated is not None), 6))    ims = []    for i in range(len(driving)):        cols = [source]        cols.append(driving[i])        if generated is not None:            cols.append(generated[i])        im = plt.imshow(np.concatenate(cols, axis=1), animated=True)        plt.axis(&#39;off&#39;)        ims.append([im])    ani = animation.ArtistAnimation(fig, ims, interval=50, repeat_delay=1000)    plt.close()    return ani# HTML(display(source_image, driving_video).to_html5_video())</code></pre><p>上面的<code>source_image</code>和<code>driving_video</code>的路径根据自己的情况进行设置。</p><p>另外我们可以看到上面脚本是有一个将图像和视频都变为256*256的操作，这里我们为了更好的效果可以提前将图片剪辑为相应的格式。</p><p>之后的<code>display</code>方法是定义了通过matplotlib库将图片和视频展示的方法，这里的效果大致如：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830113436.png" alt=""></p><h4 id="step5-创建并加载模型"><a href="#step5-创建并加载模型" class="headerlink" title="step5: 创建并加载模型"></a>step5: 创建并加载模型</h4><pre><code class="lang-python">from demo import load_checkpointsgenerator, kp_detector = load_checkpoints(config_path=&#39;config/vox-256.yaml&#39;,                             checkpoint_path=&#39;/content/gdrive/My Drive/first-order-motion-model/vox-cpk.pth.tar&#39;)</code></pre><p>最开始切换路径的目的就在于能够直接引用到<code>demo</code>的<code>load_checkpoints</code>函数并且对应到配置文件<code>config/vox-256.yaml</code>。</p><h4 id="step6-执行动画生成"><a href="#step6-执行动画生成" class="headerlink" title="step6: 执行动画生成"></a>step6: 执行动画生成</h4><p>到这里终于到了我们最想看到的环节。</p><pre><code class="lang-python">from demo import make_animationfrom skimage import img_as_ubytepredictions = make_animation(source_image, driving_video, generator, kp_detector, relative=True)#save resulting videoimageio.mimsave(&#39;../generated.mp4&#39;, [img_as_ubyte(frame) for frame in predictions])#video can be downloaded from /content folderHTML(display(source_image, driving_video, predictions).to_html5_video())</code></pre><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830115112.png" alt=""></p><p>根据相对路径关系<code>../generated.mp4</code>我们也可以发现生成的视频文件就在当前环境下,即：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830120220.png" alt=""></p><p>将生成的mp4下载到本地即可。</p><h2 id="4-视频后期处理"><a href="#4-视频后期处理" class="headerlink" title="4.视频后期处理"></a>4.视频后期处理</h2><p>我们下载得到的<code>generated.mp4</code>并不能直接使用，时长不仅增加了3倍，并且也没有了声音。所以只能通过后期视频编辑再将视频调整为正常倍速并添加源视频音轨，实现正常的转换效果。</p><p>关于从mp4中提取音频，我这里用了arctime软件，该软件主要是配字幕的，自己之前使用过（本来以为有视频添加音频的功能，结果没有，这里只提了声音）由于自己的电脑比较渣，所以这里使用了B站提供的云剪辑功能，对视频进行了加工处理。</p><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/20200830121208.png" alt=""></p><p>最终效果：<a href="https://www.bilibili.com/video/BV17t4y1S7CQ" target="_blank" rel="noopener">女装maybe激情献唱_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;p&gt;近日在B站上接触到了一些换脸演唱的视频，觉得还有点意思，发现不少视频都是没几个粉的用户上传的，这让我意识到或许制作这个的门槛并不高，后来偶然间看到了相关教程，于是乎自己也尝试着搞了搞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://www.iamlightsmile.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="damedane" scheme="https://www.iamlightsmile.com/tags/damedane/"/>
    
  </entry>
  
  <entry>
    <title>DGL使用初体验</title>
    <link href="https://www.iamlightsmile.com/articles/DGL%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://www.iamlightsmile.com/articles/DGL%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-08-27T15:39:32.000Z</published>
    <updated>2020-09-05T07:37:11.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>近来工作不算忙，工作时间主要在忙解析文档的工作，期间经历了从手撸规则到编写机器学习模型再到深度学习模型（从全连接到Bi-LSTM-CRF）的转变，自己对深度学习的应用框架编写和落地有了更多的理解，尤其是如何在对任务深入理解之上将其建模为机器学习分类任务的流程，之后会另起文章详述，此处不表。</p><p>知识图谱和深度学习相结合的一个点就是图神经网络模型（GNN），这里自己也算开始接触并开启实践之旅了。</p><a id="more"></a><h2 id="1-DGL简单使用"><a href="#1-DGL简单使用" class="headerlink" title="1.DGL简单使用"></a>1.DGL简单使用</h2><h3 id="1-1-DGL介绍"><a href="#1-1-DGL介绍" class="headerlink" title="1.1 DGL介绍"></a>1.1 DGL介绍</h3><p>DGL是一个易于使用，高性能和可扩展的Python包，用于深入学习图形。<br>DGL与框架无关，这意味着如果一个深度图模型是端到端应用程序的一个组件，那么其余的逻辑可以在任何主要框架中实现，比如PyTorch、Apache MXNet或TensorFlow。</p><p>Github地址：<a href="https://github.com/dmlc/dgl" target="_blank" rel="noopener">dmlc/dgl: Python package built to ease deep learning on graph, on top of existing DL frameworks.</a></p><h3 id="1-2-示例代码"><a href="#1-2-示例代码" class="headerlink" title="1.2 示例代码"></a>1.2 示例代码</h3><p><strong>说明</strong>:以下代码在jupyter notebook中运行，且主要搬运自<a href="https://docs.dgl.ai/tutorials/basics/1_first.html" target="_blank" rel="noopener">DGL at a Glance — DGL 0.5.0 documentation</a></p><h4 id="引入依赖库"><a href="#引入依赖库" class="headerlink" title="引入依赖库"></a>引入依赖库</h4><pre><code class="lang-python">import dglimport numpy as np</code></pre><h4 id="使用DGL创建图"><a href="#使用DGL创建图" class="headerlink" title="使用DGL创建图"></a>使用DGL创建图</h4><pre><code class="lang-python">def build_karate_club_graph():    # All 78 edges are stored in two numpy arrays. One for source endpoints    # while the other for destination endpoints.    src = np.array([1, 2, 2, 3, 3, 3, 4, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 10, 10,        10, 11, 12, 12, 13, 13, 13, 13, 16, 16, 17, 17, 19, 19, 21, 21,        25, 25, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 31, 32, 32,        32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33,        33, 33, 33, 33, 33, 33, 33, 33, 33, 33])    dst = np.array([0, 0, 1, 0, 1, 2, 0, 0, 0, 4, 5, 0, 1, 2, 3, 0, 2, 2, 0, 4,        5, 0, 0, 3, 0, 1, 2, 3, 5, 6, 0, 1, 0, 1, 0, 1, 23, 24, 2, 23,        24, 2, 23, 26, 1, 8, 0, 24, 25, 28, 2, 8, 14, 15, 18, 20, 22, 23,        29, 30, 31, 8, 9, 13, 14, 15, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30,        31, 32])    # Edges are directional in DGL; Make them bi-directional.    u = np.concatenate([src, dst])    v = np.concatenate([dst, src])    # Construct a DGLGraph    return dgl.DGLGraph((u, v))G = build_karate_club_graph()print(&#39;We have %d nodes.&#39; % G.number_of_nodes())print(&#39;We have %d edges.&#39; % G.number_of_edges())</code></pre><p>输出：</p><pre><code class="lang-text">We have 34 nodes.We have 156 edges.</code></pre><h4 id="查看图结构"><a href="#查看图结构" class="headerlink" title="查看图结构"></a>查看图结构</h4><pre><code class="lang-python">import networkx as nx# Since the actual graph is undirected, we convert it for visualization# purpose.nx_G = G.to_networkx().to_undirected()# Kamada-Kawaii layout usually looks pretty for arbitrary graphspos = nx.kamada_kawai_layout(nx_G)nx.draw(nx_G, pos, with_labels=True, node_color=[[.2, .5, .7]])</code></pre><p>输出：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/dgl_1.png" alt="dgl_1"></p><h4 id="为节点或边分配特征"><a href="#为节点或边分配特征" class="headerlink" title="为节点或边分配特征"></a>为节点或边分配特征</h4><pre><code class="lang-python">import torchimport torch.nn as nnimport torch.nn.functional as Fembed = nn.Embedding(34, 5)  # 34 nodes with embedding dim equal to 5G.ndata[&#39;feat&#39;] = embed.weight# print out node 2&#39;s input featureprint(G.ndata[&#39;feat&#39;][2])# print out node 10 and 11&#39;s input featuresprint(G.ndata[&#39;feat&#39;][[10, 11]])</code></pre><h4 id="定义一个图卷积神经网络（GCN）"><a href="#定义一个图卷积神经网络（GCN）" class="headerlink" title="定义一个图卷积神经网络（GCN）"></a>定义一个图卷积神经网络（GCN）</h4><pre><code class="lang-python">from dgl.nn.pytorch import GraphConvclass GCN(nn.Module):    def __init__(self, in_feats, hidden_size, num_classes):        super(GCN, self).__init__()        self.conv1 = GraphConv(in_feats, hidden_size)        self.conv2 = GraphConv(hidden_size, num_classes)    def forward(self, g, inputs):        h = self.conv1(g, inputs)        h = torch.relu(h)        h = self.conv2(g, h)        return h# The first layer transforms input features of size of 5 to a hidden size of 5.# The second layer transforms the hidden layer and produces output features of# size 2, corresponding to the two groups of the karate club.net = GCN(5, 5, 2)</code></pre><h4 id="数据准备和初始化"><a href="#数据准备和初始化" class="headerlink" title="数据准备和初始化"></a>数据准备和初始化</h4><pre><code class="lang-python">inputs = embed.weightlabeled_nodes = torch.tensor([0, 33])  # only the instructor and the president nodes are labeledlabels = torch.tensor([0, 1])  # their labels are different</code></pre><h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><p>训练代码：</p><pre><code class="lang-python">import itertoolsoptimizer = torch.optim.Adam(itertools.chain(net.parameters(), embed.parameters()), lr=0.01)all_logits = []for epoch in range(50):    logits = net(G, inputs)    # we save the logits for visualization later    all_logits.append(logits.detach())    logp = F.log_softmax(logits, 1)    # we only compute loss for labeled nodes    loss = F.nll_loss(logp[labeled_nodes], labels)    optimizer.zero_grad()    loss.backward()    optimizer.step()    print(&#39;Epoch %d | Loss: %.4f&#39; % (epoch, loss.item()))</code></pre><p>输出：</p><pre><code class="lang-text">Epoch 0 | Loss: 0.8586Epoch 1 | Loss: 0.8109Epoch 2 | Loss: 0.7692Epoch 3 | Loss: 0.7338Epoch 4 | Loss: 0.7082Epoch 5 | Loss: 0.6831Epoch 6 | Loss: 0.6582Epoch 7 | Loss: 0.6352Epoch 8 | Loss: 0.6149Epoch 9 | Loss: 0.5956Epoch 10 | Loss: 0.5762Epoch 11 | Loss: 0.5572Epoch 12 | Loss: 0.5374Epoch 13 | Loss: 0.5179Epoch 14 | Loss: 0.4981Epoch 15 | Loss: 0.4777Epoch 16 | Loss: 0.4574Epoch 17 | Loss: 0.4363Epoch 18 | Loss: 0.4148Epoch 19 | Loss: 0.3934Epoch 20 | Loss: 0.3716Epoch 21 | Loss: 0.3494Epoch 22 | Loss: 0.3266Epoch 23 | Loss: 0.3034Epoch 24 | Loss: 0.2805Epoch 25 | Loss: 0.2589Epoch 26 | Loss: 0.2377Epoch 27 | Loss: 0.2172Epoch 28 | Loss: 0.1975Epoch 29 | Loss: 0.1790Epoch 30 | Loss: 0.1615Epoch 31 | Loss: 0.1451Epoch 32 | Loss: 0.1297Epoch 33 | Loss: 0.1156Epoch 34 | Loss: 0.1028Epoch 35 | Loss: 0.0912Epoch 36 | Loss: 0.0809Epoch 37 | Loss: 0.0721Epoch 38 | Loss: 0.0642Epoch 39 | Loss: 0.0572Epoch 40 | Loss: 0.0510Epoch 41 | Loss: 0.0455Epoch 42 | Loss: 0.0407Epoch 43 | Loss: 0.0364Epoch 44 | Loss: 0.0327Epoch 45 | Loss: 0.0294Epoch 46 | Loss: 0.0266Epoch 47 | Loss: 0.0241Epoch 48 | Loss: 0.0218Epoch 49 | Loss: 0.0199</code></pre><h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><pre><code class="lang-python">%matplotlib inlineimport matplotlib.pyplot as pltdef draw(i):    cls1color = &#39;#00FFFF&#39;    cls2color = &#39;#FF00FF&#39;    pos = {}    colors = []    for v in range(34):        pos[v] = all_logits[i][v].numpy()        cls = pos[v].argmax()        colors.append(cls1color if cls else cls2color)    ax.cla()    ax.axis(&#39;off&#39;)    ax.set_title(&#39;Epoch: %d&#39; % i)    nx.draw_networkx(nx_G.to_undirected(), pos, node_color=colors,            with_labels=True, node_size=300, ax=ax)fig = plt.figure(dpi=150)fig.clf()ax = fig.subplots()draw(0)  # draw the prediction of the first epochplt.show()plt.close()</code></pre><p>初始图节点状态：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/gdl_2.png" alt=""></p><p>动画效果：</p><pre><code class="lang-python">%matplotlib inlinefrom matplotlib import animation, rcfrom IPython.display import HTMLrc(&#39;animation&#39;, html=&#39;html5&#39;)ani = animation.FuncAnimation(fig, draw, frames=len(all_logits), interval=200)plt.show()# HTML(ani.to_html5_video()) # 将动画转为h5 video，和下面两种方式都行HTML(ani.to_jshtml()) # 可视化效果更佳，且好像不依赖ffmpeg？</code></pre><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/img/dgl_3.png" alt="dgl_3"></p><h2 id="2-遇到的问题"><a href="#2-遇到的问题" class="headerlink" title="2.遇到的问题"></a>2.遇到的问题</h2><h3 id="2-1-无法实现动画效果"><a href="#2-1-无法实现动画效果" class="headerlink" title="2.1 无法实现动画效果"></a>2.1 无法实现动画效果</h3><p>发现报<code>Matplotlib-Animation “No MovieWriters Available”</code>的错误，后来通过stackoverflow找到了解决方案，即下载<code>ffmpeg</code>并配置环境变量。</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3.参考"></a>3.参考</h2><ol><li><a href="https://docs.dgl.ai/tutorials/basics/1_first.html" target="_blank" rel="noopener">DGL at a Glance — DGL 0.5.0 documentation</a></li><li><a href="https://github.com/dmlc/dgl" target="_blank" rel="noopener">dmlc/dgl: Python package built to ease deep learning on graph, on top of existing DL frameworks.</a></li><li><a href="https://stackoverflow.com/questions/13316397/matplotlib-animation-no-moviewriters-available" target="_blank" rel="noopener">python - Matplotlib-Animation “No MovieWriters Available” - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/43445103/inline-animations-in-jupyter" target="_blank" rel="noopener">python - Inline animations in Jupyter - Stack Overflow</a></li><li><a href="https://blog.csdn.net/qq_43827595/article/details/104911316" target="_blank" rel="noopener">在 jupyter notebook 中使用 matplotlib 绘图的注意事项_WeiSenhui的博客-CSDN博客</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;p&gt;近来工作不算忙，工作时间主要在忙解析文档的工作，期间经历了从手撸规则到编写机器学习模型再到深度学习模型（从全连接到Bi-LSTM-CRF）的转变，自己对深度学习的应用框架编写和落地有了更多的理解，尤其是如何在对任务深入理解之上将其建模为机器学习分类任务的流程，之后会另起文章详述，此处不表。&lt;/p&gt;
&lt;p&gt;知识图谱和深度学习相结合的一个点就是图神经网络模型（GNN），这里自己也算开始接触并开启实践之旅了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识图谱" scheme="https://www.iamlightsmile.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    
      <category term="GNN" scheme="https://www.iamlightsmile.com/tags/GNN/"/>
    
  </entry>
  
  <entry>
    <title>“八佰”之我见</title>
    <link href="https://www.iamlightsmile.com/articles/%E2%80%9C%E5%85%AB%E4%BD%B0%E2%80%9D%E4%B9%8B%E6%88%91%E8%A7%81/"/>
    <id>https://www.iamlightsmile.com/articles/%E2%80%9C%E5%85%AB%E4%BD%B0%E2%80%9D%E4%B9%8B%E6%88%91%E8%A7%81/</id>
    <published>2020-08-25T14:52:02.000Z</published>
    <updated>2020-08-26T01:14:54.915Z</updated>
    
    <content type="html"><![CDATA[<p>最近上映了新的电影《八佰》，不过我没去看，有意思的是网上相关的评论近似呈现两边倒的态势。自昨天开始我也不自觉的站批评《八佰》这条路，不过到了今天晚上看了更多的评论之后自己有了新的理解，并且对于其中不少现象的困惑也都几近明了，这里简单做一个整理记录。</p><a id="more"></a><p>以我在B站最喜欢的up主<a href="https://space.bilibili.com/316568752" target="_blank" rel="noopener">马督工</a>的评论<a href="https://www.bilibili.com/video/BV1X54y1U7pQ" target="_blank" rel="noopener">【睡前消息158】明明是重口味玄幻电影，《八佰》何必自称历史大片_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>为例，他认为《八佰》可以算重口味玄幻电影，而不应该自称为历史大片，并且导演犯了历史虚无主义的错误，在电影里宣扬的是英雄史观而非人民史观。同样的，余亮老师在自己的评论<a href="https://www.bilibili.com/video/BV1zC4y1t7kK" target="_blank" rel="noopener">余亮X萧武·对谈《八佰》：管虎不清楚该选什么路，但我们应该清楚【从书说起】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>里也做出了类似的评价，认为导演管虎不清楚该选什么路。</p><p>看了他们的评论之后我第一时间的想法是大佬毕竟是大佬，能看出这么多门道，这么看来这个《八佰》确实应该被批判，导演管虎的屁股歪了，华谊为了捞钱自救简直不择手段。</p><p>这两条视频下面的评论主要是批判《八佰》、批判管虎、批判华谊，然而还是有一些评论相对温和，认为我们的态度不应该太苛刻，看了之后有启发有感动，还是要继续支持的。</p><p>这时我的困惑便是，为什么同样的视频，大家的理解和态度竟有着如此大的差别呢？那些人为什么要站支持《八佰》呢？他们又错在哪里呢？</p><p>在看了一些更加中性客观的评论之后，我才渐渐醒悟，上面的困惑自然就迎刃而解了。</p><p>关于“为什么同样的视频，大家的理解和态度竟有着如此大的差别”。正如”一千个读者心中有一千个哈姆雷特”， 我们首先需要承认的是人和人之间都存在着或大或小的思想层次、价值观念、阶级财富上的差异。有的人学识渊博，有的人大字不识一个；有的人偏爱阳春白雪，有的人只懂下里巴人；有的人信仰马克思主义，有的人追求美国自由主义；有的人自出生落地便是资产阶级，有的人穷苦一生不知何为阶级。</p><p>具体来说，我们可以粗略地将参与评论的大众分为三个层级，九大类别。三大层级包括知识水平有限，看电影看个热闹其实看不出啥门道的普通大众层（最底层）、导演管虎（打个比方）等所在的知识水平相对丰富，看电影能看出些门道的普通知识分子层（中层）、马督工等所在的知识水平丰富，见解深入深刻的高级知识分子层（高层）。其中每一层大致包括支持、中立、反对三大类别，共计九大类别。</p><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/不同知识层次.png" alt="不同知识层次"></p><p>其中最广泛普遍的普通大众在第一层，他们中更多的其实可能并不太了解这个电影背后所关联的历史事件，并不知道四行仓库，也并不知道谢晋元是谁，所以他们是以仰视的视角、相对放松的姿态去看这个电影。他们所知道的是《八佰》是改编自真实历史事件的战争片，他们可能并不太了解和在乎电影中故事的虚构性。</p><p>而站在第三层的督工们则是以俯视的视角去看这场电影，他们知道“八百壮士”的故事流传至今，几个版本的来龙去脉，他们可以发现哪些虚构加工不太符合逻辑，他们可以主观的看到电影的逻辑架构和主题思想乃至于导演所想表达的东西以及掺杂的私货，尽管这些看法不一定是正确的。</p><p>所以说当第二层和第三层的部分群体所从电影中看到的与自己的价值观念（偏右派）相符时，会发出支持的声音，认为反对者不应该对《八佰》太苛刻，电影创作应该相对自由，允许有不同的思想，不同的声音；当第二层和第三层的部分群体所从电影中看到的与自己的价值观念（偏右派）相背时，会发出批判的声音，其论点主要包括虚构加工成分过多、历史虚无主义、英雄史观而非人民史观等。</p><p>第一层的部分群体也分左派和右派，但是他们并看不到太多的如第三层的所能看到的东西，所以该层的非左的群体中部分发出支持的声音，理由是他们可以从电影中收获感动，体会到爱国主义、家国情怀，看到小人物的蜕变成长；而该层的以左派为主的部分群体则发出批判的声音，理由主要包括导演团体未采访谢晋元之子而是采访了孙元良之子秦汉、过度营销爱国主义以及继承自第二三层反对者们的理由等。</p><p>上面的分析也解释了部分人为什么会站支持《八佰》。而关于他们错在哪里的答案则是其实他们并没有错，或者说对错其实本来就是一个相对主观的概念，屁股不同，看到的自然不一样，每个人有自己的想法是再正常不过的事情。</p><p>而我原本的身份是处在第一层的反对者，然而现在是既反对又支持，即更加辩证的客观中立。然而抛却以上提到的反对和支持的理由，自己延伸出的想法则是虽然从商业的角度去看，这部电影是华谊和大众普通观影者（好评率占多数）的双赢，然而从社会意识的角度去看，除却爱国主义以外，电影中确实潜移默化地表示了些许非马克思主义的意识形态。</p><p>从理论上来说，马克思主义和新自由主义都是被历史实践验证过的与时俱进发展的主义，但是由于我们国家的政治主体是社会主义国家，走的是具有中国特色的社会主义道路，然而如果我们的国民所受到的新自由主义的影响越多越深，那么我们的国民对马克思主义和社会主义的否定和怀疑也就越多，这并不利于我们坚持走这一条正确的、历史验证过可行的社会主义道路。</p><p>换句话说，对于资产阶级而言，资本主义道路和资本主义社会是相比于社会主义道路和社会主义社会更合适的土壤，资本家和资产阶级以及相关附庸在一个国家中虽然只占相对少部分，但是其背后的财力以及其所把持的媒体通道却每时每刻都在影响着国家的运转以及国民的脑子，所以在我们这个社会主义国家成长起来的资本家跃迁到资产阶级之后，受利益驱使是有着想改变国家政治形态的倾向的，而这与外部势力相结合的终极目标便是内部社会主义政权崩溃瓦解与国家政治形态和平演变。</p><p>然而可能有人会想，我虽然不是资产阶级，但是觉得资本主义社会也没什么不好的啊。问题的关键在于就算我们改走资本主义社会，融入整个资本主义体系，我们的社会发展阶段也没有过渡到美国西欧那样的发达形态，我们的人口资源比还是很低，美国欧洲也不会把我们当做真正的朋友，他们不会允许这样的潜在的威胁存在，他们只会利用各种手段来分裂中国，使中国处于四分五裂的状态长期内战，以实现对他们的威胁最小化，我们的下场可能比如今战乱地区的人们过得还惨，回到民国军阀乱战的状态。当丧失掉独立自主之后，丧权辱国也必然随之而来。就算我们做最好的打算，我们华人在美国的待遇也永远做不了一等公民，看看如今的美国黑人，争取了上百年的权益到现在其实也不过如此，因为尊严和地位永远是取决于实力的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近上映了新的电影《八佰》，不过我没去看，有意思的是网上相关的评论近似呈现两边倒的态势。自昨天开始我也不自觉的站批评《八佰》这条路，不过到了今天晚上看了更多的评论之后自己有了新的理解，并且对于其中不少现象的困惑也都几近明了，这里简单做一个整理记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随念" scheme="https://www.iamlightsmile.com/categories/%E9%9A%8F%E5%BF%B5/"/>
    
    
      <category term="杂谈" scheme="https://www.iamlightsmile.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>使用nginx搭建简单文件服务器</title>
    <link href="https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8nginx%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-08-16T02:24:31.000Z</published>
    <updated>2020-08-16T03:04:25.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>我们有多种通过网络给别人发送文件的方式，包括QQ文件分享、微信文件分享、网盘链接分享、邮件附件分享、文件服务器URL链接等。</p><a id="more"></a><p>其中QQ文件分享和微信文件分享的前提是双方互加了好友，而在给陌生人分享文件的场景下这种方式自然不太适用了。</p><p>而网盘链接分享则需要先将文件上传到百度云网盘等各类网盘工具中，其中百度云网盘毕竟大厂保证但是速度偏慢，而其他的网盘或许没过几天就倒闭了。</p><p>通过邮件附件的方式比较方便，但是针对的仅是一对一的场景，虽然也可以通过转发或同时抄送多人的方式实现一对多，但当涉及到文件更新的时候，还需要再次发送邮件，也比较麻烦。</p><p>而至于文件服务器URL链接，主要包括自行搭建和通过第三方网站转存两种方式，具体比如说Linux系统镜像源和Pip源网站等。</p><p>近来涉及到在Github上和某库开发者分享测试文件，之前通过邮件附件方式，之后又需要分享，感觉不够方便，正好自己有在腾讯云上购买云服务器，所以就计划用nginx自己搭一下文件服务器啦。</p><h2 id="1-搭建流程"><a href="#1-搭建流程" class="headerlink" title="1. 搭建流程"></a>1. 搭建流程</h2><h3 id="1-1-安装Nginx"><a href="#1-1-安装Nginx" class="headerlink" title="1.1 安装Nginx"></a>1.1 安装Nginx</h3><p>略</p><h3 id="1-2-添加配置信息"><a href="#1-2-添加配置信息" class="headerlink" title="1.2 添加配置信息"></a>1.2 添加配置信息</h3><p>在nginx的配置文件中，视自己情况添加如下信息，以我自己的为例：</p><pre><code class="lang-conf">server {    client_max_body_size 4G;    listen  5666; # 选择绑定的端口    server_name  www.lightsmile.cn;    root /root/data/share; # 想要分享的文件路径    charset utf-8; # 中文名文件不乱码    # auth_basic &quot;Restricted&quot;; # 增加密码授权    # auth_basic_user_file /etc/nginx/pass_file; # 密码路径    location / {        autoindex on; # 显示索引        autoindex_exact_size on; # 显示大小        autoindex_localtime on;   # 显示时间    }}</code></pre><h3 id="1-3-设置访问验证"><a href="#1-3-设置访问验证" class="headerlink" title="1.3 设置访问验证"></a>1.3 设置访问验证</h3><p>略，自己这里尝试了不过失败了，一直循环提示输入密码，虽然输入的是对的，所以就不献丑了。</p><h3 id="1-4-重启nginx"><a href="#1-4-重启nginx" class="headerlink" title="1.4 重启nginx"></a>1.4 重启nginx</h3><pre><code class="lang-bash">nginx -s reload</code></pre><h3 id="1-5-查看效果"><a href="#1-5-查看效果" class="headerlink" title="1.5 查看效果"></a>1.5 查看效果</h3><p>如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/nginx文件服务器效果.png" alt="外网访问效果"></p><p>其中服务器中相应的文件信息：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/nginx文件服务器本地文件.png" alt="文件服务器本地文件"></p><h2 id="2-参考"><a href="#2-参考" class="headerlink" title="2. 参考"></a>2. 参考</h2><ol><li><a href="https://www.jianshu.com/p/95602720e7c8" target="_blank" rel="noopener">利用nginx搭建小型的文件服务器 - 简书</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;p&gt;我们有多种通过网络给别人发送文件的方式，包括QQ文件分享、微信文件分享、网盘链接分享、邮件附件分享、文件服务器URL链接等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="nginx" scheme="https://www.iamlightsmile.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>科学上网简单汇总</title>
    <link href="https://www.iamlightsmile.com/articles/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%AE%80%E5%8D%95%E6%B1%87%E6%80%BB/"/>
    <id>https://www.iamlightsmile.com/articles/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%AE%80%E5%8D%95%E6%B1%87%E6%80%BB/</id>
    <published>2020-07-31T03:25:57.000Z</published>
    <updated>2020-07-31T06:15:31.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="科学上网总结"><a href="#科学上网总结" class="headerlink" title="科学上网总结"></a>科学上网总结</h2><ol><li>自建服务器</li><li>使用翻墙软件</li><li>使用浏览器插件</li></ol><a id="more"></a><h2 id="自建服务器"><a href="#自建服务器" class="headerlink" title="自建服务器"></a>自建服务器</h2><p>自建服务器是指购买部署在大陆以外（包括国外、香港等）的服务器服务，然后自己搭建如Shadowsocks、V2ray、Brook等工具实现代理服务。优点是隐私性比较好，但是搭建成本较高，自己得懂一些计算机尤其是Linux系统知识。在之前的话，这算是一个比较好的方案，但是现在国家的墙实在是越来越严，几乎很快就能封锁端口和ip，所以现在这条路其实已经很难走了。</p><h2 id="使用翻墙软件"><a href="#使用翻墙软件" class="headerlink" title="使用翻墙软件"></a>使用翻墙软件</h2><p>传统的比如说蓝灯，新发现的比如说pandaVPN，网上搜了一下，18年刚成立的，评价看起来还可以，比如：<a href="https://bestvpnforchina.co/reviews/pandavpn/" target="_blank" rel="noopener">PandaVPN 评价 - 最好翻墙软件評價 2020 | BestVPNforChina</a>、<a href="https://www.vpndada.com/best-vpns-for-china-cn/" target="_blank" rel="noopener">最好用的VPN翻墙软件推荐（2020中国VPN实测）- VPNDada</a>，这是官网：<a href="https://www.pandavpnpro.com/" target="_blank" rel="noopener">PandaVPN - 全球最快&amp;最具隐私安全的VPN</a>，这是国内网站（可能链接已经失效）：<a href="https://www.pandufm.xyz/" target="_blank" rel="noopener">PandaVPN - 全球最快&amp;最具隐私安全的VPN</a>。在网上搜索了一番之后，发现ExpressVPN：<a href="https://support.qmqg6850.xyz/zh-cn" target="_blank" rel="noopener">高速、安全和匿名的VPN服务 | ExpressVPN</a>评价一直都很高，但是之前一直没有了解到也没有使用过。</p><h2 id="使用浏览器插件"><a href="#使用浏览器插件" class="headerlink" title="使用浏览器插件"></a>使用浏览器插件</h2><p>比如<a href="https://chrome.google.com/webstore/detail/hoxx-vpn-proxy/nbcojefnccbanplpoffopkoepjmhgdgh" target="_blank" rel="noopener">Hoxx VPN Proxy - Chrome 网上应用店</a>和<a href="https://chrome.google.com/webstore/detail/setupvpn-lifetime-free-vp/oofgbpoabipfcfjapgnbbjjaenockbdp" target="_blank" rel="noopener">SetupVPN - Lifetime Free VPN - Chrome 网上应用店</a>，但是发现网上有一篇文章<a href="https://twitter.com/lyyx0000/status/919339815388057600" target="_blank" rel="noopener">lyyx0000 / Twitter</a>说两个工具同出一源，我自己装了一下发现是挺像的。</p><h2 id="相关VPN知识"><a href="#相关VPN知识" class="headerlink" title="相关VPN知识"></a>相关VPN知识</h2><blockquote><p>参考网址：<a href="https://cnodejs.org/topic/53b93bab1b009b31532ef934" target="_blank" rel="noopener">有靠谱的VPN推荐吗? - CNode技术社区</a></p></blockquote><h3 id="1-翻墙基本认识"><a href="#1-翻墙基本认识" class="headerlink" title="1. 翻墙基本认识"></a>1. 翻墙基本认识</h3><p>翻墙是为了不影响学习与工作，不是去诋毁中国和中国人。</p><p>你要明白世界的媒体是受西方控制的，舆论战里众多西方媒体是进攻的一方，而非西方阵营的国家只能选择防守，我们不说墙的存在对你我个人是好或不好，方便与不方便，如果说这个，当大概是不好也不方便，但也得明白防火墙存在在政治与国家安全上的‘合理性’。</p><p>绝大多数西方媒体都带有浓烈的意识形态企图，它们绝对不是“公正中立”的，明白这一点的中国人会越来越多。选择性报道，恶意扭曲的例子并不少，甚至一度还有“中国共产党镇压狗”的奇葩新闻，西方媒体说谎作恶，无所不用其极。翻墙绝对不是为了去做西方媒体的喉舌，你只要被绕进去，就很难看到全部的事实了。翻墙是首先是为了不影响个人学习与工作，其次是为了更好地学习和工作，还当然有娱乐：）Googe，Youtube，Facebook，Twitter上都有大量有益的信息可以看。况且前面说了，对个人来说，墙的门槛实际上并没有你想的那么高，墙的存在并不能阻止你获得这些信息。</p><p>不要假设“翻墙后”的必然选择是搞些猎奇反动的事情，翻墙后有很多有趣、有意义的东西可以看。有一些免费翻墙工具背后是美国国会支持的，典型代表是曾经流行的自由门，就有美国国会几百万美金的拨款，自由门绝对不是唯一一款，这种免费VPN会向用户不停推送反动信息，好在几年前被封了。</p><p>不要分发分享自建VPN，SSR机场，脚本等</p><p>国内有些小朋友看到搭建SSR这么容易，就去建机场，这是典型的作死，可以自行去搜机场主或者站长被请抓的新闻。个人VPN，SSR你自己用，请保持低调。不要到微信、微博这些地方去分发，除非你很想喝茶。分发分享自建VPN，SSR机场是犯法的。</p><h3 id="2-VPN与加密代理"><a href="#2-VPN与加密代理" class="headerlink" title="2. VPN与加密代理"></a>2. VPN与加密代理</h3><p>中国的翻墙软件目前就两大类：一是VPN（OpenVPN等多种协议），二是加密代理（HTTPS，SOCKS5）。</p><p>VPN分免费的和付费的，绝大多数都有自己的加密和混淆算法，以绕过防火墙侦测。这个东西需要大量技术与人力的投入，所以几乎所有免费VPN和绝大多数小的付费VPN厂商都做不到长期稳定翻墙，因为它们的加密和数据混淆算法在防火墙的DPI（Deep Packet Inspection）面前不堪一击。剩下的VPN厂商都是有技术实力和预算来持续更新算法的。而且，中国国内的VPN大多数都关了，国外大多数VPN官网被墙，也无法购买。剩下的也只有那些重视中国VPN市场的大的厂商才能持续更新中国VPN镜像站了。</p><p>加密代理的技术五花八门，蓝灯，SS，SSR，V2Ray，Brook，WireGuard。目前中国网民里蓝灯和SSR有较多人使用，V2Ray，Brook，WireGuard技术门槛比较高，还很小众。蓝灯作为一个免费+付费的代理翻墙服务，口碑还好。自己搭建的SSR私服非常多，国外VPS服务商那里被封禁的IP也特别多。</p><p>所以现在能推荐的翻墙软件，无非国外的VPN大厂商，还有靠谱一点的SSR节点。但总的来说，付费VPN的长期翻墙能力更有保障，毕竟人家一个公司的人力与技术投入进去的。现在中国能推荐的VPN翻墙软件很少。</p><h3 id="3-翻墙软件常见问题"><a href="#3-翻墙软件常见问题" class="headerlink" title="3. 翻墙软件常见问题"></a>3. 翻墙软件常见问题</h3><h4 id="为什么个人数据会泄露"><a href="#为什么个人数据会泄露" class="headerlink" title="为什么个人数据会泄露"></a>为什么个人数据会泄露</h4><p>一旦连接到网络，运营商（ISP）就可以窥探你的所有流量。这就是互联网的运行原理，在访问某个网站之前，你必须向ISP 发出请求，请求通过后，就可以按指示接收网点。所以，你在线完成的所有操作都是在ISP眼皮底下进行的。除非你使用VPN。</p><h4 id="翻墙软件的工作原理"><a href="#翻墙软件的工作原理" class="headerlink" title="翻墙软件的工作原理"></a>翻墙软件的工作原理</h4><p>当你连接VPN时，你的客户端会首先连接到一个远程VPN服务器，这个服务器会修改你的IP 地址并对你发送或接收的所有数据进行加密。这种设置避免了窥探者或网络犯罪分子看到你的浏览记录。‎</p><h3 id="近期VPN现状"><a href="#近期VPN现状" class="headerlink" title="近期VPN现状"></a>近期VPN现状</h3><p>随着近几年大规模的VPN封锁，大部VPN都已阵亡。以下是一些观察和建议：</p><ul><li>国内的VPN已经全部阵亡，就不要考虑了</li><li>国外的VPN大部分也不能用了</li><li>免费VPN大部分都不好用（但很多付费VPN提供免费VPN试用）</li><li>如果懂技术，可以通过自己搭建SSR、WireGuard、V2Ray、Trogan等办法实现翻墙科学上网</li><li>如果不懂技术，最简单的办法是购买在中国好用的国外付费VPN。</li></ul><h3 id="VPN推荐"><a href="#VPN推荐" class="headerlink" title="VPN推荐"></a>VPN推荐</h3><div class="table-container"><table><thead><tr><th style="text-align:left">VPN 品牌</th><th style="text-align:left">VPN 评测</th><th style="text-align:left">优惠链接</th></tr></thead><tbody><tr><td style="text-align:left"><strong>ExpressVPN</strong></td><td style="text-align:left"><a href="https://www.vpndada.com/expressvpn-review-cn/" target="_blank" rel="noopener">ExpressVPN评测</a></td><td style="text-align:left"><a href="https://www.vpndada.com/go/expressvpn-discount-cn" target="_blank" rel="noopener"><strong>&gt;&gt;&gt;ExpressVPN优惠链接&lt;&lt;&lt;</strong></a></td></tr><tr><td style="text-align:left"><strong>NordVPN</strong></td><td style="text-align:left"><a href="https://www.vpndada.com/nordvpn-review-cn/" target="_blank" rel="noopener">NordVPN评测</a></td><td style="text-align:left"><a href="https://www.vpndada.com/go/nordvpn-cn" target="_blank" rel="noopener"><strong>&gt;&gt;&gt;NordVPN优惠链接&lt;&lt;&lt;</strong></a></td></tr><tr><td style="text-align:left"><strong>VyprVPN</strong></td><td style="text-align:left"><a href="https://www.vpndada.com/vyprvpn-review-cn/" target="_blank" rel="noopener">VyprVPN评测</a></td><td style="text-align:left"><a href="https://www.vpndada.com/go/vyprvpn-cn" target="_blank" rel="noopener"><strong>&gt;&gt;&gt;VyprVPN优惠链接&lt;&lt;&lt;</strong></a></td></tr><tr><td style="text-align:left"><strong>PureVPN</strong></td><td style="text-align:left"><a href="https://www.vpndada.com/purevpn-review/" target="_blank" rel="noopener">PureVPN评测</a></td><td style="text-align:left"><a href="https://www.vpndada.com/go/purevpn-cn" target="_blank" rel="noopener"><strong>&gt;&gt;&gt;PureVPN优惠链接&lt;&lt;&lt;</strong></a></td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;科学上网总结&quot;&gt;&lt;a href=&quot;#科学上网总结&quot; class=&quot;headerlink&quot; title=&quot;科学上网总结&quot;&gt;&lt;/a&gt;科学上网总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;自建服务器&lt;/li&gt;
&lt;li&gt;使用翻墙软件&lt;/li&gt;
&lt;li&gt;使用浏览器插件&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="科学上网" scheme="https://www.iamlightsmile.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>VMware中挂载共享文件夹</title>
    <link href="https://www.iamlightsmile.com/articles/VMware%E4%B8%AD%E6%8C%82%E8%BD%BD%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://www.iamlightsmile.com/articles/VMware%E4%B8%AD%E6%8C%82%E8%BD%BD%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2020-07-08T06:39:26.000Z</published>
    <updated>2020-07-08T07:12:33.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>现在自己开发主要用Windows系统，但是还是要去Linux系统去测试一下是否能跑通，目前公司的配置实在一言难尽，只能自己在笔记本里搞虚拟机。</p><p>由于涉及到文件共享，所以需要挂载共享文件夹，本来说已经在设置界面设置了，但是没想到只在第一次有效，之后就再也不行了。</p><a id="more"></a><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/vmware共享文件夹设置.png" alt="vmware共享文件夹设置"></p><h2 id="1-过程"><a href="#1-过程" class="headerlink" title="1.过程"></a>1.过程</h2><p>在网上搜索相关教程之后发现由于时效问题系统更迭也不管用，不过最终还是在VMware官网即<a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/15.0/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a>找到了合适的指令。</p><p>即：<br><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/VMware官方装载共享文件夹指令.png" alt="VMware官方装载共享文件夹指令"></p><p>之后在Linux虚拟系统中执行的指令操作如下：</p><pre><code class="lang-bash">➜  ~ vmware-hgfsclientfromHost➜  ~ uname -aLinux ubuntu 5.4.0-40-generic #44-Ubuntu SMP Tue Jun 23 00:01:04 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux➜  ~ vmhgfs-fuse .host:/ /home/lightsmile/Shares -o subtype=vmhgfs-fuse,allow_otherfusermount: option allow_other only allowed if &#39;user_allow_other&#39; is set in /etc/fuse.conf➜  ~ nano /etc/fuse.conf➜  ~ sudo nano /etc/fuse.conf➜  ~ vmhgfs-fuse .host:/ /home/lightsmile/Shares -o subtype=vmhgfs-fuse,allow_other➜  ~ lsDesktop    Downloads   Music     Public  snap      TemplatesDocuments  miniconda3  Pictures  Shares  Software  Videos➜  ~ ls SharesfromHost</code></pre><p>其间提示要修改<code>/etc/fuse.conf</code>文件，即把那一行注释去掉，如图：</p><p>!edit_fuse_file<a href="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/edit_fuse_file.png" target="_blank" rel="noopener"></a></p><p>然后便可以重新访问共享的文件夹了，如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/Linux访问共享文件夹.png" alt="Linux访问共享文件夹"></p><h2 id="3-设置全局永久生效"><a href="#3-设置全局永久生效" class="headerlink" title="3.设置全局永久生效"></a>3.设置全局永久生效</h2><p>为了可以使得该设置一直生效，而不是每次开机后重启，我们可以将那一行命令放入<code>.bashrc</code>或者<code>.zshrc</code>中，但是我这里为了使得全局生效，所以在<code>/etc/profile.d</code>文件夹下新建了一个脚本名为<code>set_share_file.sh</code>，并设置里面的内容为：</p><pre><code class="lang-sh">vmhgfs-fuse .host:/ /home/lightsmile/Shares -o subtype=vmhgfs-fuse,allow_other</code></pre><p>然后就可以啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;p&gt;现在自己开发主要用Windows系统，但是还是要去Linux系统去测试一下是否能跑通，目前公司的配置实在一言难尽，只能自己在笔记本里搞虚拟机。&lt;/p&gt;
&lt;p&gt;由于涉及到文件共享，所以需要挂载共享文件夹，本来说已经在设置界面设置了，但是没想到只在第一次有效，之后就再也不行了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="VMware" scheme="https://www.iamlightsmile.com/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>Windows走终端代理</title>
    <link href="https://www.iamlightsmile.com/articles/Windows%E8%B5%B0%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/"/>
    <id>https://www.iamlightsmile.com/articles/Windows%E8%B5%B0%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</id>
    <published>2020-06-29T08:13:24.000Z</published>
    <updated>2020-06-29T08:27:56.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>最近的墙可真严。</p><p>自己更新了Python包，要上传到Pypi上去，发现传不了了。终端提示：<code>Uploading distributions to https://upload.pypi.org/legacy/</code>，自己无法ping通<code>upload.pypi.org</code>，但是可以ping通<code>pypi.org</code>，这就很尴尬了。</p><a id="more"></a><p>于是想着只能走终端代理了，网上找了些教程，大致试了一下，发现可行~</p><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h2><p>如在终端中设置：</p><pre><code class="lang-bash"># http协议代理set http_proxy=http://127.0.0.1:1080set https_proxy=http://127.0.0.1:1080# socks5协议代理set http_proxy=socks5://127.0.0.1:1080set https_proxy=socks5://127.0.0.1:1080</code></pre><p>具体协议与端口请结合自己情况设置。</p><h2 id="2-参考"><a href="#2-参考" class="headerlink" title="2. 参考"></a>2. 参考</h2><p>具体内容与教程可自行参考下面所附链接。</p><ol><li><a href="https://blog.fazero.me/2015/09/15/%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">让终端走代理的几种方法 | fazero</a></li><li><a href="https://zcdll.github.io/2018/01/27/proxy-on-windows-terminal/" target="_blank" rel="noopener">给 Windows 的终端配置代理 | zcdll’s Blog</a></li><li><a href="https://howiezhao.github.io/2018/10/18/proxychains/" target="_blank" rel="noopener">代理链工具：proxychains | Howie’s Notes</a></li><li><a href="https://g2ex.top/2017/10/22/windows-linux-git-proxy-cmd/index.html" target="_blank" rel="noopener">Win/Linux 命令行、终端和 Git 代理设置 | G2EX</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;p&gt;最近的墙可真严。&lt;/p&gt;
&lt;p&gt;自己更新了Python包，要上传到Pypi上去，发现传不了了。终端提示：&lt;code&gt;Uploading distributions to https://upload.pypi.org/legacy/&lt;/code&gt;，自己无法ping通&lt;code&gt;upload.pypi.org&lt;/code&gt;，但是可以ping通&lt;code&gt;pypi.org&lt;/code&gt;，这就很尴尬了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用frp轻松实现内网穿透</title>
    <link href="https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8frp%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8frp%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
    <published>2020-06-29T02:07:07.000Z</published>
    <updated>2020-07-11T04:18:42.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>由于种种原因，希望可以通过外网访问自己的笔记本电脑搭建的Web服务，而这正是内网穿透所做的事情，hhh，自己之前找了关于Nginx实现反向代理的教程，发现呼呼扯一堆不是自己想要的，于是又找，终于找到了一篇写的比较详细完整的教程：<a href="https://zhuanlan.zhihu.com/p/55306067" target="_blank" rel="noopener">windows下基于frp的内网穿透部署 - 知乎</a>和理想中的工具：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp</a>。</p><a id="more"></a><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><h3 id="1-1-frp简介"><a href="#1-1-frp简介" class="headerlink" title="1.1 frp简介"></a>1.1 frp简介</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</p><h3 id="1-2-需求及原理"><a href="#1-2-需求及原理" class="headerlink" title="1.2 需求及原理"></a>1.2 需求及原理</h3><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/反向代理示意图.png" alt="反向代理示意图"></p><h2 id="2-搭建流程"><a href="#2-搭建流程" class="headerlink" title="2. 搭建流程"></a>2. 搭建流程</h2><h3 id="2-1-下载运行程序"><a href="#2-1-下载运行程序" class="headerlink" title="2.1 下载运行程序"></a>2.1 下载运行程序</h3><p>在<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">Releases · fatedier/frp</a>界面分别下载对应架构的服务端程序和客户端程序，以我的为例：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/下载frp程序.png" alt="下载frp程序"></p><p>其中标红的是需要下载的压缩程序，文件名含linux的是服务端，含windows的是客户端，因为我的腾讯云服务器上装的是Centos7，而我的笔记本则是Windows10系统。</p><p>分别将这两个文件放到服务器和笔记本的适当位置（没有要求，自己看着来）</p><h3 id="2-2-配置服务端（公网反向代理端）"><a href="#2-2-配置服务端（公网反向代理端）" class="headerlink" title="2.2 配置服务端（公网反向代理端）"></a>2.2 配置服务端（公网反向代理端）</h3><h4 id="2-2-1-修改frps-ini文件"><a href="#2-2-1-修改frps-ini文件" class="headerlink" title="2.2.1 修改frps.ini文件"></a>2.2.1 修改<code>frps.ini</code>文件</h4><p>设置 http 访问端口为 8080：</p><pre><code class="lang-ini"># frps.ini[common]bind_port = 7000vhost_http_port = 8080</code></pre><h4 id="2-2-2-启动frps"><a href="#2-2-2-启动frps" class="headerlink" title="2.2.2 启动frps"></a>2.2.2 启动frps</h4><p>在程序所在目录运行以下命令：</p><pre><code class="lang-bash">./frps -c ./frps.ini</code></pre><p>当然以上的命令是前台运行的，一退出就挂掉了，所以实际上我们需要后台执行该程序，也就是要运行以下命令：</p><pre><code class="lang-bash">nohup ./frps -c ./frps.ini &gt; frps.log 2&gt;&amp;1 &amp;</code></pre><p>这样frps程序便会在后台运行，并且会将程序输出重定向到<code>frps.log</code>文件</p><h3 id="2-3-配置客户端（内网机，实际访问端）"><a href="#2-3-配置客户端（内网机，实际访问端）" class="headerlink" title="2.3 配置客户端（内网机，实际访问端）"></a>2.3 配置客户端（内网机，实际访问端）</h3><h4 id="2-3-1-修改frpc-ini文件"><a href="#2-3-1-修改frpc-ini文件" class="headerlink" title="2.3.1 修改frpc.ini文件"></a>2.3.1 修改<code>frpc.ini</code>文件</h4><p>假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 web 服务对应的端口, 绑定自定义域名 <code>www.yourdomain.com</code>:</p><pre><code class="lang-ini"># frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[web]type = httplocal_port = 80custom_domains = www.yourdomain.com</code></pre><blockquote><p><strong>注意</strong>：如果没有自定义域名，可以将上面的<code>custom_domains</code>字段内容设置为服务器的ip地址，即<code>server_addr</code>字段的内容，这样也可以直接通过ip访问内网服务</p></blockquote><p>我自己的配置是：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/frpc客户端配置.png" alt="frpc客户端配置"></p><h4 id="2-3-2-启动frpc"><a href="#2-3-2-启动frpc" class="headerlink" title="2.3.2 启动frpc"></a>2.3.2 启动frpc</h4><pre><code class="lang-bash">./frpc -c ./frpc.ini</code></pre><p>以我自己的为例，则是：</p><pre><code class="lang-bash"> ./frpc.exe -c ./frpc.ini</code></pre><p>如下图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/Windows客户端启动frpc.png" alt="Windows客户端启动frpc"></p><h2 id="3-测试服务"><a href="#3-测试服务" class="headerlink" title="3. 测试服务"></a>3. 测试服务</h2><p>我们使用Python下的Flask环境搭建一个最简单的Web服务：</p><pre><code class="lang-python">from flask import Flaskapp = Flask(__name__)@app.route(&#39;/&#39;)def hello_world():    return &#39;Hello World!&#39;if __name__ == &#39;__main__&#39;:    app.run(port=8080)</code></pre><blockquote><p><strong>注意</strong>: 服务端口一定要对应的上</p></blockquote><p>本地与外网访问结果如下图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/本地测试Web服务.png" alt="本地测试Web服务"></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/外网访问本地服务.png" alt="外网访问本地服务"></p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/55306067" target="_blank" rel="noopener">windows下基于frp的内网穿透部署 - 知乎</a></li><li><a href="https://github.com/fatedier/frp/blob/master/README_zh.md#%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E9%83%A8%E7%BD%B2%E4%BA%8E%E5%86%85%E7%BD%91%E7%9A%84-web-%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener">frp/README_zh.md at master · fatedier/frp</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;p&gt;由于种种原因，希望可以通过外网访问自己的笔记本电脑搭建的Web服务，而这正是内网穿透所做的事情，hhh，自己之前找了关于Nginx实现反向代理的教程，发现呼呼扯一堆不是自己想要的，于是又找，终于找到了一篇写的比较详细完整的教程：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/55306067&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;windows下基于frp的内网穿透部署 - 知乎&lt;/a&gt;和理想中的工具：&lt;a href=&quot;https://github.com/fatedier/frp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;frp&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="frp" scheme="https://www.iamlightsmile.com/tags/frp/"/>
    
      <category term="内网穿透" scheme="https://www.iamlightsmile.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>给网站添加SSL认证（Nginx服务器）</title>
    <link href="https://www.iamlightsmile.com/articles/%E7%BB%99%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0SSL%E8%AE%A4%E8%AF%81%EF%BC%88Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/"/>
    <id>https://www.iamlightsmile.com/articles/%E7%BB%99%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0SSL%E8%AE%A4%E8%AF%81%EF%BC%88Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/</id>
    <published>2020-06-29T02:04:29.000Z</published>
    <updated>2020-06-29T02:06:42.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>自己的国内博客网站一直都是只有http访问方式，突然在看的一篇忘了讲啥的文章提到腾讯云可以免费申请SSL证书，于是自己也去操作了，没想到可能就间隔2、3个小时就申请成功了，然后按照文档进行配置就可以了。</p><a id="more"></a><p>主要参考的文档：<a href="https://cloud.tencent.com/document/product/400/35244" target="_blank" rel="noopener">SSL 证书 Nginx 服务器证书安装 - 最佳实践 - 文档中心 - 腾讯云</a></p><p>下面以自己在腾讯云注册的<code>lightsmile.cn</code>为例演示说明一下。</p><h2 id="1-配置流程"><a href="#1-配置流程" class="headerlink" title="1. 配置流程"></a>1. 配置流程</h2><h3 id="1-1-将证书下载并拷贝至服务器"><a href="#1-1-将证书下载并拷贝至服务器" class="headerlink" title="1.1 将证书下载并拷贝至服务器"></a>1.1 将证书下载并拷贝至服务器</h3><p>证书如何申请此处不表，在腾讯云的SSL证书业务界面，可以将证书相关信息以zip压缩包形式下载下来，如：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/腾讯云SSL证书.png" alt="腾讯云SSL证书"></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/SSL证书压缩包内容.png" alt="SSL证书压缩包内容"></p><p>里面的Nginx目录下的就是我们需要放置到服务器的内容。</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/SSL证书内容.png" alt="SSL证书内容"></p><p>放置到Nginx安装目录，如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/将证书上传到服务器.png" alt="将证书上传到服务器"></p><h3 id="1-2-修改nginx-conf内容"><a href="#1-2-修改nginx-conf内容" class="headerlink" title="1.2 修改nginx.conf内容"></a>1.2 修改<code>nginx.conf</code>内容</h3><p>以我的配置为例：</p><pre><code class="lang-json">server {        listen       80 default_server;        listen       [::]:80 default_server;        server_name  www.lightsmile.cn;        #把http的域名请求转成https        return 301 https://$host$request_uri;    }# Settings for a TLS enabled server.#   server {        listen       443 ssl http2 default_server;        listen       [::]:443 ssl http2 default_server;        server_name  www.lightsmile.cn;        root         /root/data/www/hexo;        index index.html index.htm;        ssl_certificate 1_www.lightsmile.cn_bundle.crt;        ssl_certificate_key 2_www.lightsmile.cn.key;        ssl_session_timeout 5m;        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;         ssl_prefer_server_ciphers on;        ssl_session_cache shared:SSL:1m;       # Load configuration files for the default server block.       include /etc/nginx/default.d/*.conf;       location / {           index index.html index.htm;       }       error_page 404 /404.html;           location = /40x.html {       }       error_page 500 502 503 504 /50x.html;           location = /50x.html {       }   }</code></pre><p>上面的配置中，添加了HTTP 自动跳转 HTTPS 的安全配置（具体细节也可以参考上面的腾讯云文档）</p><h3 id="1-3-验证配置文件并重启Nginx"><a href="#1-3-验证配置文件并重启Nginx" class="headerlink" title="1.3 验证配置文件并重启Nginx"></a>1.3 验证配置文件并重启Nginx</h3><p>然后，验证配置文件是否有问题：</p><pre><code class="lang-bash">./nginx -t</code></pre><p>若无问题，重启Nginx即可：</p><pre><code class="lang-bash">./nginx -s reload</code></pre><h2 id="2-参考"><a href="#2-参考" class="headerlink" title="2. 参考"></a>2. 参考</h2><ol><li><a href="https://cloud.tencent.com/document/product/400/35244" target="_blank" rel="noopener">SSL 证书 Nginx 服务器证书安装 - 最佳实践 - 文档中心 - 腾讯云</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;p&gt;自己的国内博客网站一直都是只有http访问方式，突然在看的一篇忘了讲啥的文章提到腾讯云可以免费申请SSL证书，于是自己也去操作了，没想到可能就间隔2、3个小时就申请成功了，然后按照文档进行配置就可以了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="SSL" scheme="https://www.iamlightsmile.com/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Python按需生成依赖文件</title>
    <link href="https://www.iamlightsmile.com/articles/Python%E6%8C%89%E9%9C%80%E7%94%9F%E6%88%90%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6/"/>
    <id>https://www.iamlightsmile.com/articles/Python%E6%8C%89%E9%9C%80%E7%94%9F%E6%88%90%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6/</id>
    <published>2020-06-23T02:10:52.000Z</published>
    <updated>2020-06-23T02:51:12.758Z</updated>
    
    <content type="html"><![CDATA[<p>如果使用常规的<code>pip freeze &gt; requirements.txt</code>，会将环境中的依赖包全部都导入，一般而言这不是我们想要的结果。我们可以用<code>pipreqs</code>库按需生成项目所需的依赖文件，使用方式如下：</p><a id="more"></a><pre><code class="lang-python"># 安装库pip install pipreqs# 在当前目录生成pipreqs . --encoding=utf8 --force# 安装requirements.txt依赖文件pip install -r requirements.txt</code></pre><blockquote><p>注意 <code>--encoding=utf8</code> 为使用utf8编码，不然可能会报UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xae in position 406: illegal multibyte sequence 的错误。<code>--force</code> 强制执行，当成目录下的<code>requirements.txt</code>存在时覆盖。</p></blockquote><p>如下图，便可轻松生成项目所需的requirements.txt文件了，只不过由于程序要在项目中一个文件一个文件去找，所以时间可能有点慢。。。</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/Python按需生成requirements文件" alt="Python按需生成requirements.txt文件格式"></p><p>参考：<a href="https://www.jb51.net/article/170248.htm" target="_blank" rel="noopener">python生成requirements.txt的两种方法_python_脚本之家</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果使用常规的&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;，会将环境中的依赖包全部都导入，一般而言这不是我们想要的结果。我们可以用&lt;code&gt;pipreqs&lt;/code&gt;库按需生成项目所需的依赖文件，使用方式如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.iamlightsmile.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://www.iamlightsmile.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>一道面试算法题（动态规划）</title>
    <link href="https://www.iamlightsmile.com/articles/%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
    <id>https://www.iamlightsmile.com/articles/%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</id>
    <published>2020-05-12T09:18:19.000Z</published>
    <updated>2020-05-12T09:59:19.651Z</updated>
    
    <content type="html"><![CDATA[<p>昨天参加了一场网上技术面试，通过腾讯会议平台。面试官问了两道算法题，都没答上来，-_-||。看来自己必须要高度重视算法基础，多刷多积累算法题了。</p><a id="more"></a><p>面试结束后，自己在网上搜索了第一道题目以及其解法，才恍然大悟原来这就是动态规划，下面是题目介绍：</p><blockquote><p>题目：将一个数组分成两部分，不要求两部分所包含的元素个数相等，要求使得这两个部分的和的差值最小。比如对于数组{1,0,1,7,2,4}，可以分成{1,0,1,2,4}和{7}，使得这两部分的差值最小。</p></blockquote><p>当时面试官是口述这道题，我的理解应该是得到这两个数组的具体内容，而不仅仅是这其中的差值，而网上看到的解法基本上都是仅仅求得差值，所以自己在理解他人实现后增加了完整的代码，这里简单记录一下。同时激励自己多刷刷算法题呀！</p><pre><code class="lang-python">def solution(arr):    target = sum(arr) // 2    # 初始化动态规划二维矩阵    matrix = [[0]*(target+1) for i in range(len(arr)+1)]    # 求解主算法    for i in range(1, len(arr)+1):        for j in range(1, target+1):            if j &gt;= arr[i-1]:                matrix[i][j] = max(matrix[i-1][j], matrix[i-1][j-arr[i-1]] + arr[i-1])            else:                matrix[i][j] = matrix[i-1][j]    # 初始化两个数组    a = [] # 存储目标元素    b = [] # 存储其他元素    n = target    # 反向求解得到数组具体值    for m in range(len(arr), 0, -1):        if arr[m-1] &lt;= n and matrix[m-1][n] &lt; matrix[m-1][n-arr[m-1]] + arr[m-1]:            a.append(arr[m-1])            n -= arr[m-1]        else:            b.append(arr[m-1])    return matrix[-1][-1], a, barr = [1, 0, 1, 7, 2, 4]res = solution(arr)print(res)</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/25f4a183ede5" target="_blank" rel="noopener">0-1背包问题及Python代码实现 - 简书</a></li><li><a href="https://blog.csdn.net/Swartz2015/article/details/65939318" target="_blank" rel="noopener">将数组分成两部分，使得这两部分的和的差最小_C/C++_Swartz2015的专栏-CSDN博客</a></li><li><a href="https://www.cnblogs.com/ranjiewen/p/9085049.html" target="_blank" rel="noopener">数组分为两部分，使得其和相差最小 - ranjiewen - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/104104473" target="_blank" rel="noopener">把一个数组分为两部分使得其和相差最小 - 知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天参加了一场网上技术面试，通过腾讯会议平台。面试官问了两道算法题，都没答上来，-_-||。看来自己必须要高度重视算法基础，多刷多积累算法题了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="算法" scheme="https://www.iamlightsmile.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用CDN为网站提速</title>
    <link href="https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8CDN%E4%B8%BA%E7%BD%91%E7%AB%99%E6%8F%90%E9%80%9F/"/>
    <id>https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8CDN%E4%B8%BA%E7%BD%91%E7%AB%99%E6%8F%90%E9%80%9F/</id>
    <published>2020-05-02T12:14:01.000Z</published>
    <updated>2020-05-02T12:22:55.365Z</updated>
    
    <content type="html"><![CDATA[<p>由于要设置博客站点的图标，而ico文件不能直接拖到图床工具中上传，于是也参考学习了一下使用CDN的方式。</p><a id="more"></a><p>主要参考学习文章为：<a href="https://blog.csdn.net/qq_36759224/article/details/86936453" target="_blank" rel="noopener">免费CDN：jsDelivr+Github 使用方法_网络_TRHX’S BLOG-CSDN博客</a></p><p>其中步骤主要包括：</p><ul><li>新建Github项目</li><li>将资源放到项目中</li><li>发布release版本</li><li>通过超链访问</li></ul><p>重复之话此处不表，此处贴一下截图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1588422000920.png" alt="UTOOLS1588422000920.png"></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1588422038598.png" alt="UTOOLS1588422038598.png"></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1588422077100.png" alt="UTOOLS1588422077100.png"></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1588422124344.png" alt="UTOOLS1588422124344.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于要设置博客站点的图标，而ico文件不能直接拖到图床工具中上传，于是也参考学习了一下使用CDN的方式。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>记录原来的博客风格</title>
    <link href="https://www.iamlightsmile.com/articles/%E8%AE%B0%E5%BD%95%E5%8E%9F%E6%9D%A5%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A3%8E%E6%A0%BC/"/>
    <id>https://www.iamlightsmile.com/articles/%E8%AE%B0%E5%BD%95%E5%8E%9F%E6%9D%A5%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A3%8E%E6%A0%BC/</id>
    <published>2020-05-01T06:27:57.000Z</published>
    <updated>2020-05-01T06:39:39.764Z</updated>
    
    <content type="html"><![CDATA[<p>原来的博客用了很长时间的material-X的风格，可是最近突然觉得有些喧闹，并且雪花爆炸特效等挺消耗电脑，最终的浏览体验并不好，所以这里把那些效果去掉，现在用的是原作者在material-X基础上升级的Volantis主题。</p><p>然而在这里还是放两张截图，也算保存纪念一下吧。</p><a id="more"></a><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1588314775701.jpeg" alt="UTOOLS1588314775701.jpeg"></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1588314793231.jpeg" alt="UTOOLS1588314793231.jpeg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原来的博客用了很长时间的material-X的风格，可是最近突然觉得有些喧闹，并且雪花爆炸特效等挺消耗电脑，最终的浏览体验并不好，所以这里把那些效果去掉，现在用的是原作者在material-X基础上升级的Volantis主题。&lt;/p&gt;
&lt;p&gt;然而在这里还是放两张截图，也算保存纪念一下吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://www.iamlightsmile.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>C++常用数据结构操作示例</title>
    <link href="https://www.iamlightsmile.com/articles/C++%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B/"/>
    <id>https://www.iamlightsmile.com/articles/C++%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-05-01T01:45:31.000Z</published>
    <updated>2020-06-29T06:40:58.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>由于自己使用Python居多，对C++并不太熟悉，但是最近在刷算法题，所以这里简单整理总结一下C++常用数据结构的操作函数，以便方便查阅检索。</p><p><a id="more"></a>s</p><h2 id="1-C-标准库常用数据结构"><a href="#1-C-标准库常用数据结构" class="headerlink" title="1. C++标准库常用数据结构"></a>1. C++标准库常用数据结构</h2><p>常用数据结构如下：</p><ul><li>string</li><li>vector</li><li>list</li><li>queue和priority_queue</li><li>set</li><li>map</li><li>stack</li></ul><h2 id="2-常用数据结构操作示例"><a href="#2-常用数据结构操作示例" class="headerlink" title="2. 常用数据结构操作示例"></a>2. 常用数据结构操作示例</h2><h3 id="1-string"><a href="#1-string" class="headerlink" title="1. string"></a>1. string</h3><pre><code class="lang-c++">//header file : &lt;string&gt;//declarationstring s = &quot;hello world!&quot;;// visit by subscriptchar c = s[2];//lconst char cc = s.at(6);//w// get the length of the stringint length = s.length();//12int size = s.size();//12// the string is empty or notbool is_empty = s.empty();//0// concat stringsstring t = &quot;c++&quot;;s.append(t);//hello world!c++s += &quot;Python!&quot;;//hello world!c++Python!// get substringstring sub_str = s.substr(0, 5);//hello// find substringint pos = s.find(&quot;world&quot;);//6// insert operations.insert(0, &quot;Hi!&quot;);//Hi!hello world!c++Python!// compare operationstring other = &quot;NLP&quot;;bool cmp = other &lt; s;//0// visit element by iteratorfor (auto i: s) {    cout &lt;&lt; i &lt;&lt; endl;}</code></pre><h3 id="2-vector"><a href="#2-vector" class="headerlink" title="2. vector"></a>2. vector</h3><pre><code class="lang-c++">// header file :&lt;vector&gt;// declarationvector&lt;int&gt; vec {2, 3, 4}; //[2, 3, 4]// size of vectorint size = vec.size(); //3// the vector is empty or notbool is_empty = vec.empty(); // 0// visit by subscriptauto e = vec.at(2);//4int m = vec[1];//3cout &lt;&lt; e &lt;&lt; m &lt;&lt; endl;// append element at backvec.push_back(5); // [2, 3, 4, 5]// delete the last elementvec.pop_back();//[2, 3, 4]// insert an element by iteratorvec.insert(vec.begin(), 1); //[1, 2, 3, 4]// visit the first element and the last elementcout &lt;&lt; vec.front() &lt;&lt; vec.back() &lt;&lt; endl; // 14// visit by iteratorauto iter = vec.begin();while (iter != vec.end()) {    cout &lt;&lt; *iter &lt;&lt; endl;    iter += 1;}// delete element by iteratorauto item = vec.erase(vec.end() -2);cout &lt;&lt; *item &lt;&lt; endl;//4for (auto i: vec) {    cout &lt;&lt; i &lt;&lt; endl;}</code></pre><h3 id="3-queue"><a href="#3-queue" class="headerlink" title="3. queue"></a>3. queue</h3><pre><code class="lang-c++">// header file: &lt;queue&gt;//declaration, can&#39;t initiate with assignment statement.queue&lt;int&gt; que;// add element to the back of queuefor (int i = 0; i &lt; 3; i++) {    que.push(i);} //que: {0, 1, 2}// get the size of queueint size = que.size();//3// if the queue is empty or notbool is_empty = que.empty();//0// delete the element at the first positionque.pop();//que: {1, 2}// get the first elementauto first = que.front();//1// get the last elementauto last = que.back();//2cout &lt;&lt; first &lt;&lt; last &lt;&lt; endl;</code></pre><h3 id="4-map"><a href="#4-map" class="headerlink" title="4. map"></a>4. map</h3><pre><code class="lang-c++">//header file :&lt;map&gt;//declarationmap&lt;int, int&gt; m;//add element to mapfor (int i = 0; i &lt; 3; i++) {    m[i] = i + 2;}m.insert({5, 8});//visit the element by auto+forfor (auto i: m) {    printf(&quot;%d : %d\n&quot;, i.first, i.second);}//whether the map is empty or notbool is_empty = m.empty();//0//get the size of mapint size = m.size();//4// get the count of elementint count = m.count(2);//1// search item by keyauto item = m.find(count);printf(&quot;%d : %d\n&quot;, item-&gt;first, item-&gt;second);// if not find, the value would equal to map.end()auto ss = m.find(9);cout &lt;&lt; (ss == m.end()) &lt;&lt; endl;//1// get element by [] operatorint sk = m[10];//0 if the key not exists, then initcout &lt;&lt; sk &lt;&lt; endl;//0map&lt;string, string&gt; str_map;str_map.insert({&quot;hello&quot;, &quot;world&quot;});cout &lt;&lt; &quot;begin&quot; &lt;&lt; str_map[&quot;python&quot;] &lt;&lt; &quot;end&quot; &lt;&lt; endl;//beginend</code></pre><h3 id="5-set"><a href="#5-set" class="headerlink" title="5. set"></a>5. set</h3><pre><code class="lang-c++">// header file :&lt;set&gt;// declarationset&lt;int&gt; ss;// insert elementss.insert(3);// whether element is in the set or notbool is_in = ss.count(4);//0// get the size fo setint size = ss.size();//1// whether the set is empty or notbool is_empty = ss.empty();//0cout &lt;&lt; is_in &lt;&lt; size &lt;&lt; is_empty &lt;&lt; endl;</code></pre><h3 id="6-stack"><a href="#6-stack" class="headerlink" title="6. stack"></a>6. stack</h3><pre><code class="lang-c++">// header file: &lt;stack&gt;//declarationstack&lt;int&gt; stk;// insert elementstk.push(3);stk.push(4);// get the top elementint top = stk.top();//4// get the size of stackint size = stk.size();//2// out of the stack, no returnstk.pop();cout &lt;&lt; top &lt;&lt; size &lt;&lt; stk.top() &lt;&lt; endl;//423</code></pre><h3 id="7-list"><a href="#7-list" class="headerlink" title="7. list"></a>7. list</h3><pre><code class="lang-c++">//header file: &lt;list&gt;//declarationlist&lt;int&gt; lst;// add element at backlst.push_back(4);//{4}lst.push_back(5);//{4, 5}// add element at frontlst.push_front(3);//{3, 4, 5}for (auto i: lst) {    cout &lt;&lt; i &lt;&lt; endl;}// get the size of listint size = lst.size();//3// delete element, the iterator of list doesn&#39;t implement the + or - operator// since C++17, we can use advance(lst.begin(), 2) to get the iterator of specific position easilylst.erase(++lst.begin());//{3, 5}printf(&quot;front:%d, back:%d&quot;, lst.front(), lst.back());//front:3, back:5</code></pre><h3 id="8-priority-queue"><a href="#8-priority-queue" class="headerlink" title="8. priority_queue"></a>8. priority_queue</h3><p><code>priority_queue</code>并没有提供迭代器访问，只可以访问<code>top</code>元素。</p><pre><code class="lang-c++">//header file: &lt;queue&gt;//declarationpriority_queue&lt;int&gt; pq;// push data to pqfor (int i = 1; i &lt; 7; i++) {    pq.push(i);}// whether the pq is empty or notbool is_empty = pq.empty();//0// get the size of pqint size = pq.size();//6// get the top elementint top = pq.top();//6// remove the top elementpq.pop();cout &lt;&lt; pq.top() &lt;&lt; endl;//5</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/monkey_D_feilong/article/details/51778820" target="_blank" rel="noopener">c++string类的常用方法详解_c/c++_monkey_D_feilong的博客-CSDN博客</a></li><li><a href="https://www.jianshu.com/p/033b78422bac" target="_blank" rel="noopener">C++ vector容器用法 - 简书</a></li><li><a href="https://www.jianshu.com/p/4fb9a458f558" target="_blank" rel="noopener">c++ queue的使用 - 简书</a></li><li><a href="https://www.jianshu.com/p/ec0d684453eb" target="_blank" rel="noopener">c++ map set 详解 - 简书</a></li><li><a href="https://www.jianshu.com/p/8730953af4f9" target="_blank" rel="noopener">C++ stack 使用 - 简书</a></li><li><a href="https://www.jianshu.com/p/c750715abedc" target="_blank" rel="noopener">C++ STL std::list的使用 - 简书</a></li><li><a href="https://www.jianshu.com/p/b95d8972466a" target="_blank" rel="noopener">STL之list和vector - 简书</a></li><li><a href="https://www.jianshu.com/p/65fdd3099238" target="_blank" rel="noopener">C++ STL 之 priority_queue 与堆 - 简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;p&gt;由于自己使用Python居多，对C++并不太熟悉，但是最近在刷算法题，所以这里简单整理总结一下C++常用数据结构的操作函数，以便方便查阅检索。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从多人运动说起</title>
    <link href="https://www.iamlightsmile.com/articles/%E4%BB%8E%E5%A4%9A%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%AF%B4%E8%B5%B7/"/>
    <id>https://www.iamlightsmile.com/articles/%E4%BB%8E%E5%A4%9A%E4%BA%BA%E8%BF%90%E5%8A%A8%E8%AF%B4%E8%B5%B7/</id>
    <published>2020-04-25T16:53:09.000Z</published>
    <updated>2020-04-25T16:59:32.330Z</updated>
    
    <content type="html"><![CDATA[<p>近日罗志祥和其前女友分手之事成了热点事件，大批吃瓜群众纷纷表示涌入。</p><p>周扬青肯定是作为一个受害者，但是罗志祥是否真的应当受千夫所指、受众人口诛笔伐吗？</p><p>需要声明的是，我对这起事件并不有多少了解，所以并不会妄加推断。既不会作为一个给罗志祥洗白的写手，也不会做一个维护周扬青的看客，而是更多的从自认为的更客观更理性的角度来去分析一下这件事情。</p><a id="more"></a><ol><li><p>保持不正当男女关系的艺人在娱乐圈或并不少见，普通群众看到的仅仅只是一起起被曝出的案例而已，同样比如说：吴亦凡。</p></li><li><p>许多人包括明星在内，当满足：</p><ol><li>自己或配偶经常出门在外且在外时间多达几周几月的</li><li>自己有一定的金钱、权势，且由于工作性质，偶尔或经常会遇到一些姿色还不错的异性或者异性下属</li><li>自己外貌形象俱佳，颇受异性欢迎爱慕</li><li><p>等等</p><p>如何在不违法也不违背良心的前提下不断满足自己的情感需求和性需求，尤其是在上面的易导致出轨的环境土壤中。</p></li></ol></li><li><p>那些和罗某、吴某上床的女孩子们是否也认为自己上当受骗？可能有不少天真的女孩子会期盼自己也能够有一份灰姑娘的爱情，她们的白马王子年轻有为、身材修挺、貌美肤白、有情有义、感情专一、甜言蜜语只哄自己，而自己则蒙上天眷顾，是最幸运的人。有一个这样的梦很正常，本是无可非议，然而现实是：这样般配吗？自己配得上他吗？虽然两情相悦固然重要，但是门当户对才是关键之处，这里的门户并不单纯指物质上的财富地位等。同时社会中，往往越上面的人，看的越现实。如果只觉得自己尽职尽责，做了应该做的，便会得到所期望的应有的回报，那只是把现实看得太简单了。所以如梦幻泡影，终究有破碎的那一天。更现实的是，往往有许多人并不把出轨和乱搞男女关系视为违背良心的不该做之事，他们只是你情我愿，若你不是当事人或相关者，那与你何干？更更现实的是，这样做真的有错吗，或者说违法吗？</p></li><li><p>在不涉及自身利益的情况下，我们大多数人作为吃瓜群众的思维习惯往往是为弱者发声。指出这一现象并不是在否定这种做法，而是说“弱”者也未必永远都是“善”的一方，而“强”者也未必永远都是“恶”的一方，比如说：老人碰瓷。</p></li><li><p>许多时候当我们对某些热点事件做出自己的反馈时，往往得到的信息并不全面，当我们得到部分信息之后，我们常常直接结合已有的先验知识得到先入为主的主观且偏见的推论判断，而这种推论判断也并不意味着总是不够合理，还是要更具体的辩证地来看待。</p></li><li><p>我们知道每个人都是复杂的多面的生物，我们看到的往往只是几面而已，看到的好与坏都是个体的真实的一部分。如果单纯地仅由片面的看到的好与坏而武断的得出这个人整体如何是有失偏颇而不够合理的。</p></li></ol><p>作为一个素来秉持雨我无瓜的普通民众而言，更多的还是惊叹且佩服于罗志祥的时间管理以及精力分配上的天赋和能力。</p><p>而从这个娱乐圈事件延伸开来，简单谈一下自己相对于娱乐圈的某些看法。</p><ul><li><p>如今是一个全民娱乐、遍地流量的时代。不客观的来说，我觉得周某某出狱引来不少网红公司高价聘用事件是对这个社会相当大的讽刺！</p></li><li><p>记得在刚上大学开始用智能机，开始使用微信和微博后，经过一段时间我发现微信客户端所推送的腾讯新闻和以及微博客户端所推送的新浪新闻中娱乐相关的新闻的比重也忒大了些，而其中实事或社会热点相关新闻的占比并不算太大，并且部分新闻用语措辞也不够专业，关键的还不是掺杂了主观的评论观点，而是某些评论观点甚至于说比较偏颇，带有负面的消极的唯金钱论的感情色彩。接触久了实在令我感到反感，所以就把这两个默认的资讯通道全都取关，而令我感到有些震惊害怕的是这两个平台承载的中国上亿的普通用户每天生活在这种潜移默化的影响之下会受到多少认知倾向价值观方面等的影响，尤其是其中一些文化程度较低的、世界观价值观并不太客观完善的用户以及那些正在成长中的三观未全的中小学生们。从这个角度出发，我认为某种程度上现在整个社会普通民众的接收大众信息的渠道正在被娱乐媒体、资本势力等所把持着，而关键是这些渠道所发出的声音更代表、更符合哪些利益团体的利益，究竟是姓“社”还是姓“资”。</p></li><li><p>前一段时间肖战事件闹得沸沸扬扬，就连最近甚至也还有一些余波。每个粉丝喜欢ta的偶像自然有ta的道理，但是表达喜欢和支持的方式应该是尽量理性的。纵观整个事件，我觉得很有必要指出的是：那些以爱之名做出各种事件的粉丝的出发点大多都是为了自己心目中喜欢的明星，而那些针锋相对迎头反抗的原本八竿子都打不着的井水不犯河水的众人们大多其实也并不是反肖战，而是反那些粉丝，反那些粉丝不够理性的举动损害了他们的合法利益，虽然也不排除某些出于利益而别有用心的人在里面发弹药搅浑水的可能性。所以说，很大程度上肖战粉丝所不愿意看到的现在的情形其实是由她们亲手造成的。</p></li><li><p>我们可能对演员太苛刻，而对网红太宽容。还记得被封杀的以前比较喜欢的演员黄海波，对比现在闹出各种丑闻息影一段时间便可轻松复出的明星，我觉得这就是一种不公平。再如范冰冰等明星的天价片酬对比许多科技国企基层人员微薄的薪水、以及原来的小孩子的理想大多是当一名科学家对比现在的许多小孩子们都想着成为一名主播网红明星等，不得不说这种现象背后的社会风气问题很严重，虽说片酬薪水是由市场所决定的，但是市场也是受资本所操控影响的。</p></li><li><p>在如今的社会时代，似乎追求物质、浮躁之风较之以往更浓，某种程度上那些资本也要来承担一部分责任。但是话说回来，如今的这个局面，社会整体、普通民众、资本团体乃至国家相互复杂钩织在一起，谁都脱不开关系。就比如说，我认为现在社会中许多有关中小学生的负面热点事件都脱离不开应试教育四字的原因。某种程度上，正是这种应试教育所导致的社会和家长压迫学生正常心身发展、只使其一心关注考试科目知识成绩，而缺乏对孩子的身心健康教育，也不尊重和注重培养孩子的意愿兴趣，使其并未能建立起更好的三观而误行错事，。其中既有家长的失职，学校的管理方式不当，也有整个社会的风气所致。俗话说，宜疏不宜堵，不能正常身心发展的孩子们只能将更多的好奇心和精力放到日常生活中更容易接触到的新闻和媒体中，比如量贩的小生明星、全民娱乐的吃鸡农药等等。</p></li><li><p>记得前不久有一个B站UP主被吸血很惨的事情，跟着热点了解了一下什么叫做MCN机构。说实话，在我看来。某些签约的UP主和不少签约的演员明星一样，某种程度上都是其签约公司和机构的一根根的细化的资本触手，不断地引诱、吸取着大众的注意力和手中的钱包，一如《倩女幽魂》中的众女妖和操控她们吸食男人精魄的千年树妖，虽然也可以将它们之间的关系视为互相成就、互利共生的关系。当然这样说或许并不恰当，因为许多明星或UP主的作品确实是受大众喜爱的，以及人们能够从他们创作的作品中打发时光、收获快乐、汲取营养等。从这个角度来看，那么这些明星和UP主和关注支持他们的粉丝之间也构成一种互利共生的关系。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日罗志祥和其前女友分手之事成了热点事件，大批吃瓜群众纷纷表示涌入。&lt;/p&gt;
&lt;p&gt;周扬青肯定是作为一个受害者，但是罗志祥是否真的应当受千夫所指、受众人口诛笔伐吗？&lt;/p&gt;
&lt;p&gt;需要声明的是，我对这起事件并不有多少了解，所以并不会妄加推断。既不会作为一个给罗志祥洗白的写手，也不会做一个维护周扬青的看客，而是更多的从自认为的更客观更理性的角度来去分析一下这件事情。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随念" scheme="https://www.iamlightsmile.com/categories/%E9%9A%8F%E5%BF%B5/"/>
    
    
      <category term="杂谈" scheme="https://www.iamlightsmile.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>使用Brook科学上网教程</title>
    <link href="https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8Brook%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"/>
    <id>https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8Brook%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-07T13:40:51.000Z</published>
    <updated>2020-04-25T01:26:46.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-更新"><a href="#0-更新" class="headerlink" title="0.更新"></a>0.更新</h2><p>IP又被封了，难受。</p><hr><p>Brook协议也不能用了，估计是这个协议也不能翻墙了。理由如：代理服务器还可以访问没有被墙、并且其他协议比如ss也不行了，憋了两天受不了了搞了V2ray可以了。哎，真香。</p><hr><p>之前自己使用搬瓦工+SSR一键搭建脚本或者借助同学的vpn以实现科学上网，然而前两天突然同学的也出了问题。后在Github中大浪淘沙，终于寻觅到了一个很全面的科学上网教程：<a href="https://github.com/Alvin9999/new-pac" target="_blank" rel="noopener">Alvin9999/new-pac: 科学上网/自由上网/翻墙/软件/方法，免费shadowsocks/ss/ssr/v2ray/goflyway账号，vps一键搭建脚本/教程</a>。如今相对而言，SS、SSR那一套技术相对落后，并且使用范围与流传时间比较广，所以导致更加容易被墙。后有v2ray和brook技术，相对更先进小众，所以暂时比较安全。这里拾人牙慧，简单说一下配置流程。</p><a id="more"></a><h2 id="1-Brook简介"><a href="#1-Brook简介" class="headerlink" title="1.Brook简介"></a>1.Brook简介</h2><p>Brook是一款新兴的代理软件，其版本横垮Windows、安卓、iOS、MacOS、Linux等多个系统平台，功能类似于我们经常使用的Shadowsocks/ShadowsocksR。Brook 的目标是简单易用、傻瓜化、速度快（新协议）。通过在服务器端安装Brook服务器端，同时在本地设备中使用Brook客户端，两者成功连接之后，可以为我们提供科学上网服务。如果你想在SS/SSR/V2ray之外，尝试一种新的代理软件，那么Brook是一个不错的选择！</p><h2 id="2-在服务器安装Brook"><a href="#2-在服务器安装Brook" class="headerlink" title="2.在服务器安装Brook"></a>2.在服务器安装Brook</h2><p>购买国外服务器之类略去不表。</p><p>在服务端执行如下命令：</p><pre><code class="lang-bash">wget -N --no-check-certificate wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.shchmod +x brook.sh./brook.sh</code></pre><p>然后根据提示安装，其中端口视自己情况设置（如无特殊或小白不懂，只需默认回车即可），密码可以自己设置也可以选择默认。如果一切顺利，则最终有类似如下输出：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1586267778518.png" alt="UTOOLS1586267778518.png"></p><p>在参考的教程中，有一步<code>一键加速VPS服务器</code>，不过我试了一下，发现系统好像已经默认安装了？所以这里就不再叙述这一步了。</p><h2 id="3-在客户端安装Brook"><a href="#3-在客户端安装Brook" class="headerlink" title="3.在客户端安装Brook"></a>3.在客户端安装Brook</h2><p>下面以Windows为例：</p><p>从<a href="https://github.com/txthinking/brook/releases" target="_blank" rel="noopener">Releases · txthinking/brook</a>中找到对应自己平台的客户端安装文件，包括Linux、Mac、Windows、Android等等。</p><p>作者（应该是作者的作品）为Windows系统写了一个配套的GUI辅助工具<a href="http://108.61.224.82/lib5/Brook%20Tools%20v1.0.8.zip" target="_blank" rel="noopener"><code>Brook Tools</code></a>，需要配合<a href="https://github.com/txthinking/brook/releases/download/v20200201/brook_windows_amd64.exe" target="_blank" rel="noopener"><code>Brook Windows命令行版客户端</code></a>使用。</p><p>在按照教程下载了客户端文件和压缩文件后，进行解压缩操作，并打开软件，填写服务器代理相关信息，设置代理方式即可。</p><p>设置完成后，如下图所示：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1586268511320.png" alt="UTOOLS1586268511320.png"></p><p>自己同时也试了下Android的Apk，发现试了几次无法正常运行，报<code>PlantformException</code>之类的，不过刚才试了一下发现终于也成功了！</p><p>如下图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1586268868937.png" alt="UTOOLS1586268868937.png"></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/UTOOLS1586268914363.png" alt="UTOOLS1586268914363.png"></p><p>然后便又可以轻松愉快的上网啦！</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4.参考"></a>4.参考</h2><ol><li><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAbrook%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">自建brook服务器教程 · Alvin9999/new-pac Wiki</a></li><li><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAv2ray%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">自建v2ray服务器教程 · Alvin9999/new-pac Wiki</a></li><li><a href="https://github.com/Alvin9999/new-pac/wiki/v2ray%E5%90%84%E5%B9%B3%E5%8F%B0%E5%9B%BE%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">v2ray各平台图文使用教程 · Alvin9999/new-pac Wiki</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-更新&quot;&gt;&lt;a href=&quot;#0-更新&quot; class=&quot;headerlink&quot; title=&quot;0.更新&quot;&gt;&lt;/a&gt;0.更新&lt;/h2&gt;&lt;p&gt;IP又被封了，难受。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Brook协议也不能用了，估计是这个协议也不能翻墙了。理由如：代理服务器还可以访问没有被墙、并且其他协议比如ss也不行了，憋了两天受不了了搞了V2ray可以了。哎，真香。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;之前自己使用搬瓦工+SSR一键搭建脚本或者借助同学的vpn以实现科学上网，然而前两天突然同学的也出了问题。后在Github中大浪淘沙，终于寻觅到了一个很全面的科学上网教程：&lt;a href=&quot;https://github.com/Alvin9999/new-pac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alvin9999/new-pac: 科学上网/自由上网/翻墙/软件/方法，免费shadowsocks/ss/ssr/v2ray/goflyway账号，vps一键搭建脚本/教程&lt;/a&gt;。如今相对而言，SS、SSR那一套技术相对落后，并且使用范围与流传时间比较广，所以导致更加容易被墙。后有v2ray和brook技术，相对更先进小众，所以暂时比较安全。这里拾人牙慧，简单说一下配置流程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="科学上网" scheme="https://www.iamlightsmile.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈新冠疫情</title>
    <link href="https://www.iamlightsmile.com/articles/%E6%B5%85%E8%B0%88%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85/"/>
    <id>https://www.iamlightsmile.com/articles/%E6%B5%85%E8%B0%88%E6%96%B0%E5%86%A0%E7%96%AB%E6%83%85/</id>
    <published>2020-03-28T07:03:31.000Z</published>
    <updated>2020-03-30T08:31:49.090Z</updated>
    
    <content type="html"><![CDATA[<p>新型冠状病毒自初始传播到现在已经几个月的时间过去了，期间发生了林林总总的事情，自己略有所感，这里简单谈一下。主要从以下几个方面进行：</p><ol><li>暴露了我国的哪些问题</li><li>对国家和个人的影响</li><li>农村是怎么做的</li><li>从疫情出发谈政治体制与自由民主</li><li>从疫情出发谈中国舆论环境</li></ol><a id="more"></a><h2 id="1-暴露了我国的那些问题"><a href="#1-暴露了我国的那些问题" class="headerlink" title="1.暴露了我国的那些问题"></a>1.暴露了我国的那些问题</h2><p>在应对本次疫情过程中，值得肯定的是我国党中央在充分了解此次疫情情况后做出了十分理智正确的决策，以壮士断腕的手段快速制定实施了区域隔离等政策，虽然这将给国家和许多企业个人带来不小的经济损失，但从长远来看，是正确无比的。同时其他各省医护人员驰援湖北武汉，国外不少国家地区也都捐赠了不少物资，海内外华人华侨也纷纷开展口罩医疗设备购买活动，各尽其力帮助武汉，真是令人感动不已，从某种程度上体现了我们中华民族团结一心、互帮互助的优良品质。</p><p>然而不可否认的是在本次疫情应对防范过程中，还是存在着不少问题。比如部分政府官员能力不足、敷衍了事，更有甚者逃之夭夭在国外避难；同时湖北红十字会在接收物资并转发物资的过程中的表现实在是无法让全国人民满意甚至寒心。郭美美事件记忆犹新，在本次疫情过程中，倒是有不少尸位素餐、德不配位者暴露了出来。然而在太平盛世这些害群之马或可偷鸡摸狗，以权谋私。但是也有许多实干之辈显露出来表现卓越，值得国家栽培委任。</p><h2 id="2-对国家和个人的影响"><a href="#2-对国家和个人的影响" class="headerlink" title="2.对国家和个人的影响"></a>2.对国家和个人的影响</h2><p>从国家角度出发，此次疫情既是机遇也是挑战。</p><p>诚然，此次疫情会给国家社会带来较大的经济损失，但是并未伤及根本；相反，我国在本次抗击疫情过程中透明公开进展数据的做法以及制定的一系列防御措施以及最终的防御效果都是值得国际社会称赞的。想必经过此次事件，我国更能树立起一个友好互助负责任的大国形象，和英美之辈形成鲜明对比。但是也有不少国家将这次疫情都怪罪到中国头上，加上媒体的大肆渲染，许多网民或对我国有更多的抵触仇恨情绪。</p><p>患难显真情，经过本次疫情，我们也可以看出哪些国家是真正的友邻之邦，哪些国家可以做可靠的朋友，哪些国家表里不一，对中国有明显的敌视偏见。</p><p>于个人而言，一方面使得许多人的工作生活受到影响。不小中小企业面临着不小的生存压力，但是对于许多人来说，这确实是一个难得的阖家团圆的好机会。就只能宅在家里，每天家人都能陪伴在一起。比如我，呆在家里两个月，竟然涨了10斤多，脸上和肚子上明显都有肉了。</p><h2 id="3-农村是怎么做的"><a href="#3-农村是怎么做的" class="headerlink" title="3.农村是怎么做的"></a>3.农村是怎么做的</h2><p>在疫情刚开始的时候，我也以为最多只是武汉局部的小规模疫情。等到疫情逐步扩散，并且其人传人的能力十分强悍的时候，我也意识到了此次疫情的严重性。所以经常和家里人说尽量少出去。后来县乡村逐渐也都开始隔离政策，禁止各村之间不必要人员流通。但不得不说的是，其实在农村内部，这种走街串巷的事情还是很难避免。大部分人都无法意识到此次疫情的严重性，尤其是40岁以上的他们基本上没有上过大学，上过高中的也只是少数，由于缺乏科学认识，更多的还是依照他们长久以来建立的一套根深蒂固的思维模式去思考，即没有可怕的事情发生在他们身边周围，他们是不会感到恐惧的，所以不少人还是喜欢串门，聚堆闲聊，带着一种麻木和自信。庆幸的是，由于国家的管控力度比较到位，所以中国的大部分农村省份还是比较安全，许多县市这几个月来一例都没有。</p><h2 id="4-从疫情出发谈政治体制与自由民主"><a href="#4-从疫情出发谈政治体制与自由民主" class="headerlink" title="4.从疫情出发谈政治体制与自由民主"></a>4.从疫情出发谈政治体制与自由民主</h2><p>其实我不应该谈这些比较敏感的事情，但是还是想简单的聊一聊。在强大的病毒面前，那些欧美国家人民所高举的自由民主的大旗非但不能起到抵抗作用，反而某种程度上起到了推波助澜的效果。由于政府对国家各层级的掌控力度实在不够，导致无法指定强有力的隔离政策并在各区域推行实施；同时，许多国家都对这场疫情没有引起足够的重视，认为大肆在China流行的病毒无论如何都不太传播至他们的温柔之邦，何况较早的就已经实施禁止中国人入境的政策了；待疫情小规模在其国内传播时，可能是各媒体没有尽到该尽的责任，一如特朗普总统一般对其不屑一顾，认为该病毒大约只等同于流感，只是中国粗鄙之邦发展中国家人口又多医疗条件又差罢了，其傲慢与偏见之程度更甚于我国个别农村；待政府制定相关政策后，还是有些人认为隔离此举有悖人理，等同监禁，一点也不符合德先生和赛先生的教义。</p><p>话说回来，这也不能说明我国的中国共产党领导下的具有中国特色的社会主义体制就优于欧美的资本主义下的各联邦制、民主制、君主立宪制等，只能说一方水土养一方人民，我们只能在更加具体的条件下的事件中，去谈某些相对的优劣。否则脱离实际谈理论，更甚于脱了裤子放屁。</p><h2 id="5-从疫情出发谈中国舆论环境"><a href="#5-从疫情出发谈中国舆论环境" class="headerlink" title="5.从疫情出发谈中国舆论环境"></a>5.从疫情出发谈中国舆论环境</h2><p>或许还是我的采集样本不够客观全面而言，所以这里大多都是自己的一面之词。</p><p>以B站为例，我总觉得其中的许多自媒体视频及其相关评论都不太客观，有着比较强烈的政治色彩和很主观偏见的看法。诚然，在我国许多媒体的熏陶之下，许多人都对于那些欧美国家尤其是美国都有着比较强的敌视情绪，大家都口呼特朗普总统建国同志，身负卧底大业，一心只图中华复兴。我认为许多时候类似这种事情做媒体的还是要适可而止，不然会将很多人不同程度的洗脑，形成比较主观的偏见，虽然于国家社会而言，短期来看不见得是坏事；但是于民族振兴、人才培养的角度考虑的话，或许此举并不甚高明。</p><h2 id="6-后记"><a href="#6-后记" class="headerlink" title="6.后记"></a>6.后记</h2><p>以上的内容许多都是浅尝辄止，随意寥寥几句，以后或有补充，或有更改删减。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新型冠状病毒自初始传播到现在已经几个月的时间过去了，期间发生了林林总总的事情，自己略有所感，这里简单谈一下。主要从以下几个方面进行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;暴露了我国的哪些问题&lt;/li&gt;
&lt;li&gt;对国家和个人的影响&lt;/li&gt;
&lt;li&gt;农村是怎么做的&lt;/li&gt;
&lt;li&gt;从疫情出发谈政治体制与自由民主&lt;/li&gt;
&lt;li&gt;从疫情出发谈中国舆论环境&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="随念" scheme="https://www.iamlightsmile.com/categories/%E9%9A%8F%E5%BF%B5/"/>
    
    
      <category term="随念" scheme="https://www.iamlightsmile.com/tags/%E9%9A%8F%E5%BF%B5/"/>
    
  </entry>
  
</feed>
