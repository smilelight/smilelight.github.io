<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lightsmile&#39;s Blog</title>
  
  <subtitle>lightsmile</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iamlightsmile.com/"/>
  <updated>2019-04-22T08:33:36.562Z</updated>
  <id>http://www.iamlightsmile.com/</id>
  
  <author>
    <name>lightsmile</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何理解WordEmbedding？</title>
    <link href="http://www.iamlightsmile.com/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3WordEmbedding%EF%BC%9F/"/>
    <id>http://www.iamlightsmile.com/如何理解WordEmbedding？/</id>
    <published>2019-04-22T08:15:12.000Z</published>
    <updated>2019-04-22T08:33:36.562Z</updated>
    
    <content type="html"><![CDATA[<p>之前自己也是懵懵懂懂的不太理解，经过一段时间的学习和思考，感觉自己有了新的认识，所以在这里分享一下，也算自己的总结了。</p><p>不谈数学原理，我认为理解Word Embedding可以从以下3个角度来理解。</p><a id="more"></a><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>《深度学习》一书中有以下几句话，略有小改：</p><blockquote><ul><li>简单的机器学习算法的性能在很大程度上依赖于给定数据的表示。</li><li>使用机器学习来发掘表示本身的方法即表示学习。</li><li>从原始数据中提取高层次、抽象的特征是非常困难的。</li><li>深度学习通过其他较简单的表示来表达复杂表示。</li><li>我们可以认为不同数学函数的每一次应用都为输入提供了新的表示。</li><li>分布式表示的思想是系统的每一个输入都应该由多个特征表示，并且每一个特征都应该参与到多个可能输入的表示。</li><li>联结主义的中心思想是当网络把大量简单的计算单元连接在一起时可以实现智能行为。</li><li>万能近似定理表明，神经网络可以近似从任何有限离散空间映射到另一个的任意函数。</li></ul></blockquote><p>其实我认为深度学习的应用核心就是上面几句话。</p><p>接下来我拿传统的确定性算法、机器学习和深度学习做一个简单的对比。</p><p>原来对于一些流程比较清晰简单的任务，我们的做法是编写确定性的算法来实现，而对于那些很复杂的，难以用简单的规则去说明的任务通常束手无策。</p><p>机器学习的作用则是直接从数据中去学习，总结规律，但通常我们要花费大量的精力在特征工程上面，同时对于许多任务来说，我们很难知道应该提取哪些特征。<br>而深度学习则表示：特征不用你们整，只要你们给的数据足够好，我保证给你们一个更好的模型。</p><p>上面这句话的意思是，原来特征工程的累活我们不用做了，深度学习可以自己学到好的特征，同时万能近似定理也确保了深度神经网络可以保证模型学习效果的上限很高，当前前提是我们给的数据比较好。</p><p>以上交代了下背景，接下来言归正传。</p><p>自然语言要作为神经网络模型的输入之前，我们首先需要将其映射为计算机可以表示的形式。</p><p>独热编码最简单，将每一个字或者词都唯一编码成了01向量，除了维度灾难，我认为最大的缺点就是在这一映射过程中丢掉了许多词或者字的词义和语义特征，除了表示唯一以外，不包含任意其它信息。</p><p>这时我们应该思考：那什么样的表示才算好的表示？表示中应该保留哪些特征又如何保留这些特征呢？</p><p>怀着对上面问题的疑问，我们来看一下他山之石。</p><h2 id="2-卷积神经网络的工作原理"><a href="#2-卷积神经网络的工作原理" class="headerlink" title="2.卷积神经网络的工作原理"></a>2.卷积神经网络的工作原理</h2><p>我们都知道卷积神经网络中最主要的部分：卷积层、池化层、激活层的作用就是提取和匹配局部特征，将特征提取结果作为全连接层的输入从而得到最终的输出。</p><p>其中的每一个卷积核都可以被视为一个特征过滤器，卷积神经网络通过依次的扫描输入并进行卷积运算提取得到哪些位置可能包含哪些特征的信息，随后这些特征位置信息被进一步的提取从而得到更高级、更抽象的特征。</p><p>举个例子，如在识别图片中是否包含人时，卷积神经网络大致的作用原理如首先提取出某些位置是否是横线、竖线还是斜线以及颜色等特征，然后对这些特征进一步组合以得到哪些位置是否包含人脸、上肢、下肢等特征，通过提取到的这些特征，神经网络就可以做出决策得到图片中是否包含人的结果。</p><p>通过了解卷积神经网络的工作原理，我们可以知道卷积神经网络的最大作用就是可以自动学习并提取局部特征。对于计算机视觉中的图片而言，最微小的组成单元是一个个的像素点，然后局部组合就得到了线条和颜色块等信息特征；而对于自然语言处理而言，最小的组成单元则是一个个的字符，如英文中的‘a’、汉字中的‘我’等。</p><p>许多计算机视觉的预训练模型都是通用的，对于具体任务，我们只需要finetune（精调）或者只学习后面的层就可以了。这其中的原理是学到的模型提取特征的能力是可复用的，不依赖于某一具体任务。同样的，如果我们可以从语料中学到词或者字的词义和语义特征就好了，之后可以直接作为词或者字的表示用于模型训练和预测，这就是词的预训练。两者有异曲同工之妙。</p><h2 id="3-Harris提出的分布式假说及Firth对此的阐述和论证"><a href="#3-Harris提出的分布式假说及Firth对此的阐述和论证" class="headerlink" title="3.Harris提出的分布式假说及Firth对此的阐述和论证"></a>3.Harris提出的分布式假说及Firth对此的阐述和论证</h2><p>Harris曾于1954年提出分布式假说：“上下文相似的词，其语义也相似”，后来又经过Firth对该假说进行阐述和论证，“词的语义由其上下文确定”。基于该思想，我们可以从该词在语料中的上下文学习得到该词的语义，同时也可以得到相同上下文下不同的词之间的联系。</p><p>结合上文提到的分布式表示的思想，我们可以想到：我们可以用某个词以及该词所指代的实体所具备的属性和特征来表示该词。</p><p>再举个不恰当例子：</p><p>如何表示“程序猿”和“单身狗”这两个词呢？假设我们有以下特征向量序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="string">"有头发"</span>,</span><br><span class="line"><span class="string">"人傻"</span>,</span><br><span class="line"><span class="string">"钱多"</span>,</span><br><span class="line"><span class="string">"死得快"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们可以设定:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">程序猿 = [<span class="number">0.3</span>, <span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>]</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">同样的，我们可以设定：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">单身狗 = [<span class="number">0.6</span>, <span class="number">0.7</span>, <span class="number">0.3</span>, <span class="number">0.5</span>]</span><br></pre></td></tr></table></figure><p>基于此，我们便得到了“程序猿”和“单身狗”的语义相似度为：</p><script type="math/tex; mode=display">\sqrt{( 1 - \left| 0.3 - 0.6 \right|)^2 +( 1 - \left| 0.6 - 0.7 \right|)^2 + ( 1 - \left| 0.6 - 0.3 \right|)^2 + ( 1 - \left| 0.6 - 0.5 \right|)^2} = 0.72</script><p>从中我们可以得到“程序猿”和“单身狗”这两个词还是挺接近的。</p><p>注意：以上具体数值和计算公式是自己瞎掰的。</p><p>具体到属性特征有哪些以及具体每个词的分量数值应该是多少，这个神经网络是可以自己去学的，只不过学到的可以被视为潜在语义信息，并不是直观的”有头发”, “人傻”, “钱多”, “死得快”等特征，通常都是不可解释的。</p><p>总之，通过类似以上的方式，单词的语义信息就被比较有效的编码和表示起来了。<br>这时我们再回顾一下之前的Word2Vec和最近非常火的BERT，则可以被视为以上思想的工程实践。只不过训练方式和优化目标愈加完善，使得词表示可以包含更多更好的语义表示罢了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>机器学习也好，深度学习也罢，其任务目标都是想要学习现实世界中某些量与某些量之间的映射变化关系。只不过有的关系是线性的，比较简单，而有的则极其复杂。对于这些复杂的问题，才是深度学习的用武之地。</p><p>许多任务都可以被看作是回归或分类问题，正如老子云：“天下皆知美之为美，斯恶已。”，美丑两端即定义一个维度。</p><p>对于神经网络的理解，也可以从还原论的哲学思想来入手。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#sphx-glr-beginner-nlp-word-embeddings-tutorial-py" target="_blank" rel="noopener">Word Embeddings: Encoding Lexical Semantics</a></li><li><a href="https://www.jianshu.com/p/fe428f0b32c1" target="_blank" rel="noopener">[透析]卷积神经网络CNN究竟是怎样一步一步工作的？</a></li><li><a href="https://www.jianshu.com/p/471d9bfbd72f" target="_blank" rel="noopener">通俗理解word2vec</a></li><li><a href="https://www.jianshu.com/p/7bdbc1395406" target="_blank" rel="noopener">自然语言处理—-文本表示</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前自己也是懵懵懂懂的不太理解，经过一段时间的学习和思考，感觉自己有了新的认识，所以在这里分享一下，也算自己的总结了。&lt;/p&gt;
&lt;p&gt;不谈数学原理，我认为理解Word Embedding可以从以下3个角度来理解。&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://www.iamlightsmile.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="NLP" scheme="http://www.iamlightsmile.com/tags/NLP/"/>
    
      <category term="深度学习" scheme="http://www.iamlightsmile.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>大学数学与深度学习</title>
    <link href="http://www.iamlightsmile.com/%E5%A4%A7%E5%AD%A6%E6%95%B0%E5%AD%A6%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.iamlightsmile.com/大学数学与深度学习/</id>
    <published>2019-04-22T07:45:42.000Z</published>
    <updated>2019-04-22T08:31:34.082Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道，世间的万事万物都是彼此联系和不断发展的。而我们要生存发展进步，则要不断地去尝试探索理解彼此之间到底是如何联系和发展的，要得到那些定性和定量的规律，哲学和数学以及其他学问在此基础上产生不断进化繁衍。</p><p>而事物与事物之间的关联法则与映射关系即对应于数学中函数这一概念，函数即是定义和研究自变量和因变量之间的映射关系的。</p><a id="more"></a><p>事物之间的联系有简单线性的，也有复杂非线性的，对于简单线性的，古人们通过初等数学等知识即可求解，而复杂非线性的则常常无能为力。</p><p>而微积分，作为复杂函数计算的有力工具，使得我们可以解决原本无法使用初等数学知识无法解决的问题，进而极大地推动了科学的发展和技术的进步。</p><p>然而尽管如此，许多现实中的复杂问题即使是微积分也无能为力，因为我们甚至无法得到其可以用数学公式表达的形式，同时数学作为研究数与形的学问也并非能解决所有问题。</p><p>虽然不能直捣黄龙，理解许多世界中的本质规律，但是我们可以通过抽象近似和归纳统计等方式另觅它径，以达曲径通幽之妙。</p><ul><li>如通过“以直代曲”的核心思想，我们可以把许多非线性问题近似看作线性问题，从而使用线性代数来研究其规律。</li><li>同时我们也可以使用统计学和概率学知识不去细微探索直接探究其本质关联规律，而是在基于统计的基础上跳出局部站在比较宏观的角度建立起现象与现象之间的数学关系，从而得到表层的统计规律。</li><li>再如最近很火的神经网络、深度学习等，其本质则是用含有大量参数的神经网络模型不断地优化更新参数，来去尽可能地拟合变量之间的对应关系。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道，世间的万事万物都是彼此联系和不断发展的。而我们要生存发展进步，则要不断地去尝试探索理解彼此之间到底是如何联系和发展的，要得到那些定性和定量的规律，哲学和数学以及其他学问在此基础上产生不断进化繁衍。&lt;/p&gt;
&lt;p&gt;而事物与事物之间的关联法则与映射关系即对应于数学中函数这一概念，函数即是定义和研究自变量和因变量之间的映射关系的。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://www.iamlightsmile.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://www.iamlightsmile.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>数理统计学</title>
    <link href="http://www.iamlightsmile.com/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    <id>http://www.iamlightsmile.com/数理统计学/</id>
    <published>2019-04-22T07:28:33.000Z</published>
    <updated>2019-04-22T07:29:44.814Z</updated>
    
    <content type="html"><![CDATA[<ol><li>数理统计学只是从数量表现的层面上来分析问题，完全不触及问题的专业内涵。</li><li>数理统计方法是一个中立性的工具，这“中立”的含义是，它既不在任何问题上有何主张，也不维护任何利益或在任何学科中坚持任何学理。</li><li>由于数理统计方法只是从表面上的数量关系来分析问题，其结论不可混同于因果关系。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;数理统计学只是从数量表现的层面上来分析问题，完全不触及问题的专业内涵。&lt;/li&gt;
&lt;li&gt;数理统计方法是一个中立性的工具，这“中立”的含义是，它既不在任何问题上有何主张，也不维护任何利益或在任何学科中坚持任何学理。&lt;/li&gt;
&lt;li&gt;由于数理统计方法只是从表面上
      
    
    </summary>
    
      <category term="数学" scheme="http://www.iamlightsmile.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://www.iamlightsmile.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>向量与矩阵</title>
    <link href="http://www.iamlightsmile.com/%E5%90%91%E9%87%8F%E4%B8%8E%E7%9F%A9%E9%98%B5/"/>
    <id>http://www.iamlightsmile.com/向量与矩阵/</id>
    <published>2019-04-22T07:10:37.000Z</published>
    <updated>2019-04-22T08:32:17.552Z</updated>
    
    <content type="html"><![CDATA[<ol><li>线性代数的基本研究单位是向量。</li><li>向量可以视为存储信息和结构的基本量。</li><li>矩阵既可以视为一组向量的集合，也可以视为一组向量的映射关系。</li></ol><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;线性代数的基本研究单位是向量。&lt;/li&gt;
&lt;li&gt;向量可以视为存储信息和结构的基本量。&lt;/li&gt;
&lt;li&gt;矩阵既可以视为一组向量的集合，也可以视为一组向量的映射关系。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数学" scheme="http://www.iamlightsmile.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://www.iamlightsmile.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>大学数学基础体系脉络</title>
    <link href="http://www.iamlightsmile.com/%E5%A4%A7%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E4%BD%93%E7%B3%BB%E8%84%89%E7%BB%9C/"/>
    <id>http://www.iamlightsmile.com/大学数学基础体系脉络/</id>
    <published>2019-04-22T06:50:35.000Z</published>
    <updated>2019-04-22T08:32:26.067Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，问题总是可以分成两类：连续问题和离散问题。相应的，大学数学中高等数学（也就是说微积分）是用来解决连续问题的，关心的函数的变量可以都非常小；而线性代数则是用来解决离散问题的，关心的是维度。</p><a id="more"></a><p>以下是来自万门大学童哲校长在<a href="https://www.wanmen.org/courses/586d23485f07127674135dcb/lectures/586d23535f0712767415a8e0" target="_blank" rel="noopener">线性代数两日特训班</a>中所画的简单说明图：</p><p><img src="https://raw.githubusercontent.com/smilelight/PicImage/master/img/大学数学基础体系脉络.png" alt="大学数学基础体系脉络"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般来说，问题总是可以分成两类：连续问题和离散问题。相应的，大学数学中高等数学（也就是说微积分）是用来解决连续问题的，关心的函数的变量可以都非常小；而线性代数则是用来解决离散问题的，关心的是维度。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://www.iamlightsmile.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://www.iamlightsmile.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>整体论与还原论</title>
    <link href="http://www.iamlightsmile.com/%E6%95%B4%E4%BD%93%E8%AE%BA%E4%B8%8E%E8%BF%98%E5%8E%9F%E8%AE%BA/"/>
    <id>http://www.iamlightsmile.com/整体论与还原论/</id>
    <published>2019-04-22T06:26:43.000Z</published>
    <updated>2019-04-22T06:41:30.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="还原论"><a href="#还原论" class="headerlink" title="还原论"></a>还原论</h2><p>所谓还原，是一种把复杂的系统（或者现象、过程）层层分解为其组成部分的过程。<strong>还原论</strong>认为，复杂系统可以通过它各个组成部分的行为及其相互作用来加以解释。还原论方法是迄今为止自然科学研究的最基本的方法，人们习惯于以“静止的、孤立的”观点考察组成系统诸要素的行为和性质，然后将这些性质“组装”起来形成对整个系统的描述。例如，为了考察生命，我们首先考察神经系统、消化系统、免疫系统等各个部分的功能和作用，在考察这些系统的时候我们又要了解组成它们的各个器官，要了解器官又必须考察组织，直到最后是对细胞、蛋白质、遗传物质、分子、原子等的考察。现代科学的高度发达表明，还原论是比较合理的研究方法，寻找并研究物质的最基本构件的做法当然是有价值的。</p><a id="more"></a><h2 id="整体论"><a href="#整体论" class="headerlink" title="整体论"></a>整体论</h2><p>与还原论相反的是<strong>整体论</strong>，这种哲学认为，将系统打碎成为它的组成部分的做法是受限制的，对于高度复杂的系统，这种做法就行不通，因此我们应该以整体的系统论观点来考察事物。比如考察一台复杂的机器，还原论者可能会立即拿起螺丝刀和扳手将机器拆散成几千、几万个零部件，并分别进行考察，这显然耗时费力，效果还不一定很理想。整体论者不这么干，他们采取比较简单一些的办法，不拆散机器，而是试图启动运行这台机器，输入一些指令性的操作，观察机器的反应，从而建立起输入──输出之间的联系，这样就能了解整台机器的功能。整体论基本上是功能主义者，他们试图了解的主要是系统的整体功能，但对系统如何实现这些功能并不过分操心。这样做可以将问题简化，但当然也有可能会丢失一些比较重要的信息。</p><h2 id="还原论与整体论的关系"><a href="#还原论与整体论的关系" class="headerlink" title="还原论与整体论的关系"></a>还原论与整体论的关系</h2><p>还原论与整体论之争由来已久，并且激发了脑研究和人工智能领域内的大争论。还原论方法将大脑还原为神经元，然后设法将神经元组装成大脑。人工智能的一个学派认为，通过创造元数字电路，我们能够建造越来越复杂的电路，直到我们创造人工智能。这个学派沿着现代电子计算机这条思路，对“智能”的模仿取得了初步的成功，但深入下去就比较令人失望，因为它甚至连模仿大脑的最简单功能，比如模糊记忆，都无法做到。面对人工智能研究的窘境，一些科学家从研究方法上进行反思，认为还原论方法在人工智能的研究方面没有前途，应设法采取一种更加整体的方法对待大脑，不必纠缠于人脑运作中的一些细小环节，应该建立起把大脑视为整体的模型，将大脑的一些基本功能从一开始就建造在这个模型系统里。神经网络理论基本上就是基于这样一种方法而建立起来的理论模型，这是一种功能主义的整体研究方式。这种方式现在看来也是困难重重，不过它才刚刚起步，其未来的前途如何尚未可知。</p><p>我的观点是，还原论与整体论作为两种不同的研究方法，它们本身无所谓优劣之分，我们具体选择哪种方法，这完全视乎具体情形，并取决于我们个人的喜好。在某种情形下我们采取还原的方法，在另外的情形下我们可能会采取整体论的方法，这都是可以的。但是，在大多数情况下，人们倾向于采用还原论方法，这比较可靠，也比较能够满足我们寻根究底的好奇心，所以只要有可能，人们总是乐于使用它。</p><p>事实上整体论总是只能进行一些初步的研究，一旦深入下去就必须使用还原论的方法。因此，对待自然界，我们总是首先了解其大致的、整体的规律，这是整体论的方法，接着一定要再对它层层进行还原分解，以此考察和研究它的深层次本质规律。例如为了研究人体的生物性状，我们首先了解各个系统，如消化系统、神经系统、免疫系统等的功能，这时候我们是将各个系统当作一个整体来予以研究的；而接着，我们要继续研究组成系统的各器官的功能，再接着是组织、细胞、分子、原子等层面，这便是一个逐层还原的过程。随着层层还原过程的深入，我们对人体的机制就能够得到越来越多的了解。</p><p>是的，对那些过于复杂的系统，比如人的大脑，还原论方法到达一定地步之后就会显得异常繁难，人类的心智看来根本就无法做到将其彻底还原，这时候我们不得不退而求其次，对系统的某些细节忽略不计，从而引进一种比较整体的功能主义研究方式。类似地，对于像“视窗”这样复杂的软件系统，整个系统的逻辑是非常复杂的，如果有人想要模拟而不是剽窃这个系统，最好的办法是：在了解它的功能后再另行编制一个具有几乎相同功能的系统。如果妄想将一台装有“视窗”系统的电脑拆散，从物理的角度了解整个系统的逻辑结构，然后再一一复制出来，这肯定极其艰难甚至劳而无功。所以，对人的大脑采取功能主义的整体论方式进行模拟将比还原论方法也许更为行之有效。</p><p>但是，即使对复杂系统的研究，人类的心智有时候会变得一筹莫展，这也并不意味着还原论就没有价值。因为我们需要知道：系统的表现为什么会是这样？如果我们将一部哪怕最简单的计算器拿到古代，古代的科学家也可能被迫采取整体论的方式对它进行研究，他们或许能了解其主要功能，知道它可以用于数字计算，但他们必然不清楚：它为什么会是这样的呢？这时候，他们将会多么的遗憾。对人体的研究，虽然我们很难用原子和分子的行为来计算和推导出人的行为，但我们至少希望通过原子和分子的行为来解释和理解人的行为。很显然，我们需要能够直接描述复杂系统的整体定律，所以我们有化学定律、有混沌定律、有经济学定律和社会学定律，但这些定律不会是最基本的定律，我们会问为什么？为什么这些定律是这个样子？这时候，这些定律需要用个体行为来进行解释，需要用 “部分”的行为来进行解释。</p><p>还原论的方法肯定是最基本的科学方法。但由于混沌学说的巨大成功，一些人对整体论产生了过分的自信，在今天的很大部分科学哲学家眼里，还原论变成了坏东西，他们为整体论欢呼雀跃，却想法设法要与还原论划清界限。他们走得太远了，他们将整体论的作用过于夸大了，我们有些哲学家甚至还将整体论当作哲学本体论概念来进行介绍，煞有介事地探讨起“世界是简单还是复杂的”这样一些哲学命题来。他们的道理是，整体不等于部分之和，因此自然界是不可彻底还原的，因此整体论才是最优等的哲学。</p><p>有这样一个关于还原论的笑话：老师带学生走进实验室，指着一排玻璃仪器，说那是一个人，因为玻璃瓶里装着人的所有组成物质，包括水、碳、脂肪、蛋白质……。这个笑话的实质是说，还原论者只会将“部分”简单地累加起来形成整体，却愚蠢地并不考虑“部分”之间的相互作用。</p><p>我以为，认为还原论忽视了部分之间的相互作用，这样的指责毫无根据。还原论并不忽视“部分”之间的相互作用，相反，还原的目的正是为了更好地考察这种相互作用。通过还原，“部分”之间的相互作用变成了每个“部分”的边界条件，变成了每个“部分”的输入和输出，这使得我们能更精确地考察这种作用，并建立起将这些相互作用联系起来的方程。整体确实不等于部分之和，但整体必定等于部分及其相互作用之和。</p><p>有些人认为整体论的定律才是最基本的定律，而个体的行为要通过整体的行为来解释，甚至对人类社会也必须采取整体论的方法，认为如果只考察个体，则可能忽略掉人类社会这个群体的一些性质。这种说法是相当奇怪的，人类社会的所有性质归根结底都可以从个体性质及其相互作用而得到解释，虽然我们为了方便起见，可能采取整体论的研究方式，但肯定只有这种整体论的方式才有可能丢失一些重要的信息，而还原论的方式不会。</p><p>我们经常听到这样的训诫：使用还原论要谨慎从事。使用整体论更需谨慎从事。如果只是弄出一个整体论的定律，而个体层次发生的事情都以这个整体的行为来进行解释，这样的理论体系是难以令人信服的。</p><p>不过，还原论方法虽为我们所偏爱，但还原的过程必然只能进行到一定的层次，这不仅仅因为我们的心智不够，还有更重要的原因：自然界是不可以彻底还原的。</p><p>我们知道，世界是普遍联系的，世界上每个事物都和其他每个事物联系着。但事物之间的联系是怎样实现的呢？传统观点认为：不同的东西通过大量的中介过程统一起来，这就是说，事物之间的联系是层层递进的，是定域性的，任何物体只和其邻近产生即时联系，事物的超距作用是不可能的。世界的可还原性就建立在这样的宇宙绘景中，在这样的宇宙中，我们原则上可以将任何系统从宇宙中孤立出来进行考察，这个系统的边界条件是稳定的、可知的，我们可以通过边界条件的变化掌握和了解这个系统的性质和运行规律。将系统孤立的过程就是一个还原的过程，我们可以将大系统分割成一个个的小系统，小系统再细分为更小的系统，这样层层细分下去，从而我们所处的世界至少在理论上是可以彻底还原的。</p><p>然而，量子理论表明，世界的联系并不是定域性的。宇宙中的一切物质都存在着即时的普遍联系。在量子理论中，一切事物的运动都应该用波函数来描述，而波函数是遍布整个宇宙的。我现在坐在椅子上，我的身体伴随着有一个波函数，可以肯定这个波函数的值主要集中在我身体占有的空间内，接近100%，但不可能等于100%，在宇宙的其他地方，比如在火星上也会分布有我的波函数，虽然它们的值很小，非常接近于零，但不可能等于零。如果我的身体有任何的运动或变化，比如我动一下手指头，那么伴随我身体的波函数必然也要发生变化，而这个变化产生的影响将会遍布整个宇宙！火星上的一块石头如果“足够”地灵敏，它将会“感受”到这种影响，这种影响虽然非常非常之小，非常非常接近于零，但毕竟不等于零。在这样的宇宙绘景中，宇宙是一个不可分割的整体，如果我们一定要将某个时空孤立起来进行考察，那么由于宇宙中任何的变化都对它有影响，从而它的边界条件将会是整个宇宙！这个边界条件显然是不可知的。而且，外界对系统的作用也并不局限在边界，而是“深入”到系统内的每一个“部分”，这样系统内部的作用“场”也是不可知的。因此，这样的分割还原就变得没有任何实质性的意义。</p><p>所以，当我们用还原论的方法对事物进行考察的时候，我们实际上忽略了事物之间联系的量子效应。这样的“忽略”在通常情况下不会有什么问题，毕竟我的波函数在离开我身体哪怕只有一微米的地方就将衰减到几乎为零，它太小了，完全可以忽略不计。但是在那些必须考虑量子效应的地方，比如亚原子领域、比如宇宙“创生”的过程，这样的忽略就不能允许，这时候我们不能再采用还原论的研究方法，我们必须将整个宇宙都作为一个整体来考察。</p><p>很显然，只有在局域性不能忽略的地方，还原论才原则上不可行；在不必考虑局域性的地方，还原论原则上可行！</p><p>那么，在还原论原则上不可行的亚原子领域，还原论就没有价值了吗？<br>我认为，还原论仍然有重大的价值。因为，即便是存在非局域性，导致还原论原则上不可行的领域，我们还是需要了解个体的性质，要通过个体的行为来理解（而不是推导）整体的行为。</p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://baike.baidu.com/item/%E6%95%B4%E4%BD%93%E8%AE%BA" target="_blank" rel="noopener">整体论</a></li><li><a href="https://baike.baidu.com/item/%E8%BF%98%E5%8E%9F%E8%AE%BA" target="_blank" rel="noopener">还原论</a></li><li><a href="http://www.pstruc.org/Article/shi/423.html" target="_blank" rel="noopener">刘劲杨：论整体论与还原论之争</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;还原论&quot;&gt;&lt;a href=&quot;#还原论&quot; class=&quot;headerlink&quot; title=&quot;还原论&quot;&gt;&lt;/a&gt;还原论&lt;/h2&gt;&lt;p&gt;所谓还原，是一种把复杂的系统（或者现象、过程）层层分解为其组成部分的过程。&lt;strong&gt;还原论&lt;/strong&gt;认为，复杂系统可以通过它各个组成部分的行为及其相互作用来加以解释。还原论方法是迄今为止自然科学研究的最基本的方法，人们习惯于以“静止的、孤立的”观点考察组成系统诸要素的行为和性质，然后将这些性质“组装”起来形成对整个系统的描述。例如，为了考察生命，我们首先考察神经系统、消化系统、免疫系统等各个部分的功能和作用，在考察这些系统的时候我们又要了解组成它们的各个器官，要了解器官又必须考察组织，直到最后是对细胞、蛋白质、遗传物质、分子、原子等的考察。现代科学的高度发达表明，还原论是比较合理的研究方法，寻找并研究物质的最基本构件的做法当然是有价值的。&lt;/p&gt;
    
    </summary>
    
      <category term="哲学" scheme="http://www.iamlightsmile.com/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="哲学" scheme="http://www.iamlightsmile.com/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="抽象" scheme="http://www.iamlightsmile.com/tags/%E6%8A%BD%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>线性代数</title>
    <link href="http://www.iamlightsmile.com/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    <id>http://www.iamlightsmile.com/线性代数/</id>
    <published>2019-04-22T06:26:05.000Z</published>
    <updated>2019-04-22T08:32:44.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>线性代数是研究线性空间及其线性映射的，或者说各种线性结构和态射。</p><h2 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h2><p>由于线性结构非常常见，所以线性代数的价值也相当大。</p><a id="more"></a><h2 id="意义和地位"><a href="#意义和地位" class="headerlink" title="意义和地位"></a>意义和地位</h2><p>线性代数在数学、物理学和技术学科中有各种重要应用，因而它在各种代数分支中占居首要地位。在计算机广泛应用的今天，计算机图形学、计算机辅助设计、密码学、虚拟现实等技术无不以线性代数为其理论和算法基础的一部分。线性代数所体现的几何观念与代数方法之间的联系，从具体概念抽象出来的公理化方法以及严谨的逻辑推证、巧妙的归纳综合等，对于强化人们的数学训练，增益科学智能是非常有用的。随着科学的发展，我们不仅要研究单个变量之间的关系，还要进一步研究多个变量之间的关系，各种实际问题在大多数情况下可以线性化，而由于计算机的发展，线性化了的问题又可以被计算出来，线性代数正是解决这些问题的有力工具。线性代数的计算方法也是计算数学里一个很重要的内容。<br>线性代数的含义随数学的发展而不断扩大。线性代数的理论和方法已经渗透到数学的许多分支，同时也是理论物理和理论化学所不可缺少的代数基础知识。</p><p>“以直代曲”是人们处理很多数学问题时一个很自然的思想。很多实际问题的处理，最后往往归结为线性问题，它比较容易处理。因此，线性代数在工程技术和国民经济的许多领域都有着广泛的应用，是一门基本的和重要的学科。</p><p>如果进入科研领域，你就会发现，只要不是线性的东西，我们基本都不会！线性是人类少数可以研究得非常透彻的数学基础性框架。学好线性代数，你就掌握了绝大多数可解问题的钥匙。有了这把钥匙，再加上相应的知识补充，你就可以求解相应的问题。可以说，不学线性代数，你就漏过了95%的人类智慧！非线性的问题极为困难，我们并没有足够多的通用的性质和定理用于求解具体问题。如果能够把非线性的问题化为线性的，这是我们一定要走的方向！</p><p>事实上，微积分“以直代曲”的思想就是将整体非线性化为局部线性的一个经典的例子，尽管高等数学在定义微分时并没有用到一点线性代数的内容。许多非线性问题的处理――譬如流形、微分几何等，最后往往转化为线性问题。包括科学研究中，非线性模型通常也可以被近似为线性模型。随着研究对象的复杂化与抽象化，对非线性问题线性化，以及对线性问题的求解，就难免涉及到线性代数的术语和方法了。从这个意义上，线性代数可以被认为是许多近、现代数学分支的共同基础。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/800" target="_blank" rel="noopener">线性代数</a></li><li><a href="https://www.wanmen.org/courses/586d23485f07127674135dcb/lectures/586d23535f0712767415a8e0" target="_blank" rel="noopener">把非线性转化成线性</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;线性代数是研究线性空间及其线性映射的，或者说各种线性结构和态射。&lt;/p&gt;
&lt;h2 id=&quot;价值&quot;&gt;&lt;a href=&quot;#价值&quot; class=&quot;headerlink&quot; title=&quot;价值&quot;&gt;&lt;/a&gt;价值&lt;/h2&gt;&lt;p&gt;由于线性结构非常常见，所以线性代数的价值也相当大。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://www.iamlightsmile.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://www.iamlightsmile.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计</title>
    <link href="http://www.iamlightsmile.com/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    <id>http://www.iamlightsmile.com/概率论与数理统计/</id>
    <published>2019-04-22T06:25:41.000Z</published>
    <updated>2019-04-22T08:32:38.823Z</updated>
    
    <content type="html"><![CDATA[<p>概率论与数理统计的核心是<strong>利用微积分工具研究随机现象背后的客观规律性</strong>。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;概率论与数理统计的核心是&lt;strong&gt;利用微积分工具研究随机现象背后的客观规律性&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://www.iamlightsmile.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://www.iamlightsmile.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微积分</title>
    <link href="http://www.iamlightsmile.com/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    <id>http://www.iamlightsmile.com/微积分/</id>
    <published>2019-04-22T04:04:24.000Z</published>
    <updated>2019-04-22T08:31:55.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-极限"><a href="#1-极限" class="headerlink" title="1.极限"></a>1.极限</h2><p>设函数$f(x)$在点$x_0$的某一去心邻域内有定义。若存在常数$A$，对于任意给定的$\epsilon&gt;0$（不论它多么小），总存在正数$\delta$，使得当$0&lt;|x-x_0|&lt;\delta$时，对应的函数值$f(x)$都满足不等式$|f(x)-A|&lt;\epsilon$，则$A$就叫函数$f(x)$当$x\to x_0$时的极限，记为</p><script type="math/tex; mode=display">\lim_{x\to x_0}f(x)=A</script><p>或</p><script type="math/tex; mode=display">f(x)\to A,(x\to x_0)</script><p>写成$\epsilon-\delta$语言是：$\lim_{x\to x_0}f(x)=A\Leftrightarrow \forall \epsilon&gt;0,\exists \delta&gt;0$，当$0&lt;|x-x_0|&lt;\delta$时，$|f(x)-A|&lt;\epsilon$。</p><a id="more"></a><h2 id="2-导数"><a href="#2-导数" class="headerlink" title="2.导数"></a>2.导数</h2><p>参见《高数18讲》p51页 1.导数的概念。</p><h2 id="3-增量"><a href="#3-增量" class="headerlink" title="3.增量"></a>3.增量</h2><p><strong>增量</strong>亦称改变<strong>量</strong>，指的是在一段时间内，自变量取不同的值所对应的函数值之差。</p><h2 id="4-微分"><a href="#4-微分" class="headerlink" title="4.微分"></a>4.微分</h2><p>参见《高数18讲》p53页 5.微分的概念。</p><h3 id="自己的浅解"><a href="#自己的浅解" class="headerlink" title="自己的浅解"></a>自己的浅解</h3><p>微分是相对于某点而言，变量的线形近似增量。</p><h3 id="微分的意义"><a href="#微分的意义" class="headerlink" title="微分的意义"></a>微分的意义</h3><p>参见《高数18讲》p53页中 6.可微的判别【注】(1)。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.zhihu.com/question/26490937/answer/498740422" target="_blank" rel="noopener">微分符号 dx、dy 表示什么含义？ - 马同学的回答 - 知乎</a></li><li><a href="https://www.guokr.com/question/588518/" target="_blank" rel="noopener">积分中dx的意义是什么？</a></li></ul><h2 id="5-积分"><a href="#5-积分" class="headerlink" title="5.积分"></a>5.积分</h2><p>参见《高数18讲》p110页 1.原函数与不定积分。</p><h3 id="自己浅解"><a href="#自己浅解" class="headerlink" title="自己浅解"></a>自己浅解</h3><p>微分之和即积分</p><h2 id="6-微积分基本定理"><a href="#6-微积分基本定理" class="headerlink" title="6.微积分基本定理"></a>6.微积分基本定理</h2><h3 id="自己浅解-1"><a href="#自己浅解-1" class="headerlink" title="自己浅解"></a>自己浅解</h3><p><img src="https://raw.githubusercontent.com/smilelight/PicImage/master/img/微积分1.jpg" alt="微积分1"></p><p><img src="https://raw.githubusercontent.com/smilelight/PicImage/master/img/微积分2.jpg" alt="微积分2"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-极限&quot;&gt;&lt;a href=&quot;#1-极限&quot; class=&quot;headerlink&quot; title=&quot;1.极限&quot;&gt;&lt;/a&gt;1.极限&lt;/h2&gt;&lt;p&gt;设函数$f(x)$在点$x_0$的某一去心邻域内有定义。若存在常数$A$，对于任意给定的$\epsilon&amp;gt;0$（不论它多么小），总存在正数$\delta$，使得当$0&amp;lt;|x-x_0|&amp;lt;\delta$时，对应的函数值$f(x)$都满足不等式$|f(x)-A|&amp;lt;\epsilon$，则$A$就叫函数$f(x)$当$x\to x_0$时的极限，记为&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lim_{x\to x_0}f(x)=A&lt;/script&gt;&lt;p&gt;或&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)\to A,(x\to x_0)&lt;/script&gt;&lt;p&gt;写成$\epsilon-\delta$语言是：$\lim_{x\to x_0}f(x)=A\Leftrightarrow \forall \epsilon&amp;gt;0,\exists \delta&amp;gt;0$，当$0&amp;lt;|x-x_0|&amp;lt;\delta$时，$|f(x)-A|&amp;lt;\epsilon$。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://www.iamlightsmile.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://www.iamlightsmile.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题继续优化</title>
    <link href="http://www.iamlightsmile.com/Hexo%E4%B8%BB%E9%A2%98%E7%BB%A7%E7%BB%AD%E4%BC%98%E5%8C%96/"/>
    <id>http://www.iamlightsmile.com/Hexo主题继续优化/</id>
    <published>2019-04-03T16:13:11.000Z</published>
    <updated>2019-04-04T03:16:24.750Z</updated>
    
    <content type="html"><![CDATA[<p>本次优化的方向主要围绕以下几点来展开：</p><ol><li>自定义背景文字颜色</li><li>添加雪花特效</li><li>添加爆炸特效</li><li>添加输入特效</li></ol><p>我当前使用的主题还是比较流行、作者一直在维护的主题<a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material-X</a>.</p><a id="more"></a><h3 id="自定义背景文字颜色"><a href="#自定义背景文字颜色" class="headerlink" title="自定义背景文字颜色"></a>自定义背景文字颜色</h3><p>参见<a href="https://xaoxuu.com/wiki/material-x/style/index.html" target="_blank" rel="noopener">Material-X doc</a>中配色描述，将背景和文字颜色设置为暗色主题，同时将主题设置为深绿色，效果如图所示：</p><p><img src="https://raw.githubusercontent.com/smilelight/PicImage/master/img/hexo主题设置.png" alt="hexo主题设置"></p><p><strong>注意</strong>：如果是单纯修改以上内容，其实并不能生效，还要关闭主题的<code>_config.yml</code>文件中的cdn服务，如下图所示：</p><p><img src="https://raw.githubusercontent.com/smilelight/PicImage/master/img/关闭cdn服务.png" alt="关闭cdn服务"></p><h3 id="添加雪花特效"><a href="#添加雪花特效" class="headerlink" title="添加雪花特效"></a>添加雪花特效</h3><p>从站长之家找到的<a href="http://sc.chinaz.com/jiaoben/181229224430.htm" target="_blank" rel="noopener">JS制作雪花飘落背景动画特效</a>, 下载后将两个js放入<code>source</code>目录下的<code>js</code>目录中，并在<code>layout</code>目录下的<code>layout.ejs</code>中添加相关script路径，如下图所示：</p><p><img src="https://raw.githubusercontent.com/smilelight/PicImage/master/img/雪花特效.png" alt="雪花特效"></p><h3 id="添加爆炸特效"><a href="#添加爆炸特效" class="headerlink" title="添加爆炸特效"></a>添加爆炸特效</h3><p>发现<a href="http://www.zhuimeng.online/" target="_blank" rel="noopener">生如夏花</a>的博客的点击效果比较炫酷，查看其发布的文章并没有介绍具体实现，于是查看其网页源码，得到了对应的<code>fireworks.js</code>文件，同<strong>雪花特效</strong>一样添加到指定路径并配置路径，如下图所示：</p><p><img src="https://raw.githubusercontent.com/smilelight/PicImage/master/img/爆炸特效.png" alt="爆炸特效"></p><h3 id="添加输入特效"><a href="#添加输入特效" class="headerlink" title="添加输入特效"></a>添加输入特效</h3><p>发现<a href="https://blog.treelo.xin/" target="_blank" rel="noopener">搅拌糖</a>对主题进行了炫酷的DIY，如背景切换，滑动栏自定义等，同上查看了其网页源码，得到<code>cooltext.js</code>文件，同<strong>雪花特效</strong>一样添加到指定路径并配置路径，如下图所示：</p><p><img src="https://raw.githubusercontent.com/smilelight/PicImage/master/img/输入特效.png" alt="输入特效"></p><p>经过以上步骤，hexo主题又得到了进一步的自定义优化。</p><p>ps：花了许多时间排查看板娘插件是如何出现的，自己只是安装的依赖库，并没有配置，然而却被渲染到最终的生成页面中，真是百思不得其解，由于个人不太喜欢二次元，同时手机端看起来体验不好（占了很大的空间），最终选择将依赖库移除从而去除掉了看板娘效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本次优化的方向主要围绕以下几点来展开：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义背景文字颜色&lt;/li&gt;
&lt;li&gt;添加雪花特效&lt;/li&gt;
&lt;li&gt;添加爆炸特效&lt;/li&gt;
&lt;li&gt;添加输入特效&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我当前使用的主题还是比较流行、作者一直在维护的主题&lt;a href=&quot;https://xaoxuu.com/wiki/material-x/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Material-X&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.iamlightsmile.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.iamlightsmile.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro下数据备份</title>
    <link href="http://www.iamlightsmile.com/Manjaro%E4%B8%8B%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    <id>http://www.iamlightsmile.com/Manjaro下数据备份/</id>
    <published>2019-04-03T06:25:51.000Z</published>
    <updated>2019-04-03T06:27:52.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Linux一时爽，崩后火葬场；<br>Manjaro一时爽，一直用一直爽。</p></blockquote><p>以下简单介绍几种manjaro下进行数据备份的方案选择以及一些使用流程。<br>其中自己编写的使用流程如下</p><ul><li>使用百度云盘+ baidupcs-go</li><li>使用Google Drive</li><li>MEGA</li><li>使用sftp直连<h1 id="数据备份方案"><a href="#数据备份方案" class="headerlink" title="数据备份方案"></a>数据备份方案</h1></li><li>物理介质</li><li>自己搭建私有云</li><li>选择网盘服务商</li><li>其他方案</li></ul><a id="more"></a><h2 id="物理介质"><a href="#物理介质" class="headerlink" title="物理介质"></a>物理介质</h2><h4 id="1-移动硬盘"><a href="#1-移动硬盘" class="headerlink" title="1. 移动硬盘"></a>1. 移动硬盘</h4><p>优势：离线存储，简洁快速，数据安全<br>劣势：丢失无法找回，不能自动同步</p><h4 id="2-移动U盘"><a href="#2-移动U盘" class="headerlink" title="2. 移动U盘"></a>2. 移动U盘</h4><p>优势：离线存储，简洁快速，数据安全<br>劣势：丢失无法找回，不能自动同步</p><h2 id="自己搭建私有云"><a href="#自己搭建私有云" class="headerlink" title="自己搭建私有云"></a>自己搭建私有云</h2><h4 id="1-Owncloud"><a href="#1-Owncloud" class="headerlink" title="1. Owncloud"></a>1. Owncloud</h4><p>优势：数据安全<br>劣势：搭建成本高<br>搭建教程：</p><ol><li><a href="https://www.jianshu.com/p/b42453959fae" target="_blank" rel="noopener">如何搭建私密云存储之ownCloud</a></li></ol><h4 id="2-NextCloud"><a href="#2-NextCloud" class="headerlink" title="2. NextCloud"></a>2. NextCloud</h4><p>优势：数据安全<br>劣势：搭建成本高<br>搭建教程:</p><ol><li><a href="https://www.jianshu.com/p/a0db4c1bfaea" target="_blank" rel="noopener">Ubuntu16.04 搭建NextCloud私有云</a><h4 id="3-Seafile"><a href="#3-Seafile" class="headerlink" title="3. Seafile"></a>3. Seafile</h4>优势：数据安全<br>劣势：搭建成本高<br>搭建教程：</li><li><a href="https://www.jianshu.com/p/fcf12afe7c68" target="_blank" rel="noopener">部署Seafile搭建自己的网盘</a></li></ol><h2 id="选择网盘服务商"><a href="#选择网盘服务商" class="headerlink" title="选择网盘服务商"></a>选择网盘服务商</h2><h4 id="1-百度网盘"><a href="#1-百度网盘" class="headerlink" title="1. 百度网盘"></a>1. 百度网盘</h4><p>优势：容量大<br>劣势：限速，建议使用 <strong><a href="https://github.com/iikira/BaiduPCS-Go" target="_blank" rel="noopener">BaiduPCS-Go</a></strong>工具进行管理</p><h4 id="2-Google-Drive"><a href="#2-Google-Drive" class="headerlink" title="2. Google Drive"></a>2. Google Drive</h4><p>优势：跨平台<br>劣势：需要翻墙，容量小</p><h4 id="3-MEGA"><a href="#3-MEGA" class="headerlink" title="3. MEGA"></a>3. MEGA</h4><p>优势：Linux下使用体验好<br>劣势：</p><h4 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h4><p>优势：<br>劣势：容量小</p><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><h4 id="1-有道云笔记（VIP版）"><a href="#1-有道云笔记（VIP版）" class="headerlink" title="1. 有道云笔记（VIP版）"></a>1. 有道云笔记（VIP版）</h4><p>和印象笔记相比，虽然网页剪裁的功能弱了一些，但是在界面上和markdown支持上都是要优于印象笔记的<br>优势：<br>劣势：</p><h4 id="2-使用sftp连接远程服务器"><a href="#2-使用sftp连接远程服务器" class="headerlink" title="2. 使用sftp连接远程服务器"></a>2. 使用sftp连接远程服务器</h4><p>优势：<br>劣势：</p><h1 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h1><h2 id="百度网盘-BaiduPCS-Go"><a href="#百度网盘-BaiduPCS-Go" class="headerlink" title="百度网盘+BaiduPCS-Go"></a>百度网盘+<a href="https://github.com/iikira/BaiduPCS-Go" target="_blank" rel="noopener">BaiduPCS-Go</a></h2><h4 id="安装baidupcs-go"><a href="#安装baidupcs-go" class="headerlink" title="安装baidupcs-go"></a>安装baidupcs-go</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S baidupcs-go-bin</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidupcs</span><br></pre></td></tr></table></figure><p>如图所示：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-ccb334ca6bc5bd6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="baidupcs"></p><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaiduPCS-Go &gt; login</span><br></pre></td></tr></table></figure><p>然后输入自己的账号密码，进行验证之后便登录成功了，如图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-dbd0720f058f2790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="baidupcs_login"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>输入<code>-h</code>可查看相关指令，下载起来速度很快。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaiduPCS-Go &gt; -h</span><br></pre></td></tr></table></figure></p><h4 id="可参考"><a href="#可参考" class="headerlink" title="可参考"></a>可参考</h4><ol><li><a href="https://www.jianshu.com/p/c37a124a0f55" target="_blank" rel="noopener">BaiduPCS-Go | 百度网盘命令行工具（基于 Go）</a></li></ol><h2 id="Google-Drive"><a href="#Google-Drive" class="headerlink" title="Google Drive"></a>Google Drive</h2><h4 id="安装kio-gdrive"><a href="#安装kio-gdrive" class="headerlink" title="安装kio-gdrive"></a>安装<code>kio-gdrive</code></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yay -S kio-gdrive</span></span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>在安装成功后，此时再打开Dolphin（即文件管理器），会发现远程网络中多了一个文件夹，如图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-8fcacbb848420ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Google 云端硬盘"><br>之后我们双击它，得到如图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-e4d1ecb98a9648d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gdrive_2"><br>上图左侧的账号是我之前添加的，此时也可点击 下方<code>+</code>添加Google账号<br>然后选中要同步的账号，选中，如下图所示，然后点击确定。<br><img src="https://upload-images.jianshu.io/upload_images/5410339-539cb60abe895442.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gdrive_3.png"><br>之后右下角提示正在同步文件夹，稍等片刻便可同步成功了，如图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-1d7ce651c0328b35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gdrive_4.png"></p><h4 id="可参考-1"><a href="#可参考-1" class="headerlink" title="可参考"></a>可参考</h4><ol><li><a href="https://community.kde.org/KIO_GDrive#Arch_Linux" target="_blank" rel="noopener">KIO GDrive</a><h2 id="MEGA"><a href="#MEGA" class="headerlink" title="MEGA"></a>MEGA</h2><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4>登录<a href="https://mega.nz/register" target="_blank" rel="noopener">官网</a>注册账号，填写个人信息，然后打开邮箱进行验证，随后下载客户端应用（对于manjaro来说，直接通过<code>pacman</code>下载就可以，就是这么方便，当然也可以先下载安装包，然后通过<code>pacman -U</code>来安装）</li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S megasync</span><br></pre></td></tr></table></figure><h4 id="设置个人信息"><a href="#设置个人信息" class="headerlink" title="设置个人信息"></a>设置个人信息</h4><p>首先<code>[Alt] + [Space]</code>打开<code>plasma</code>搜索，输入<code>megasync</code>打开MEGA客户端，然后输入邮箱密码，接着设置同步目录，其他设置自己看情况。<br>如下图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-ed5086fa3d3bd1e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MEGA Settings"></p><h4 id="可参考-2"><a href="#可参考-2" class="headerlink" title="可参考"></a>可参考</h4><ol><li><a href="https://www.jianshu.com/p/44741a9e243f" target="_blank" rel="noopener">网盘可以良心到什么程度? 试试MEGA吧!</a></li></ol><h2 id="使用sftp直连"><a href="#使用sftp直连" class="headerlink" title="使用sftp直连"></a>使用sftp直连</h2><p>使用方式很简单，如下图：<br>双击<code>连接网络文件夹</code>，选择<code>安全Shell</code>，点击<code>Next</code><br><img src="https://upload-images.jianshu.io/upload_images/5410339-7e3ad9a31453d3ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="remote_network.png"><br>填写网络文件夹信息，然后点击<code>保存并连接</code><br><img src="https://upload-images.jianshu.io/upload_images/5410339-983794d294610356.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="remote_network_2.png"><br>如果填写无误的话，就连接成功了，如图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-21ca15b4472c8822.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="remote_network_3.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Linux一时爽，崩后火葬场；&lt;br&gt;Manjaro一时爽，一直用一直爽。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下简单介绍几种manjaro下进行数据备份的方案选择以及一些使用流程。&lt;br&gt;其中自己编写的使用流程如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用百度云盘+ baidupcs-go&lt;/li&gt;
&lt;li&gt;使用Google Drive&lt;/li&gt;
&lt;li&gt;MEGA&lt;/li&gt;
&lt;li&gt;使用sftp直连&lt;h1 id=&quot;数据备份方案&quot;&gt;&lt;a href=&quot;#数据备份方案&quot; class=&quot;headerlink&quot; title=&quot;数据备份方案&quot;&gt;&lt;/a&gt;数据备份方案&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;物理介质&lt;/li&gt;
&lt;li&gt;自己搭建私有云&lt;/li&gt;
&lt;li&gt;选择网盘服务商&lt;/li&gt;
&lt;li&gt;其他方案&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/categories/Manjaro/"/>
    
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/tags/Manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro下vscode中zsh乱码</title>
    <link href="http://www.iamlightsmile.com/Manjaro%E4%B8%8Bvscode%E4%B8%ADzsh%E4%B9%B1%E7%A0%81/"/>
    <id>http://www.iamlightsmile.com/Manjaro下vscode中zsh乱码/</id>
    <published>2019-04-03T06:24:25.000Z</published>
    <updated>2019-04-03T06:28:36.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><a id="more"></a><ol><li><p>下载<code>Menlo for Powerline</code>字体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/abertsch/Menlo-for-Powerline.git</span><br></pre></td></tr></table></figure></li><li><p>将字体放到ttf文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Menlo-for-Powerline</span><br><span class="line">sudo cp *.ttf* /usr/share/fonts/TTF/</span><br><span class="line">sudo <span class="built_in">fc</span>-cache -f -v <span class="comment"># 刷新字体</span></span><br></pre></td></tr></table></figure></li><li><p>设置vscode中终端的字体为<code>Menlo for Powerline</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3></li><li><a href="https://ywnz.com/linuxjc/3250.html" target="_blank" rel="noopener">在Ubuntu 18.04系统下vscode中zsh乱码的解决方法</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;
    
    </summary>
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/categories/Manjaro/"/>
    
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/tags/Manjaro/"/>
    
  </entry>
  
  <entry>
    <title>torchtext安装</title>
    <link href="http://www.iamlightsmile.com/torchtext%E5%AE%89%E8%A3%85/"/>
    <id>http://www.iamlightsmile.com/torchtext安装/</id>
    <published>2019-04-03T06:20:52.000Z</published>
    <updated>2019-04-03T06:21:33.097Z</updated>
    
    <content type="html"><![CDATA[<p>使用如下命令安装<code>torchtext</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install https://github.com/pytorch/text/archive/master.zip</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用如下命令安装&lt;code&gt;torchtext&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="深度学习" scheme="http://www.iamlightsmile.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="NLP" scheme="http://www.iamlightsmile.com/tags/NLP/"/>
    
      <category term="深度学习" scheme="http://www.iamlightsmile.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro下截屏及设置快捷键</title>
    <link href="http://www.iamlightsmile.com/Manjaro%E4%B8%8B%E6%88%AA%E5%B1%8F%E5%8F%8A%E8%AE%BE%E7%BD%AE%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://www.iamlightsmile.com/Manjaro下截屏及设置快捷键/</id>
    <published>2019-04-03T06:19:40.000Z</published>
    <updated>2019-04-03T06:28:09.740Z</updated>
    
    <content type="html"><![CDATA[<p>我认为当前Manjaro下最好的截屏工具要属<code>deepin-screenshot</code>了。</p><a id="more"></a><ol><li><p>下载安装</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yay -S deepin-screenshot</span></span><br></pre></td></tr></table></figure></li><li><p>配置系统快捷键<br>在【系统设置】-【工作区】-【自定义快捷键】中，点击【编辑】-【新建】-【全局快捷键】-【命令/URL：】<br>然后填写动作名称，如我这里是<code>Deepin截图</code>,然后分别填写注释（非必须）、触发器和动作，<br>如下图：</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/5410339-65ef5ef062c11a5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置系统快捷键"><br><img src="https://upload-images.jianshu.io/upload_images/5410339-dbe8ca8b43041840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="快捷键触发器配置"></p><p><img src="https://upload-images.jianshu.io/upload_images/5410339-d6b61bcb24daa799.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="快捷键动作配置"></p><p>然后就可以尽情使用啦，不得不感慨deepin真的挺强挺好的！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我认为当前Manjaro下最好的截屏工具要属&lt;code&gt;deepin-screenshot&lt;/code&gt;了。&lt;/p&gt;
    
    </summary>
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/categories/Manjaro/"/>
    
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/tags/Manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro下安装使用kenlm</title>
    <link href="http://www.iamlightsmile.com/Manjaro%E4%B8%8B%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8kenlm/"/>
    <id>http://www.iamlightsmile.com/Manjaro下安装使用kenlm/</id>
    <published>2019-04-03T06:18:33.000Z</published>
    <updated>2019-04-03T06:28:22.471Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/kpu/kenlm" target="_blank" rel="noopener">kenlm</a>是一个linux下快速轻量的语言模型训练工具。</p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kpu/kenlm.git</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>kheafield.com<span class="regexp">/code/</span>kenlm.tar.gz | tar xz</span><br></pre></td></tr></table></figure></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S boost eigen</span><br></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>以上两种来源区别我也不是很清楚，没有细究。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir kenlm/build</span><br><span class="line"><span class="built_in">cd</span> kenlm/build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><h2 id="安装Python库"><a href="#安装Python库" class="headerlink" title="安装Python库"></a>安装Python库</h2><p>以上下载的文件中有python安装脚本<code>setup.py</code>文件，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></p><p>或者，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install https://github.com/kpu/kenlm/archive/master.zip</span><br></pre></td></tr></table></figure></p><p>或者从pypi源安装，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kenlm</span><br></pre></td></tr></table></figure></p><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><h4 id="准备训练数据"><a href="#准备训练数据" class="headerlink" title="准备训练数据"></a>准备训练数据</h4><p>首先我们需要有一个分好词的语料文件，如：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-d64febb4833bff96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分词训练语料"></p><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>然后使用以下命令训练：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lmplz -o 3 &lt;pku_training.utf8&gt; lm_ng3.arpa</span><br></pre></td></tr></table></figure></p><p>其中<code>-o</code>参数指明n-gram语法为3，<code>&lt;&gt;</code>中的为训练语料路径，后面跟模型保存路径</p><h4 id="模型压缩"><a href="#模型压缩" class="headerlink" title="模型压缩"></a>模型压缩</h4><p>对模型压缩可以提高加载速度，不压缩也可以<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build_binary -s lm_ng3.arpa lm_ng3.bin</span><br></pre></td></tr></table></figure></p><h2 id="使用Python接口"><a href="#使用Python接口" class="headerlink" title="使用Python接口"></a>使用Python接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import kenlm</span><br><span class="line">import jieba</span><br><span class="line">model = kenlm.LanguageModel(&apos;./lm_ng3.bin&apos;)</span><br><span class="line">sent_1 = &apos;哈哈，我是李磊，你好呀&apos;</span><br><span class="line">sent_2 = &apos;安赛飞啊，诶爱尔兰&apos;</span><br><span class="line">def process(sent):</span><br><span class="line">  return &apos; &apos;.join(jieba.cut(sent))</span><br><span class="line">print(model.score(process(sent_1))</span><br><span class="line">print(model.score(process(sent_2))</span><br></pre></td></tr></table></figure><p>结果输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-40.40456008911133</span><br><span class="line">-47.40667724609375</span><br></pre></td></tr></table></figure></p><p>其中，分数越小，句子分数越低，越”不像“一个句子。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/kpu/kenlm" target="_blank" rel="noopener">kenlm</a></li><li><a href="https://blog.csdn.net/luoyexuge/article/details/82109526" target="_blank" rel="noopener">kenlm语言模型相关，c++、python相关接口</a></li><li><a href="https://mooc.study.163.com/smartSpec/detail/1001477005.htm" target="_blank" rel="noopener">网易云课堂-微专业-AI工程师（自然语言处理方向）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/kpu/kenlm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kenlm&lt;/a&gt;是一个linux下快速轻量的语言模型训练工具。&lt;/p&gt;
    
    </summary>
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/categories/Manjaro/"/>
    
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/tags/Manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro系统报错集锦</title>
    <link href="http://www.iamlightsmile.com/Manjaro%E7%B3%BB%E7%BB%9F%E6%8A%A5%E9%94%99%E9%9B%86%E9%94%A6/"/>
    <id>http://www.iamlightsmile.com/Manjaro系统报错集锦/</id>
    <published>2019-04-03T06:17:26.000Z</published>
    <updated>2019-04-03T06:27:41.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="以下是自己在使用manjaro系统中遇到的错误和相应的解决方案"><a href="#以下是自己在使用manjaro系统中遇到的错误和相应的解决方案" class="headerlink" title="以下是自己在使用manjaro系统中遇到的错误和相应的解决方案"></a>以下是自己在使用manjaro系统中遇到的错误和相应的解决方案</h2><ol><li><code>unable to initialize decompress status for section .debug_info</code>以及<code>file not recognized: file format not recognized</code></li><li>进入<code>grub rescue</code>模式</li></ol><a id="more"></a><h3 id="1-unable-to-initialize-decompress-status-for-section-debug-info以及file-not-recognized-file-format-not-recognized"><a href="#1-unable-to-initialize-decompress-status-for-section-debug-info以及file-not-recognized-file-format-not-recognized" class="headerlink" title="1. unable to initialize decompress status for section .debug_info以及file not recognized: file format not recognized"></a>1. <code>unable to initialize decompress status for section .debug_info</code>以及<code>file not recognized: file format not recognized</code></h3><h4 id="错误出处"><a href="#错误出处" class="headerlink" title="错误出处"></a>错误出处</h4><p>在安装kenlm库以及allennlp时报的安装错误</p><h4 id="报错截图"><a href="#报错截图" class="headerlink" title="报错截图"></a>报错截图</h4><p><img src="https://upload-images.jianshu.io/upload_images/5410339-dfb7bebfd5990222.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="报的错误"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>从<a href="https://archive.archlinux.org/packages/" target="_blank" rel="noopener">arch包源</a>下载旧版的bintools,然后降级安装,如图:<br><img src="https://upload-images.jianshu.io/upload_images/5410339-f4124b6081a18307.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="降级安装bintools"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://bbs.archlinux.org/viewtopic.php?id=242682" target="_blank" rel="noopener">[SOLVED]unable to initialize decompress status for section .debug_info</a></li></ol><h3 id="2-进入grub-rescue模式"><a href="#2-进入grub-rescue模式" class="headerlink" title="2. 进入grub rescue模式"></a>2. 进入<code>grub rescue</code>模式</h3><h4 id="错误出处-1"><a href="#错误出处-1" class="headerlink" title="错误出处"></a>错误出处</h4><p>在系统启动过程中由于目录分区映射及挂载失败导致</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p><strong>注意</strong>:我这里boot目录和根目录分别挂载在不同分区,所以后续路径可能和其他参考有所不同，在使用时视实际情况而定</p><ol><li>确定boot目录和根目录位置<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls查看一下设备状态，可使用tab键自动补全，并有各分区提示信息</span></span><br><span class="line">grub rescue&gt; <span class="keyword">ls</span> </span><br><span class="line">hd0, <span class="params">(hd0, gpt1)</span>, <span class="params">(hd0, gpt2)</span>, <span class="params">(hd0, gpt3)</span></span><br><span class="line">grub rescue&gt; <span class="keyword">ls</span> <span class="params">(hd0,gpt3)</span>/</span><br><span class="line"><span class="string">./</span>  <span class="string">../</span>  lost+found/</span><br></pre></td></tr></table></figure></li></ol><p>通过查看找到boot目录和root目录所在分区，比如分别为gpt1和gpt2</p><ol><li><p>设置grub的启动分区和路径</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grub rescue&gt; <span class="builtin-name">set</span> root=(hd0,gpt1)               #设置grub启动分区</span><br><span class="line">grub rescue&gt; <span class="builtin-name">set</span> prefix=(hd0,gpt1)/grub  #设置grub启动路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一下设置情况,直接输入set可以查看root和prefix的配置</span></span><br><span class="line">grub rescue&gt; set</span><br><span class="line">prefix=(hd0,gpt1)/grub</span><br><span class="line"><span class="attribute">root</span>=hd0,gpt1</span><br></pre></td></tr></table></figure></li><li><p>加载基本模块</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub rescue&gt; <span class="keyword">insmod </span><span class="keyword">normal </span>      <span class="comment">#加载基本模块</span></span><br></pre></td></tr></table></figure></li><li><p>进入正常模式</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub <span class="keyword">rescue</span>&gt; normal  <span class="comment">#进入普通模式，出现菜单，如果加载grub.cfg（错误的）可能出现问题，按shift可以出现菜单，之后按c键进入控制台</span></span><br></pre></td></tr></table></figure></li></ol><p>进入正常模式后就会出现grub&gt;这样的提示符，在这里支持的命令就非常多了。</p><ol><li><p>引导系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">grub&gt;</span><span class="bash"> <span class="built_in">set</span> root=(hd0,gpt1)  <span class="comment">#设置正常启动分区</span></span></span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash"> linux /vmlinuz-4.19-x86_64  ro text root=/dev/sda2  <span class="comment">#加载内核，进入控制台模式</span></span></span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash"> initrd /intel-ucode.img /initramfs-4.19-x86_64.img <span class="comment">#加载initrd.img</span></span></span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash"> boot <span class="comment">#引导</span></span></span><br></pre></td></tr></table></figure></li><li><p>更新grub</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入系统后，先更新grub</span></span><br><span class="line">update-grub            <span class="comment">#更新</span></span><br><span class="line"><span class="comment"># 修改grub.cfg后，再执行install</span></span><br><span class="line">grub-install <span class="regexp">/dev/</span>sda  <span class="comment">#安装</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>注意</strong>:注意上面的是sda，硬盘号，而不是具体某个分区号，如sda1</p><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="http://xstarcd.github.io/wiki/Linux/grub_rescue.html" target="_blank" rel="noopener">grub rescue救援模式的处理</a></li><li><a href="https://blog.csdn.net/wangtingyao1990/article/details/52368699" target="_blank" rel="noopener">Ubuntu开机出现grub rescue模式修复方法</a></li><li><a href="https://www.cnblogs.com/samcn/archive/2011/03/30/1999615.html" target="_blank" rel="noopener">Ubuntu启动问题以及Grub Rescue修复方法</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;以下是自己在使用manjaro系统中遇到的错误和相应的解决方案&quot;&gt;&lt;a href=&quot;#以下是自己在使用manjaro系统中遇到的错误和相应的解决方案&quot; class=&quot;headerlink&quot; title=&quot;以下是自己在使用manjaro系统中遇到的错误和相应的解决方案&quot;&gt;&lt;/a&gt;以下是自己在使用manjaro系统中遇到的错误和相应的解决方案&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;unable to initialize decompress status for section .debug_info&lt;/code&gt;以及&lt;code&gt;file not recognized: file format not recognized&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入&lt;code&gt;grub rescue&lt;/code&gt;模式&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/categories/Manjaro/"/>
    
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/tags/Manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow编译血泪史</title>
    <link href="http://www.iamlightsmile.com/Tensorflow%E7%BC%96%E8%AF%91%E8%A1%80%E6%B3%AA%E5%8F%B2/"/>
    <id>http://www.iamlightsmile.com/Tensorflow编译血泪史/</id>
    <published>2019-04-03T06:14:59.000Z</published>
    <updated>2019-04-03T06:16:39.422Z</updated>
    
    <content type="html"><![CDATA[<p>为了安装tensorflow，导致我Linux系统重装，Windows系统差点也没了，哎。。。</p><a id="more"></a><p>本人笔记本电脑有一个256 SSD和1TB机械硬盘，固态装C盘，机械硬盘装D、E和F，各330G，系统为Win10，显卡为NVIDIA1060。后来打算装manjaro双系统，进行编程和机器学习、深度学习的开发工作，于是F盘分了一半约160G给manjaro系统，其中根目录和家目录等单独划分分区挂载，根目录分区大小为30G，此是前话。</p><p>在安装tensorflow之前自己先装了pytorch，因为觉得这个框架代码更优雅，代码风格自己更喜欢。后来在安装tensorflow时发现还挺麻烦，需要独立cuda和cudnn库，不同版本的tensorflow依赖于不同版本的cuda和cudnn，而cuda和cudnn依赖于gcc，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/5410339-157b54d0e4ed1564.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tensorflow编译配置"></p><p><img src="https://upload-images.jianshu.io/upload_images/5410339-277ce10b73dee9d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装cuda9.1包依赖gcc6"></p><p>而manjaro系统属于arch系，各软件包滚动更新速度很快，基本总是保持最新，比如系统默认python环境竟然时3.7.2，我的个乖乖，自己的系统里安装的gcc是此时最新的8.2.1，与cuda所需的gcc6冲突，如果要装gcc6还要卸载gcc8，而其他软件包会依赖于gcc8，况且安装旧版本包这种行为一点都不arch，于是使用tensorflow官方预编译好的whl文件安装就不太现实了，只能自己在本机上编译构建了，幸好网上搜到了一篇最近的、讲得很好很详细、和自己情况正相符的一篇帖子：<a href="https://www.solarck.com/compile-tensorflow-gpu.html" target="_blank" rel="noopener">编译 Tensorflow 1.10 + CUDA9.2 + MKL</a>，在这里向作者由衷的表示感谢！</p><p>于是便红红火火按照教程开始来装了，于是问题旧开始出现了。<br>首先问题是当下载了tensorflow源码之后发现自己不能切换安装版本，如果选择默认master以外的分支，则报<code>无法引用到/tensorflow/tools/bazel.rc文件</code>的错误，于是只能在master分支装吧，不管了。<br>如图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-b954de608370ef44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bazel.png"></p><p>同时发现自己访问github下载文件的速度太慢了，导致bazel程序运行失败，后来找到了相关博客如<a href="https://blog.csdn.net/shahuhu000/article/details/83965642" target="_blank" rel="noopener">git clone速度太慢的解决办法</a>进行配置，发现还是未解决，自己在命令前加proxychains代理也不行，因为是程序内部调用系统网络去下载文件，代理命令无效，经过多次尝试后，自己打算通过浏览器下载一个文件试试，如<code>https://github.com/bazelbuild/rules_closure/archive/9889e2348259a5aad7e805547c1a0cf311cfcd91.tar.gz</code>,发现下载的挺快的，是因为代理，而自己直接调用wget命令发现好慢，同时还发现了该文件的最终下载域名为：<code>codeload.github.com</code>，后来自己参考那个教程在<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a>里搜索得到了对应的ip并将其和ip加到hosts文件中，如图所示：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-fd9a41f6f7f22dd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hosts文件相关内容"><br>速度一下就快了不少，虽说只有几十k，但是也比之前的几十几百b强，同时安装也不报下载文件失败访问不了文件的错误了。</p><p>后来又遇到：<code>invalid conversion from &#39;const char*&#39; to &#39;char*&#39;</code>这样的代码error，于是网上找到了<a href="http://www.voidcn.com/article/p-kcvnjpwx-bcm.html" target="_blank" rel="noopener">invalid conversion from ‘const char<em>‘ to ‘char</em>‘ 的解决方法</a>这篇文章，于是便修改了报错处的源码，重新继续编译，看着编译进行的挺顺利，自己还蛮开心的，可谁知命运给自己开的玩笑才刚刚开始。</p><p>经过了漫长的编译时间，突然又报错了，说是什么文件访问失败，没有剩余空间了，当时我就蒙了，这是咋回事，后来发现：根目录所在分区满了，安装过程中所有文件都保存在根目录所在分区，即已经到了30G了，使用<code>df -h</code>命令查看所在分区使用率已经到了100%，我擦！！！</p><p>这可如何是好，没想到编译个tensorflow这么占存储空间，后来网上查找相关案例和解决方案，暂时只是把用不到的大软件卸载了，如Clion，发现效果不明显，还是占用了29G多，于是心想：老子不装了，不装了还不行吗，回归pytorch，pytorch才是老纸的真爱，卸载之后发现：使用率还是90%，这这这，后来想到满了那就扩充啊，于是就在网上找扩充根目录分区的方法教程，然而历史说明正是这一步开始使我踏进了深渊。</p><p>网上搜了不少方法，发现许多都不好使，同时分区满了我装个软件都装不了了，感觉要炸！发现有个说法说在拓展分区之前要先挂载，于是我就尝试着把根目录所在分区给挂载掉了，在卸载时还提示错误，说<code>device is busy</code>，于是网上找到类似如<a href="https://blog.csdn.net/hello5orld/article/details/12048323" target="_blank" rel="noopener">linux umount命令介绍与device is busy解决方法</a>的答案，于是敲下了罪恶的<code>umount -l /</code>，后来系统崩了，重启，发现又好了，哈哈。</p><p>后来就想着硬盘F盘还有剩余空间，想划分出来给根目录所在分区，经过尝试之后发现直接划分不行，因为自己没有搞lvm，不能通过卷组或逻辑卷相关的指令操作来进行，后来发现了一个可行的法子是把硬盘中根目录所在分区位置后面的空间腾出来，然后便可以扩充了，把原来的数据放到其他位置就可以了，于是通过这样的操作进行了var挂载分区的移动，感觉还不错，其中主要参考的是<a href="https://blog.csdn.net/u010359398/article/details/83024585" target="_blank" rel="noopener">linux(manjaro)磁盘迁移/opt /home</a>,而在进行boot分区的移动时发现自己未成功进行boot分区的重新挂载，于是系统又崩了，重启也报错了，进入grub rescue模式中，此时有点慌了，后来找到类似该篇博客<a href="http://xstarcd.github.io/wiki/Linux/grub_rescue.html" target="_blank" rel="noopener">grub rescue救援模式的处理</a>所说内容,重新挂载了boot目录，并且重新生成grub配置文件，于是问题解决了。</p><p>之后在进行home分区的操作时自己忘记了备份，直接挂载和格式化掉了（通过 <code>mkfs.ext4 /dev/sda*</code>)，发现出了问题之后重新登录都登录不了，因为相关用户信息都没了，只能进入命令行界面，同时home目录为空，后来在各分区找了半天发现没有找到备份，这时自己真的慌掉了，还有不少数据呢，比如项目代码、还有博客环境配置和博客原文件等，找了半天都没能找到可行的办法，因为系统都登录不进去，连修复软件啥的都安装不了，况且天色已晚，于是就先睡了。</p><p>等到第二天自己想到可以在window系统上安装然后修复那个分区的数据吧？于是先尝试了DiskGenius软件，发现好像它识别的分区不全，并且也只能恢复文件，会丢失文件名等信息，这样也仅是得到一些文件，不是整体的恢复分区，而后又下载了testdisk软件，经过一阵蒙蔽的操作之后，发现自己的D盘和E盘也不见了，赶忙重启发现还是没有，由于许多软件都是安装在D盘上，所以导致window系统下的环境也出问题了，要炸啊，幸亏自己的chrome浏览器在C盘装的，又下载了DiskGenius，发现还要注册，还挺麻烦，于是又尝试下了绿色破解版，经过扫描，找到了丢失的D盘和E盘，只是其他数据全部都没有了（指manjaro系统下全部信息）。哎，一声长叹之后只能重新再装系统了。</p><p>只是可惜了当时探索了不少软件，同时还有不少有用的数据资料，还有自己最新的代码，以及最新的博客环境配置文件和最新的博客原文件。</p><p>而后再划分分区安装的时候，有了之前的教训和探索，自己对分区的理解更加深刻，于是在划分时感觉熟悉了好多，把整个300G空间全部给新系统了，同时多分配了一些空间给根目录和var目录所在分区。<br>后来重装系统，还好自己当时写了安装记录的博客在网上可以看，于是又重新安装配置环境，配置NVIDIA独显，配置科学上网，后来心想以后再做记录先只在简书和有道上吧，自己的博客先不管了吧，毕竟环境也丢了，能找到的是好久之前的了，要配置还挺麻烦，博客内容自己自己也增删改的比较多，再捡起来比较耗时，于是暂时就不考虑维护自己的博客了，之前也尝试在知乎专栏和简书上写文章，发现简书支持Markdown效果很好，而知乎则导入效果很差，于是便最终选择了简书作为最终的自己发布内容的平台啦。</p><p>后来重新参考之前提到的编译tensorflow的那篇文章，还是只能master分支，还是要配置hosts文件中github对应域名和ip，不过编译的还挺顺利的，不过还是要好久，最终吃了个晚饭，回来发现又报错了，我真的快要崩溃了，报<code>ImportError: No module named keras.preprocessing</code>的错误，后来我就想是不是版本问题，于是切换r1.12和r1.10，发现还是报bazel.rc文件的错，于是又切换回master分支，继续网上找相关问题和答案，并在github上成功找到了答案：<a href="https://github.com/tensorflow/tensorflow/issues/21518" target="_blank" rel="noopener">1.10 build fails with “No module named ‘keras_applications’” </a>,即通过pip安装<code>keras_applications</code>和<code>keras_preprocessing</code>这两个库。</p><p>后来重新执行编译命令，又等待了好一会儿（比之前快多了，因为有缓存之前的编译结果），终于成功了哈哈哈！后来经过测试，发现编译成功，tensorflow已经被正常安装在自己的pip列表中了。<br>以下是耗时截图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-3ba18c678c7dac3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首次编译失败"></p><p><img src="https://upload-images.jianshu.io/upload_images/5410339-83509b2c57fff653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重新编译再次报错"></p><p><img src="https://upload-images.jianshu.io/upload_images/5410339-70ee9366ed2f06f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终编译成功"></p><p>安装tensorflow的whl包后，发现安装的就是现行版r1.12。。。<br><img src="https://upload-images.jianshu.io/upload_images/5410339-3a3842b594259304.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tensorflow_whl文件.png"></p><p>这里是分区使用率截图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-54ced4e0add7f3a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分区使用率截图"></p><p>相比而言，pytorch安装就要简单许多了，并且提供了许多预编译好的可选。</p><p>在这里自己简单记录一下心酸的历程，也提醒各位看客同样需要编译tensorflow时留意自己的分区使用率～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了安装tensorflow，导致我Linux系统重装，Windows系统差点也没了，哎。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/categories/Manjaro/"/>
    
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/tags/Manjaro/"/>
    
      <category term="Tensorflow" scheme="http://www.iamlightsmile.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro下使用图床工具PicGo</title>
    <link href="http://www.iamlightsmile.com/Manjaro%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7PicGo/"/>
    <id>http://www.iamlightsmile.com/Manjaro下使用图床工具PicGo/</id>
    <published>2019-04-03T06:12:47.000Z</published>
    <updated>2019-04-03T06:16:37.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>在这里简单吐槽以下简书的锁定文章的功能，真是日了狗了！</p><p>因为觉得简书的锁定的文章的功能太恶心，不想受制于人，于是想回到自己的个人博客-Github Pages + Hexo，于是此时图床的问题就来了，原来自己的主要实现逻辑是将图片首先先上传到Github的一个仓库中，写了一个<code>auto_run.sh</code>，然后在浏览器中右击图片得到Markdown格式下的图片连接（自己写了一个<a href="https://github.com/smilelight/GithubImagePace" target="_blank" rel="noopener">浏览器插件</a>），但是还是有些麻烦。</p><a id="more"></a><p>后来网上搜索相关图床工具，得到的方案如下：</p><ol><li>搭建私有图床<br>如：<a href="https://canmipai.com/index.php/2017/12/05/setup_chevereto_free_image_host/" target="_blank" rel="noopener">使用Chevereto搭建免费私有图床</a></li><li>使用付费图床或免费图床，同时可以配合开源跨平台的的工具<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a><br>付费的如：又拍云、腾讯云、阿里云、七牛云、微博<br>免费的如：Github</li><li>其他相对非主流方案</li></ol><p>权衡之后选择使用第二种方案，对于图床而言，自己选择Github，因为有的图床存储还要求备案，如七牛云，很是麻烦。</p><h1 id="1-下载安装PicGo"><a href="#1-下载安装PicGo" class="headerlink" title="1. 下载安装PicGo"></a>1. 下载安装<code>PicGo</code></h1><p>使用如下命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yay -S picgo-appimage</span></span><br></pre></td></tr></table></figure></p><p>这里对于arch系来说不算友好，因为如Windows平台、Mac平台以及其他主流Linux系统如Ubuntu等等都有预编译安装包，而对于arch而言要自己下载编译得到<code>appimage</code>形式的可执行软件包。</p><h1 id="2-设置Github仓库"><a href="#2-设置Github仓库" class="headerlink" title="2. 设置Github仓库"></a>2. 设置Github仓库</h1><p>略，可参考最后链接给出文章。</p><h1 id="3-设置仓库信息"><a href="#3-设置仓库信息" class="headerlink" title="3. 设置仓库信息"></a>3. 设置仓库信息</h1><p>略，可参考最后链接给出文章。<br>不过我这里不知为何设置网络代理并没有成功,同时实际使用时复制速度挺慢的，不知为何。</p><h1 id="4-上传测试"><a href="#4-上传测试" class="headerlink" title="4. 上传测试"></a>4. 上传测试</h1><p><img src="https://upload-images.jianshu.io/upload_images/5410339-d0b6dc8b410c52ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="相册"></p><h1 id="5-下载其他依赖"><a href="#5-下载其他依赖" class="headerlink" title="5. 下载其他依赖"></a>5. 下载其他依赖</h1><p>如果要使用快捷上传的粘贴板功能时，如图：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-402bc8afdf924375.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="粘贴板功能"></p><p>还需要下载<code>xclip</code>包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S xclip</span><br></pre></td></tr></table></figure></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>发现PicGo这个软件还真是挺不错的，同时还了解了<a href="https://appimage.org/" target="_blank" rel="noopener">appimage</a>这种软件形式</p><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h1><ol><li><a href="https://superuser.com/questions/1306621/install-appimage-under-arch-linux" target="_blank" rel="noopener">Install Appimage under Arch Linux</a></li><li><a href="https://www.jianshu.com/p/9d91355e8418" target="_blank" rel="noopener">图床工具的使用—-PicGo</a></li><li><a href="https://www.jianshu.com/p/2756724a5dee" target="_blank" rel="noopener">PicGo+GitHub图床，让Markdown飞</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h1&gt;&lt;p&gt;在这里简单吐槽以下简书的锁定文章的功能，真是日了狗了！&lt;/p&gt;
&lt;p&gt;因为觉得简书的锁定的文章的功能太恶心，不想受制于人，于是想回到自己的个人博客-Github Pages + Hexo，于是此时图床的问题就来了，原来自己的主要实现逻辑是将图片首先先上传到Github的一个仓库中，写了一个&lt;code&gt;auto_run.sh&lt;/code&gt;，然后在浏览器中右击图片得到Markdown格式下的图片连接（自己写了一个&lt;a href=&quot;https://github.com/smilelight/GithubImagePace&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浏览器插件&lt;/a&gt;），但是还是有些麻烦。&lt;/p&gt;
    
    </summary>
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/categories/Manjaro/"/>
    
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/tags/Manjaro/"/>
    
  </entry>
  
  <entry>
    <title>python库打包分发</title>
    <link href="http://www.iamlightsmile.com/python%E5%BA%93%E6%89%93%E5%8C%85%E5%88%86%E5%8F%91/"/>
    <id>http://www.iamlightsmile.com/python库打包分发/</id>
    <published>2019-02-02T05:11:46.000Z</published>
    <updated>2019-04-03T05:36:18.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python库打包分发"><a href="#Python库打包分发" class="headerlink" title="Python库打包分发"></a>Python库打包分发</h1><p>主要有以下步骤：</p><ol><li>注册PyPI账号（执行一次）</li><li>安装打包分发工具（执行一次）</li><li>编写setup.py文件</li><li>通过命令打包分发</li></ol><a id="more"></a><h2 id="1-注册PyPI账号"><a href="#1-注册PyPI账号" class="headerlink" title="1.注册PyPI账号"></a>1.注册PyPI账号</h2><p>进入<a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a>的官网，进去注册账号密码，绑定邮箱等。</p><p>在成功注册账号之后，创建<code>～/.pypirc</code>文件，在文件中配置自己的PyPI访问地址和账号密码等信息，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers = pypi</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">username:xxx</span><br><span class="line">password:xxx</span><br></pre></td></tr></table></figure><h2 id="2-安装打包分发工具"><a href="#2-安装打包分发工具" class="headerlink" title="2.安装打包分发工具"></a>2.安装打包分发工具</h2><p>这里通过twine来打包安装。</p><p>通过以下命令下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twine</span><br></pre></td></tr></table></figure><h2 id="3-编写setup-py文件"><a href="#3-编写setup-py文件" class="headerlink" title="3.编写setup.py文件"></a>3.编写setup.py文件</h2><p>格式不再详述，具体查看参考1. 举例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./README.md'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    long_description = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./requirements.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    install_requires = list(map(<span class="keyword">lambda</span> x: x.strip(), f.readlines()))</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">'lightNLP'</span>,</span><br><span class="line">    version=<span class="string">'0.3.2.0'</span>,</span><br><span class="line">    description=<span class="string">"lightsmile's nlp library"</span>,</span><br><span class="line">    author=<span class="string">'lightsmile'</span>,</span><br><span class="line">    author_email=<span class="string">'iamlightsmile@gmail.com'</span>,</span><br><span class="line">    url=<span class="string">'https://github.com/smilelight/lightNLP'</span>,</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    install_requires=install_requires,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">'text/markdown'</span>,</span><br><span class="line">    license=<span class="string">'Apache-2.0'</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">'Development Status :: 4 - Beta'</span>,</span><br><span class="line">        <span class="string">'Operating System :: OS Independent'</span>,</span><br><span class="line">        <span class="string">'Intended Audience :: Developers'</span>,</span><br><span class="line">        <span class="string">'License :: OSI Approved :: BSD License'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.6'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.7'</span>,</span><br><span class="line">        <span class="string">'Topic :: Software Development :: Libraries'</span></span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-通过命令打包分发"><a href="#4-通过命令打包分发" class="headerlink" title="4.通过命令打包分发"></a>4.通过命令打包分发</h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>在setup.py文件目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure><h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p>在setup.py文件目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>之后便可以登录PyPI网站查看自己的projects了。需要注意的是新建包的名字不能在忽视大小写情况下和其他包重复。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.konghy.cn/2018/04/29/setup-dot-py/" target="_blank" rel="noopener">Python 库打包分发(setup.py 编写)简易指南</a></li><li><a href="https://pypi.org/project/twine/" target="_blank" rel="noopener">pypi twine</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python库打包分发&quot;&gt;&lt;a href=&quot;#Python库打包分发&quot; class=&quot;headerlink&quot; title=&quot;Python库打包分发&quot;&gt;&lt;/a&gt;Python库打包分发&lt;/h1&gt;&lt;p&gt;主要有以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册PyPI账号（执行一次）&lt;/li&gt;
&lt;li&gt;安装打包分发工具（执行一次）&lt;/li&gt;
&lt;li&gt;编写setup.py文件&lt;/li&gt;
&lt;li&gt;通过命令打包分发&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.iamlightsmile.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.iamlightsmile.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro设置交换分区</title>
    <link href="http://www.iamlightsmile.com/Manjaro%E8%AE%BE%E7%BD%AE%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/"/>
    <id>http://www.iamlightsmile.com/Manjaro设置交换分区/</id>
    <published>2019-01-24T05:11:13.000Z</published>
    <updated>2019-04-03T05:36:20.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>在安装Manjaro系统的时候发现自己没有设置交换分区，用<code>htop</code>命令发现是空的，所以这里通过后续的命令配置交换分区。</p><a id="more"></a><h1 id="1-查看磁盘信息"><a href="#1-查看磁盘信息" class="headerlink" title="1.查看磁盘信息"></a>1.查看磁盘信息</h1><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><p>得到如下信息：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-306e66037dbfb4e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cmd_fdisk.png"></p><h1 id="2-查看挂载状态"><a href="#2-查看挂载状态" class="headerlink" title="2.查看挂载状态"></a>2.查看挂载状态</h1><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid -o list</span><br></pre></td></tr></table></figure><p>得到如下信息：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-930b0da13da48867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cmd_blkid.png"></p><h1 id="3-设置交换分区"><a href="#3-设置交换分区" class="headerlink" title="3.设置交换分区"></a>3.设置交换分区</h1><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/sd**</span><br></pre></td></tr></table></figure><p>其中**用具体某个分区名替换，如：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-8b075fa024b217f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cmd_mkswap.png"></p><h1 id="4-启用交换分区"><a href="#4-启用交换分区" class="headerlink" title="4.启用交换分区"></a>4.启用交换分区</h1><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /dev/sd**</span><br></pre></td></tr></table></figure><p>其中**用具体某个分区名替换，如：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-536acb23d33857d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cmd_swapon.png"></p><h1 id="5-查看交换分区状态"><a href="#5-查看交换分区状态" class="headerlink" title="5.查看交换分区状态"></a>5.查看交换分区状态</h1><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon -s</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><p>如：<br><img src="https://upload-images.jianshu.io/upload_images/5410339-79bc3c558b359112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cmd_swapon_s.png"></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h1><p>至此便设置交换分区成功了。</p><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7.参考"></a>7.参考</h1><ul><li><a href="https://wiki.archlinux.org/index.php/Swap_\(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target="_blank" rel="noopener">Swap (简体中文)</a>)</li><li><a href="https://blog.sbot.io/articles/7" target="_blank" rel="noopener">Linux系统下如何查看所有存储设备（磁盘分区）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h1&gt;&lt;p&gt;在安装Manjaro系统的时候发现自己没有设置交换分区，用&lt;code&gt;htop&lt;/code&gt;命令发现是空的，所以这里通过后续的命令配置交换分区。&lt;/p&gt;
    
    </summary>
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/categories/Manjaro/"/>
    
    
      <category term="Manjaro" scheme="http://www.iamlightsmile.com/tags/Manjaro/"/>
    
  </entry>
  
</feed>
