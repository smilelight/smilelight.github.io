<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lightsmile&#39;s Blog</title>
  
  <subtitle>lightsmile</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.iamlightsmile.com/"/>
  <updated>2020-12-31T08:17:47.639Z</updated>
  <id>https://www.iamlightsmile.com/</id>
  
  <author>
    <name>lightsmile</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器被挖矿的入侵了</title>
    <link href="https://www.iamlightsmile.com/articles/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%9A%84%E5%85%A5%E4%BE%B5%E4%BA%86/"/>
    <id>https://www.iamlightsmile.com/articles/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%9A%84%E5%85%A5%E4%BE%B5%E4%BA%86/</id>
    <published>2020-12-31T08:06:16.000Z</published>
    <updated>2020-12-31T08:17:47.639Z</updated>
    
    <content type="html"><![CDATA[<p>今天连一台腾讯云服务器的时候，发现网络可以建立连接，但是特别的卡，不知道咋回事，最开始还以为是网络慢。后来<code>htop</code>命令查看了一下进程，好家伙，CPU都被占满了，这是什么鬼？！并且怎么还跑着奇奇怪怪的不知道啥名字的程序？！</p><p>此时心里一惊，坏了，不会被黑客入侵了吧。。。然后大概网上搜了一下，果然情况和参考中两篇链接几乎一致，淦！</p><a id="more"></a><p>我是昨天刚在服务器上配置的hadoop用户密码，结果今天就被入侵了，然而腾讯云也没有任何报警提示，我服了。偷袭我一个Linux新手？我大意了啊，没防住~</p><p>担心自己处理不好还是留下后门，于是乎只能把服务器上的数据拷贝到本地，然后再重装系统了。</p><p>哎，2020果然不顺，最后一天都是如此悲催，希望2021能有好运气和好收获吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.v2ex.com/t/683249" target="_blank" rel="noopener">跟着网上博客的教程安装 hadoop，然后我的服务器就被入侵了 - V2EX</a></li><li><a href="https://blog.csdn.net/subfate/article/details/106546646" target="_blank" rel="noopener">记一次ubuntu虚拟机被挖矿木马攻击的过程_李迟的专栏-CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天连一台腾讯云服务器的时候，发现网络可以建立连接，但是特别的卡，不知道咋回事，最开始还以为是网络慢。后来&lt;code&gt;htop&lt;/code&gt;命令查看了一下进程，好家伙，CPU都被占满了，这是什么鬼？！并且怎么还跑着奇奇怪怪的不知道啥名字的程序？！&lt;/p&gt;
&lt;p&gt;此时心里一惊，坏了，不会被黑客入侵了吧。。。然后大概网上搜了一下，果然情况和参考中两篇链接几乎一致，淦！&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://www.iamlightsmile.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="hadoop" scheme="https://www.iamlightsmile.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch设置自定义词典与停用词</title>
    <link href="https://www.iamlightsmile.com/articles/elasticsearch%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%85%B8%E4%B8%8E%E5%81%9C%E7%94%A8%E8%AF%8D/"/>
    <id>https://www.iamlightsmile.com/articles/elasticsearch%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%8D%E5%85%B8%E4%B8%8E%E5%81%9C%E7%94%A8%E8%AF%8D/</id>
    <published>2020-12-29T06:40:57.000Z</published>
    <updated>2020-12-29T07:10:06.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>处于项目需要，我们需要在elasticsearch中设置自定义的词典与停用词，这里简单说明下其配置方法。</p><p>自己这里是通过docker以及docker-compose的方式来使用的，直接使用elasticsearch的方法流程与之类似，可以看下面的参考。</p><a id="more"></a><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>项目目录结构大致如下：</p><pre><code class="lang-bash">(base) ➜  elasticsearch tree ..├── config│   ├── IKAnalyzer.cfg.xml│   ├── stopwords.dic│   └── userwords.dic├── docker-compose.yml└── Dockerfile1 directory, 5 files</code></pre><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><code>Dockerfile</code></h3><p>其中<code>Dockerfile</code>中内容如下：</p><pre><code class="lang-Dockerfile">FROM elasticsearch:7.7.1RUN yes | ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.1/elasticsearch-analysis-ik-7.7.1.zip</code></pre><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h3><p>其中<code>docker-compose.yml</code>中内容如下：</p><pre><code class="lang-yaml">version: &#39;3&#39;services:    es:        image: elasticsearch-ik:7.7.1        container_name: elasticsearch        network_mode: &quot;host&quot;        environment:             - discovery.type=single-node        ports:            - 9200:9200            - 9300:9300        volumes:             - ./config/IKAnalyzer.cfg.xml:/usr/share/elasticsearch/config/analysis-ik/IKAnalyzer.cfg.xml            - ./config/userwords.dic:/usr/share/elasticsearch/config/analysis-ik/userwords.dic            - ./config/stopwords.dic:/usr/share/elasticsearch/config/analysis-ik/stopwords.dic</code></pre><h3 id="IKAnalyzer-cfg-xml"><a href="#IKAnalyzer-cfg-xml" class="headerlink" title="IKAnalyzer.cfg.xml"></a><code>IKAnalyzer.cfg.xml</code></h3><p>其中<code>IKAnalyzer.cfg.xml</code>中内容如下：</p><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;&lt;properties&gt;    &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;    &lt;!--用户可以在这里配置自己的扩展字典 --&gt;    &lt;entry key=&quot;ext_dict&quot;&gt;userwords.dic&lt;/entry&gt;     &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;    &lt;entry key=&quot;ext_stopwords&quot;&gt;stopwords.dic&lt;/entry&gt;    &lt;!--用户可以在这里配置远程扩展字典 --&gt;    &lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;    &lt;!--用户可以在这里配置远程扩展停止词字典--&gt;    &lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;&lt;/properties&gt;</code></pre><h3 id="stopwords-dic"><a href="#stopwords-dic" class="headerlink" title="stopwords.dic"></a><code>stopwords.dic</code></h3><p>其中<code>stopwords.dic</code>内容如下：</p><pre><code class="lang-dic">吃</code></pre><h3 id="userwords-dic"><a href="#userwords-dic" class="headerlink" title="userwords.dic"></a><code>userwords.dic</code></h3><p>其中<code>userwords.dic</code>内容如下：</p><pre><code class="lang-dic">曹操和李德方</code></pre><h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h2><pre><code class="lang-bash">docker-compose up -d</code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>效果如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/elasticsearch_userdict.png" alt="elasticsearch_userdict"></p><p>可以看到，里面<code>李德方</code>、<code>曹操和</code>分别作为词语被拆分出来，同时<code>吃</code>这个词直接就被过滤掉了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">medcl/elasticsearch-analysis-ik: The IK Analysis plugin integrates Lucene IK analyzer into elasticsearch, support customized dictionary.</a></li><li><a href="https://www.jianshu.com/p/f178e59ffaf2" target="_blank" rel="noopener">ElasticSearch-IK分词使用踩坑总结 - 简书</a></li><li><a href="https://zq99299.github.io/note-book/elasticsearch-senior/ik/31-config.html#%E4%B8%BB%E8%A6%81%E9%85%8D%E7%BD%AE%E8%A7%A3%E8%AF%B4" target="_blank" rel="noopener">IK 分词器配置文件和自定义词库 | Mrcode 笔记本</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;处于项目需要，我们需要在elasticsearch中设置自定义的词典与停用词，这里简单说明下其配置方法。&lt;/p&gt;
&lt;p&gt;自己这里是通过docker以及docker-compose的方式来使用的，直接使用elasticsearch的方法流程与之类似，可以看下面的参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="elasticsearch" scheme="https://www.iamlightsmile.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>折腾tmux</title>
    <link href="https://www.iamlightsmile.com/articles/%E6%8A%98%E8%85%BEtmux/"/>
    <id>https://www.iamlightsmile.com/articles/%E6%8A%98%E8%85%BEtmux/</id>
    <published>2020-12-17T01:47:15.000Z</published>
    <updated>2020-12-28T07:00:20.883Z</updated>
    
    <content type="html"><![CDATA[<p>有2台腾讯云服务器，一台之前装过brat，成功了。后来打算在新的更好配置的服务器上装brat，没想到总是失败，要么浏览器显示的样式有问题，要么就是打开链接直接重定向要下载文件。</p><a id="more"></a><p>于是乎决定只能在原来的服务器上做标注，考虑到持续使用，所以打算用tmux。没想到直接tmux报错，tmux报<code>can&#39;t create socket</code>的错误，yum提示<code>could not resolve host: mirrors.tencentyun.com; unknown error</code>的错误，更可怕的是ping 外网都ping不通。</p><p>后来参考<a href="https://www.jianshu.com/p/a80189d68104" target="_blank" rel="noopener">腾讯云服务器 “Could not resolve host: mirrors.tencentyun.com; Unknown error” - 简书</a>、<a href="https://blog.csdn.net/shengshengshiwo/article/details/84191515" target="_blank" rel="noopener">mirrors.tencentyun.com 又挂了！_BLUEHEART-CSDN博客</a>以及<a href="https://cloud.tencent.com/developer/article/1464422" target="_blank" rel="noopener">CentOS修改各大yum源(centos5,centos6,centos7) - 云+社区 - 腾讯云</a>对yum源进行了配置，如：</p><pre><code class="lang-bash">cd /etc/yum.repos.dmv CentOS-Base.repo CentOS-Base.repo.backupwget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repoyum clean allyum makecacheyum update</code></pre><p>以及修改了<code>/etc/yum.repos.d/CentOS-Epel.repo</code>文件，如下：</p><pre><code class="lang-conf">[epel]name=EPEL for redhat/centos $releasever - $basearchfailovermethod=prioritygpgcheck=1gpgkey=http://mirrors.163.com/epel/RPM-GPG-KEY-EPEL-7enabled=0baseurl=http://mirrors.163.com/epel/$releasever/$basearch/</code></pre><p>然后解决了yum问题。</p><p>没想到tmux还是不行，后来找到了<a href="https://github.com/MachinaCore/CygwinPortable/issues/28" target="_blank" rel="noopener">tmux can’t create socket: Permission denied · Issue #28 · MachinaCore/CygwinPortable</a>通过在zshrc中配置<code>alias tmux=&#39;tmux -S ~/.tmsock new -ADsCyg&#39;</code>暂时解决了这个问题。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jianshu.com/p/a80189d68104" target="_blank" rel="noopener">腾讯云服务器 “Could not resolve host: mirrors.tencentyun.com; Unknown error” - 简书</a></li><li><a href="https://blog.csdn.net/shengshengshiwo/article/details/84191515" target="_blank" rel="noopener">mirrors.tencentyun.com 又挂了！_BLUEHEART-CSDN博客</a></li><li><a href="https://cloud.tencent.com/developer/article/1464422" target="_blank" rel="noopener">CentOS修改各大yum源(centos5,centos6,centos7) - 云+社区 - 腾讯云</a></li><li><a href="https://github.com/MachinaCore/CygwinPortable/issues/28" target="_blank" rel="noopener">tmux can’t create socket: Permission denied · Issue #28 · MachinaCore/CygwinPortable</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有2台腾讯云服务器，一台之前装过brat，成功了。后来打算在新的更好配置的服务器上装brat，没想到总是失败，要么浏览器显示的样式有问题，要么就是打开链接直接重定向要下载文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="centos" scheme="https://www.iamlightsmile.com/tags/centos/"/>
    
      <category term="tmux" scheme="https://www.iamlightsmile.com/tags/tmux/"/>
    
      <category term="brat" scheme="https://www.iamlightsmile.com/tags/brat/"/>
    
  </entry>
  
  <entry>
    <title>python离线安装包及其依赖包（转载）</title>
    <link href="https://www.iamlightsmile.com/articles/python%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E5%8F%8A%E5%85%B6%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>https://www.iamlightsmile.com/articles/python%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E5%8F%8A%E5%85%B6%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</id>
    <published>2020-12-14T00:57:38.000Z</published>
    <updated>2020-12-14T01:24:34.222Z</updated>
    
    <content type="html"><![CDATA[<p>在内网环境只能本地方式安装需要的包，需要在公网机器上下载需要的包及相应依赖包，传输至内网进行安装。以win10系统python 3.7.3为例：</p><a id="more"></a><p>安装pipdeptree：</p><pre><code class="lang-bash">PS D:\test&gt; pip install pipdeptree</code></pre><p>假如想在内网安装flask，先在外网下载安装：</p><pre><code class="lang-bash">PS D:\test&gt; pip install flask</code></pre><p>使用pipdeptree 查看并生成requirements.txt</p><pre><code class="lang-bash">PS D:\test&gt; pipdeptree -f  -p flaskFlask==1.1.2  click==7.1.2  itsdangerous==1.1.0  Jinja2==2.11.2    MarkupSafe==1.1.1  Werkzeug==1.0.1PS D:\test&gt; pipdeptree -f  -p flask &gt; .\requirements.txt</code></pre><p>下载所有包至本地</p><pre><code class="lang-bash">PS D:\test&gt; pip download -r .\requirements.txt</code></pre><p>将test文件夹拷贝至内网机器（如F:/test），进入test目录执行如下命令离线安装</p><pre><code class="lang-bash">PS F:\test&gt; pip install --no-index --find-links=./ -r requirements.txt</code></pre><p>转自：<a href="https://www.jianshu.com/p/9a726dc64e2b" target="_blank" rel="noopener">python 离线安装包及其依赖包 - 简书</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在内网环境只能本地方式安装需要的包，需要在公网机器上下载需要的包及相应依赖包，传输至内网进行安装。以win10系统python 3.7.3为例：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>支持正版</title>
    <link href="https://www.iamlightsmile.com/articles/%E6%94%AF%E6%8C%81%E6%AD%A3%E7%89%88/"/>
    <id>https://www.iamlightsmile.com/articles/%E6%94%AF%E6%8C%81%E6%AD%A3%E7%89%88/</id>
    <published>2020-12-03T02:23:12.000Z</published>
    <updated>2020-12-03T02:38:58.150Z</updated>
    
    <content type="html"><![CDATA[<p>昨天Pycharm又提示激活码失效了。</p><a id="more"></a><p>关于Python开发，对我个人而言目前来说Pycharm专业版占主体，VSCode用于轻量开发场景。</p><p>关于Pycharm的破解使用，最开始是网上找的博客教程里面提到的免费的破解码，后来是通过淘宝购买的公用教育邮箱的法子，不过今天终于下决心决定支持正版了。</p><p>关于Pycharm，目前个人理解是自己这几年里使用这个工具收获良多，心怀感激之情，所以也应该为信仰充值，一如在Steam上购买正版游戏一样。</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/pycharm2.png" alt="Pycharm2"></p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/pycharm.png" alt="Pycharm"></p><p>另外，其实JetBrains的产品也不算太贵，通过数码荔枝渠道：<a href="https://store.lizhi.io/site/products/id/291" target="_blank" rel="noopener">PyCharm: JetBrains 专业级Python IDE - 荔枝软件商店</a>单购买Pycharm目前一年只需要569，并且可以永久使用该版本。</p><p>实在不想花这份钱的也可以选择通过开源项目申请的方式，具体可以参考：<a href="https://zhuanlan.zhihu.com/p/87370573" target="_blank" rel="noopener">免费获取JetBrains全家桶正版License教程!! - 知乎</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天Pycharm又提示激活码失效了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随念" scheme="https://www.iamlightsmile.com/categories/%E9%9A%8F%E5%BF%B5/"/>
    
    
      <category term="JetBrains" scheme="https://www.iamlightsmile.com/tags/JetBrains/"/>
    
      <category term="Pycharm" scheme="https://www.iamlightsmile.com/tags/Pycharm/"/>
    
      <category term="正版" scheme="https://www.iamlightsmile.com/tags/%E6%AD%A3%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>使用frp实现通过ssh访问内网机器</title>
    <link href="https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%BF%87ssh%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%BA%E5%99%A8/"/>
    <id>https://www.iamlightsmile.com/articles/%E4%BD%BF%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%BF%87ssh%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%BA%E5%99%A8/</id>
    <published>2020-11-28T02:30:09.000Z</published>
    <updated>2020-11-28T02:40:29.963Z</updated>
    
    <content type="html"><![CDATA[<p>内网机配置如下：</p><pre><code class="lang-ini">[common]server_addr = x.x.x.xserver_port = 7000[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22remote_port = 8555</code></pre><p>公网代理机器配置：</p><pre><code class="lang-ini">[common]bind_port = 7000</code></pre><p>然后便可以通过<code>ssh -p 8555 username@x.x.x.x</code>方式连接了。</p><p>参考：<a href="https://gofrp.org/docs/examples/ssh/" target="_blank" rel="noopener">通过 SSH 访问内网机器 | frp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内网机配置如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ini&quot;&gt;[common]
server_addr = x.x.x.x
server_port = 7000

[ssh]
type = tcp
local_ip = 127.0.0.1
local_p
      
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="frp" scheme="https://www.iamlightsmile.com/tags/frp/"/>
    
      <category term="内网穿透" scheme="https://www.iamlightsmile.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>centos安装mkcert</title>
    <link href="https://www.iamlightsmile.com/articles/centos%E5%AE%89%E8%A3%85mkcert/"/>
    <id>https://www.iamlightsmile.com/articles/centos%E5%AE%89%E8%A3%85mkcert/</id>
    <published>2020-11-19T02:26:47.000Z</published>
    <updated>2020-11-19T02:28:29.627Z</updated>
    
    <content type="html"><![CDATA[<p>没想到安装个mkcert还挺麻烦的，在网上找到教程，基本上都是直接<code>brew install mkcert</code>，但是这个brew基本上是mac专属命令，当然安装到linux上之后提示不能以root权限运行brew，-_-||。</p><a id="more"></a><p>按照mkcert Github上的安装说明通过源码安装，又首先需要安装go，安装完之后又提示有其他问题，终于发现了这个mkcert的预构建版本。</p><p>在centos下安装命令大致如下：</p><pre><code class="lang-bash">wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.2/mkcert-v1.4.2-linux-amd64cp mkcert-v1.4.2-linux-amd64 /usr/local/bin/mkcertchmod +x /usr/local/bin/mkcertln -snvf /usr/local/bin/mkcert /usr/bin/mkcert</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没想到安装个mkcert还挺麻烦的，在网上找到教程，基本上都是直接&lt;code&gt;brew install mkcert&lt;/code&gt;，但是这个brew基本上是mac专属命令，当然安装到linux上之后提示不能以root权限运行brew，-_-||。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.iamlightsmile.com/categories/Linux/"/>
    
    
      <category term="centos" scheme="https://www.iamlightsmile.com/tags/centos/"/>
    
      <category term="mkcert" scheme="https://www.iamlightsmile.com/tags/mkcert/"/>
    
  </entry>
  
  <entry>
    <title>部署自签名https</title>
    <link href="https://www.iamlightsmile.com/articles/%E9%83%A8%E7%BD%B2%E8%87%AA%E7%AD%BE%E5%90%8Dhttps/"/>
    <id>https://www.iamlightsmile.com/articles/%E9%83%A8%E7%BD%B2%E8%87%AA%E7%AD%BE%E5%90%8Dhttps/</id>
    <published>2020-11-19T02:24:02.000Z</published>
    <updated>2020-11-19T03:11:36.999Z</updated>
    
    <content type="html"><![CDATA[<p>需要用到<code>mkcert</code>，安装方式请参考：<a href="http://www.iamlightsmile.com/articles/centos%E5%AE%89%E8%A3%85mkcert/">centos安装mkcert - lightsmile’s Blog</a></p><a id="more"></a><h2 id="1-部署流程"><a href="#1-部署流程" class="headerlink" title="1.部署流程"></a>1.部署流程</h2><h3 id="1-1-将CA证书加入本地可信CA（可选）"><a href="#1-1-将CA证书加入本地可信CA（可选）" class="headerlink" title="1.1 将CA证书加入本地可信CA（可选）"></a>1.1 将CA证书加入本地可信CA（可选）</h3><pre><code class="lang-bash">(base) ➜  ~ mkcert -installCreated a new local CA 💥The local CA is now installed in the system trust store! ⚡️The local CA is now installed in the Firefox and/or Chrome/Chromium trust store (requires browser restart)! 🦊The local CA is already installed in Java&#39;s trust store! 👍</code></pre><p>这一条其实可选，当执行了这一步流程之后，mkcert使用的根证书就加入了本地可信CA中，以后由该CA签发的证书在本地都是可信的。</p><h3 id="1-2-生成自签名证书"><a href="#1-2-生成自签名证书" class="headerlink" title="1.2 生成自签名证书"></a>1.2 生成自签名证书</h3><pre><code class="lang-bash">(base) ➜  ~ mkcert localhost 127.0.0.1 ::1 49.232.27.108Created a new certificate valid for the following names 📜 - &quot;localhost&quot; - &quot;127.0.0.1&quot; - &quot;::1&quot; - &quot;49.232.27.108&quot;The certificate is at &quot;./localhost+3.pem&quot; and the key at &quot;./localhost+3-key.pem&quot; ✅It will expire on 19 February 2023 🗓</code></pre><p>以上命令会在当前路径生成证书文件和私钥文件，为便于后面使用，可以将该文件放到别的路径，以个人为例，我放到了<code>/root/Data/Web/ssl/</code>下。</p><h3 id="1-3-nginx配置证书文件和私钥文件"><a href="#1-3-nginx配置证书文件和私钥文件" class="headerlink" title="1.3 nginx配置证书文件和私钥文件"></a>1.3 nginx配置证书文件和私钥文件</h3><p>nginx中配置文件内容（默认路径为<code>/etc/nginx/nginx.conf</code>）大致如下：</p><pre><code class="lang-conf">user  root;worker_processes  2;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {    worker_connections  1024;}http {    include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  /var/log/nginx/access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    include /etc/nginx/conf.d/*.conf;    server {        listen 8089 ssl;        # listen 8089;        server_name localhost;        root /root/Data/Web/;        charset utf-8;        index index.html;        ssl_certificate /root/Data/Web/ssl/localhost+3.pem;        ssl_certificate_key /root/Data/Web/ssl/localhost+3-key.pem;        ssl_session_timeout 5m;        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        ssl_ciphers  HIGH:!aNULL:!MD5;  # 密码加密方式        ssl_prefer_server_ciphers on;        ssl_session_cache shared:SSL:1m;        location / {            root /root/Data/Web/html;            index index.html;        }    }}</code></pre><p>其中<code>/root/Data/Web/ssl/html/index.html</code>内容如下：</p><pre><code class="lang-html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;Hello world!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="1-4-将CA证书发放给其他用户"><a href="#1-4-将CA证书发放给其他用户" class="headerlink" title="1.4 将CA证书发放给其他用户"></a>1.4 将CA证书发放给其他用户</h3><p>使用以下命令查看CA证书路径并生成crt格式：</p><pre><code class="lang-bash">(base) ➜  ~ mkcert -CAROOT/root/.local/share/mkcert(base) ➜  ~ cd .local/share/mkcert(base) ➜  mkcert lsrootCA-key.pem  rootCA.pem(base) ➜  mkcert cp rootCA.pem rootCA.crt(base) ➜  mkcert lsrootCA.crt  rootCA-key.pem  rootCA.pem</code></pre><p>然后将<code>rootCA.crt</code>文件通过文件传输方式分发给局域网其他电脑。</p><h3 id="1-5-导入CA证书"><a href="#1-5-导入CA证书" class="headerlink" title="1.5 导入CA证书"></a>1.5 导入CA证书</h3><p>Windows和MacOS的导入方式为双击这个文件，在<code>证书导入向导</code>中选择将证书导入<code>受信任的根证书颁发机构</code>，导入成功后我们可以在开始运行中输入<code>certmgr.msc</code>查看证书，如图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/mkcert3.png" alt="mkcert3"></p><h3 id="1-6-使用https访问服务"><a href="#1-6-使用https访问服务" class="headerlink" title="1.6 使用https访问服务"></a>1.6 使用https访问服务</h3><p>导入该CA证书的局域网其他用户便也可以通过https方法来访问该服务器了，然而需要注意的是浏览器需要先退出然后重新打开，以便于浏览器重新加载信任证书，否则的话还是会提示不安全。</p><p>重新打开后，访问服务可以看到结果如下：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/mkcert2.png" alt="mkcert-https"></p><h2 id="2-参考"><a href="#2-参考" class="headerlink" title="2.参考"></a>2.参考</h2><ul><li><a href="https://www.jianshu.com/p/7cb5c2cffaaa" target="_blank" rel="noopener">本地https快速解决方案——mkcert - 简书</a></li><li><a href="https://blog.csdn.net/maokexu123/article/details/42773599" target="_blank" rel="noopener">windows 怎样查看计算机本地安装的证书_如山石的系统虚拟化之路-CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要用到&lt;code&gt;mkcert&lt;/code&gt;，安装方式请参考：&lt;a href=&quot;http://www.iamlightsmile.com/articles/centos%E5%AE%89%E8%A3%85mkcert/&quot;&gt;centos安装mkcert - lightsmile’s Blog&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.iamlightsmile.com/categories/Linux/"/>
    
    
      <category term="mkcert" scheme="https://www.iamlightsmile.com/tags/mkcert/"/>
    
      <category term="https" scheme="https://www.iamlightsmile.com/tags/https/"/>
    
      <category term="ssl" scheme="https://www.iamlightsmile.com/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>Linux内网通过windows主机代理访问外网</title>
    <link href="https://www.iamlightsmile.com/articles/Linux%E5%86%85%E7%BD%91%E9%80%9A%E8%BF%87windows%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/"/>
    <id>https://www.iamlightsmile.com/articles/Linux%E5%86%85%E7%BD%91%E9%80%9A%E8%BF%87windows%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/</id>
    <published>2020-11-18T12:37:45.000Z</published>
    <updated>2020-11-19T00:49:19.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>有时我们会有这样一个场景，即自己的终端设备（如笔记本或台式机）可以通过手机热点或WiFi等形式联网，然而局域网内公司的服务器不能联网，并且有时需要在这台服务器上更新软件等。对于这种需求，我们可以通过搭建代理的方式访问外网。</p><a id="more"></a><h2 id="1-下载并配置代理工具"><a href="#1-下载并配置代理工具" class="headerlink" title="1.下载并配置代理工具"></a>1.下载并配置代理工具</h2><p>具体内容请参考：<a href="https://blog.csdn.net/lxl1531/article/details/109224706" target="_blank" rel="noopener">Linux内网通过windows主机代理访问外网（centos7.6）_lxl1531的博客-CSDN博客</a></p><h2 id="2-配置服务器"><a href="#2-配置服务器" class="headerlink" title="2.配置服务器"></a>2.配置服务器</h2><p>具体内容请参考：<a href="https://www.cnblogs.com/Shepherdzhao/p/7552276.html" target="_blank" rel="noopener">解决CentOS内网机通过Windows下架设代理来访问网络 - XuepengZ - 博客园</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/Shepherdzhao/p/7552276.html" target="_blank" rel="noopener">解决CentOS内网机通过Windows下架设代理来访问网络 - XuepengZ - 博客园</a></li><li><a href="https://blog.csdn.net/lxl1531/article/details/109224706" target="_blank" rel="noopener">Linux内网通过windows主机代理访问外网（centos7.6）_lxl1531的博客-CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;p&gt;有时我们会有这样一个场景，即自己的终端设备（如笔记本或台式机）可以通过手机热点或WiFi等形式联网，然而局域网内公司的服务器不能联网，并且有时需要在这台服务器上更新软件等。对于这种需求，我们可以通过搭建代理的方式访问外网。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.iamlightsmile.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.iamlightsmile.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>macos软件安装小记</title>
    <link href="https://www.iamlightsmile.com/articles/macos%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%B0%8F%E8%AE%B0/"/>
    <id>https://www.iamlightsmile.com/articles/macos%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-11-15T14:54:49.000Z</published>
    <updated>2020-11-15T16:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-装软件平台"><a href="#1-装软件平台" class="headerlink" title="1.装软件平台"></a>1.装软件平台</h2><ul><li><a href="https://xclient.info/" target="_blank" rel="noopener">精品MAC应用分享</a></li><li><a href="https://www.macwk.com/" target="_blank" rel="noopener">MacWk - 精品mac软件下载</a></li></ul><a id="more"></a><h2 id="2-推荐软件"><a href="#2-推荐软件" class="headerlink" title="2.推荐软件"></a>2.推荐软件</h2><div class="table-container"><table><thead><tr><th>软件名称</th><th>简介</th><th>跨平台情况</th></tr></thead><tbody><tr><td>Iterm2</td><td>macos必备终端</td><td>Mac</td></tr><tr><td>Visual Studio Code</td><td>必备编辑器，强无敌</td><td>Win、Mac、Linux</td></tr><tr><td>Pycharm</td><td>Python开发必备</td><td>Win、Mac、Linux</td></tr><tr><td>Typora</td><td>Markdown编辑器</td><td>Win、Mac、Linux</td></tr><tr><td>Chrome</td><td>网页浏览器</td><td>Win、Mac、Linux</td></tr><tr><td>WeChat</td><td>国人聊天、工作必备</td><td>Win、Mac</td></tr><tr><td>Zotero</td><td>网页收集、整理工具</td><td>Win、Mac、Linux</td></tr><tr><td>Anaconda</td><td>Python开发必备</td><td>Win、Mac、Linux</td></tr><tr><td>Snipaste</td><td>轻量截图工具</td><td>Win、Mac</td></tr><tr><td>Dash</td><td>api查询工具</td><td>Mac</td></tr><tr><td>WPS Office</td><td>办公套件（个人觉得比微软Office更好用）</td><td>Win、Mac、Linux</td></tr><tr><td>网易有道词典</td><td>英语单词查询、句子翻译</td><td>Win、Mac、Linux</td></tr><tr><td>V2RayX</td><td>科学上网</td><td>Mac（别的不清楚，我的Win用的不是这个）</td></tr><tr><td>腾讯会议</td><td>远程会议</td><td>Win、Mac</td></tr><tr><td>AppDelete</td><td>删应用的</td><td>Mac</td></tr><tr><td>Scroll Reverser</td><td>管理鼠标滑动方向的（mac和win不一样）</td><td>Mac</td></tr><tr><td>PicGo</td><td>图床工具</td><td>Win、Mac、Linux</td></tr><tr><td>eZip</td><td>解压缩工具（用不起BandiZip，难受）</td><td>Mac</td></tr><tr><td>QSpace</td><td>多视图文件管理器</td><td>Mac（App Store，收费）</td></tr><tr><td>Hidden Bar</td><td>任务栏图标隐藏小工具</td><td>Mac</td></tr><tr><td>Rectangle</td><td>窗口管理工具</td><td>Mac</td></tr></tbody></table></div><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h2><h3 id="3-1-无法安装网上下载的软件"><a href="#3-1-无法安装网上下载的软件" class="headerlink" title="3.1 无法安装网上下载的软件"></a>3.1 无法安装网上下载的软件</h3><p>可以参考这个教程：<a href="https://www.macwk.com/article/mac-file-damage" target="_blank" rel="noopener">macOS 10.14及以下xxx已损坏，打不开。您应该将它移到废纸篓以及来自身份不明的开发者的解决方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-装软件平台&quot;&gt;&lt;a href=&quot;#1-装软件平台&quot; class=&quot;headerlink&quot; title=&quot;1.装软件平台&quot;&gt;&lt;/a&gt;1.装软件平台&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xclient.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;精品MAC应用分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.macwk.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MacWk - 精品mac软件下载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="macos" scheme="https://www.iamlightsmile.com/categories/macos/"/>
    
    
      <category term="macos" scheme="https://www.iamlightsmile.com/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>标准答案</title>
    <link href="https://www.iamlightsmile.com/articles/%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88/"/>
    <id>https://www.iamlightsmile.com/articles/%E6%A0%87%E5%87%86%E7%AD%94%E6%A1%88/</id>
    <published>2020-11-13T03:23:31.000Z</published>
    <updated>2020-11-13T04:29:31.243Z</updated>
    
    <content type="html"><![CDATA[<p>自始至终，一直都觉得现在许多教程都有些问题。看个教材或者文章，一般的思路总是先讲基础历史，然后引出基本概念，然后介绍相关内容，以及高级用法等。这样做很标准规范，但是正如上学时期的参考答案或者标准答案，正确但不够有趣。</p><a id="more"></a><p>我的初中数学老师讲课方式很独特：不让学生们提前预习教材。别的科目或者别的数学老师都要求学生们提前预习课程，等老师讲的时候就比较顺畅，哪里搞不清楚就问哪里，老师也轻松。</p><p>但是我的数学老师则非常反对这样的形式，她认为这种方式下学生们的认识就会先入为主，只能做到“只知其然，而不知其所以然”，即仿佛这种东西或概念原本就存在，这个事物应该就是这个样子也必然就是这个样子，而它的发明者只是海边捡贝壳的小男孩，碰巧发现而已。</p><p>我的数学老师就喜欢在课堂上一点一点把这个概念引出来，即没有它是什么样、我们可能去尝试哪些思路，中间如何探索，然后最终在循循善诱下老师要讲的新概念、新方法也就呼之欲出了。换句话说，老师会用一种通俗易懂的方式带领我们再走一遍前人探索的道路，这是一条打破常规、创造新事物的道路。</p><p>她极力认为应该让学生们学到如何学习、探索新知的能力和方法，要有不迷信权威、勇于探索另辟蹊径的理念，即授之于渔而非授之于鱼。比如说，她有时会在一节课堂上只讲一道题，但是她会讲多种方法，但更多的情况是她希望这些不同的方法都是同学们自己想出来的，即老师抛出问题，然后不同的同学举手回答，最开始的同学的解题思路可能是最基础常规的，然后老师便欢迎其他的人有不同的思路，直到没有更多不同的方法为止，在这个过程中我们不断地练习着从多个角度看待问题、解决问题。</p><p>举个例子：当时学概率的时候，老师问两枚硬币独立投掷的正反面情况，当时一个同学认为两正：两反：一正一反的比例为1:1:2，而我则想当然的认为就三种情况（脑子里也没有多少等概率啥的概念）是1:1:1，于是我们就在讲台上做起了实验，一直抛到比例挺接近1:1:2而我则不得不懵逼的服气为止。而这个过程，如果是预习了课本教材是不会有那种深刻的体会的。</p><p>我一直都非常感激我的这位数学老师，在初高中阶段也很喜欢数学，也非常享受用新的方法解出题目的成就感，甚至于会偏科到其他课上想数学题，没事了就总结些等式规律，一上数学课就兴奋激动跟打了鸡血似的，一上理综课就无聊难受地要死。由于那个时候并没有搞奥赛的班子或者氛围，自己也没有走上相关的道路。</p><p>这种老师我是真心觉得可遇不可求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自始至终，一直都觉得现在许多教程都有些问题。看个教材或者文章，一般的思路总是先讲基础历史，然后引出基本概念，然后介绍相关内容，以及高级用法等。这样做很标准规范，但是正如上学时期的参考答案或者标准答案，正确但不够有趣。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>给docker-neo4j增加healthcheck</title>
    <link href="https://www.iamlightsmile.com/articles/%E7%BB%99docker-neo4j%E5%A2%9E%E5%8A%A0healthcheck/"/>
    <id>https://www.iamlightsmile.com/articles/%E7%BB%99docker-neo4j%E5%A2%9E%E5%8A%A0healthcheck/</id>
    <published>2020-11-13T01:29:28.000Z</published>
    <updated>2020-11-13T01:52:52.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-正确的打开方式"><a href="#1-正确的打开方式" class="headerlink" title="1.正确的打开方式"></a>1.正确的打开方式</h2><p>由于healthcheck执行的指令是在容器内部执行的，而docker-neo4j内部并没有curl指令，所以我们不能通过<code>curl -f localhost:7474 || exit 1</code>这样的指令来去判断neo4j容器是否运行正常，这样得到的结果总是unhealthy。</p><a id="more"></a><p>正确的打开方式应该是：</p><pre><code class="lang-yml">healthcheck:    test: [&quot;CMD-SHELL&quot;, &quot;echo &#39;match (n) return count(n);&#39; | bin/cypher-shell -a bolt://localhost:7687 -u neo4j -p xxx || exit 1&quot;]</code></pre><p>对于选择授权的neo4j容器而言，需要指定上面的用户名和密码。</p><h2 id="2-参考"><a href="#2-参考" class="headerlink" title="2.参考"></a>2.参考</h2><ul><li><a href="https://medium.com/better-programming/docker-healthchecks-eb744bfe3f3b" target="_blank" rel="noopener">How to Implement Docker Health Checks | by Nassos Michas | Better Programming | Medium</a></li><li><a href="https://neo4j.com/docs/operations-manual/current/tools/cypher-shell/" target="_blank" rel="noopener">Cypher Shell - Operations Manual</a></li><li><a href="https://neo4j.com/developer/kb/how-do-i-authenticate-with-cypher-shell-without-specifying-the-username-and-password-on-the-command-line/" target="_blank" rel="noopener">Neo4j : How do I authenticate with cypher-shell without specifying the username and password on the command line - Neo4j Graph Database Platform</a></li><li><a href="https://github.com/neo4j/docker-neo4j/issues/114" target="_blank" rel="noopener">Unable to probe health when composing · Issue #114 · neo4j/docker-neo4j</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-正确的打开方式&quot;&gt;&lt;a href=&quot;#1-正确的打开方式&quot; class=&quot;headerlink&quot; title=&quot;1.正确的打开方式&quot;&gt;&lt;/a&gt;1.正确的打开方式&lt;/h2&gt;&lt;p&gt;由于healthcheck执行的指令是在容器内部执行的，而docker-neo4j内部并没有curl指令，所以我们不能通过&lt;code&gt;curl -f localhost:7474 || exit 1&lt;/code&gt;这样的指令来去判断neo4j容器是否运行正常，这样得到的结果总是unhealthy。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.iamlightsmile.com/categories/Linux/"/>
    
    
      <category term="docker" scheme="https://www.iamlightsmile.com/tags/docker/"/>
    
      <category term="neo4j" scheme="https://www.iamlightsmile.com/tags/neo4j/"/>
    
  </entry>
  
  <entry>
    <title>记录macos下配置hexo博客经历</title>
    <link href="https://www.iamlightsmile.com/articles/%E8%AE%B0%E5%BD%95macos%E4%B8%8B%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2%E7%BB%8F%E5%8E%86/"/>
    <id>https://www.iamlightsmile.com/articles/%E8%AE%B0%E5%BD%95macos%E4%B8%8B%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2%E7%BB%8F%E5%8E%86/</id>
    <published>2020-11-12T13:02:57.000Z</published>
    <updated>2020-11-12T13:58:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己整了台新Mac，这里简单记录一下同步hexo博客的经历过程，还是有些繁琐的。</p><a id="more"></a><h2 id="1-拷贝项目文件"><a href="#1-拷贝项目文件" class="headerlink" title="1.拷贝项目文件"></a>1.拷贝项目文件</h2><p>自己的项目文件其实也通过git管理了，但是不知为何在mac下使用<code>npm install</code>命令老是无法完成安装node_modules。同时自己现在还在用2.6.5版本的volantis主题，而官方都已经更新到v4了，但是自己目前也没有必要迁移到新版本的需求和精力，于是就继续沿用Windows上的旧主题了，于是乎通过选择将整个项目打包压缩然后通过U盘拷到Mac上（如果不压缩打包实在是有些太慢了，因为这些node包的js的细碎文件实在是太多了）</p><h2 id="2-配置hexo路径"><a href="#2-配置hexo路径" class="headerlink" title="2.配置hexo路径"></a>2.配置hexo路径</h2><p>hexo可执行文件在node_modules下的.bin文件下，如果直接执行<code>hexo new xx</code>之类的命令，需要先将该路径添加到PATH变量中，于是乎可以在<code>~/.bash_profile</code>或者<code>~/.zshrc</code>中添加：</p><pre><code class="lang-bash"># hexoexport PATH=&quot;$PATH:/Users/lightsmile/Projects/myProjects/MyBlog//node_modules/.bin&quot;</code></pre><p>上面具体的路径要根据具体情况做出变动。</p><h2 id="3-配置node"><a href="#3-配置node" class="headerlink" title="3.配置node"></a>3.配置node</h2><p>hexo配置完成后，可以正常执行<code>hexo new</code>命令，但是无法执行<code>hexo generate -d</code>命令，google后发现是node版本太新的问题，需要安装旧版本的node，参考文章2中提到v12.14没有问题，于是接下来打算装一下这个版本。</p><h2 id="4-安装nvm"><a href="#4-安装nvm" class="headerlink" title="4.安装nvm"></a>4.安装nvm</h2><p>如果conda可以管理多个版本的Python环境一样，nvm也是用于管理node环境的工具，于是乎直接<code>brew install nvm</code>安装，没想到安装失败，只能去GitHub官方网页上找安装方式，需要执行如下命令：</p><pre><code class="lang-bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.0/install.sh | bash</code></pre><p>或者</p><pre><code class="lang-bash">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.0/install.sh | bash</code></pre><p>于是乎便执行curl命令，没想到报443的错误，想到可能是代理的问题，于是继续Google寻找解决方案。</p><h2 id="5-安装proxychains-ng"><a href="#5-安装proxychains-ng" class="headerlink" title="5.安装proxychains-ng"></a>5.安装proxychains-ng</h2><p>Google后找到了参考3，然后参考3提到了参考4，于是乎安装<code>proxychains-ng</code>。</p><pre><code class="lang-bash">brew install proxychains-ng</code></pre><p>安装人家的教程修改了<code>/usr/local/etc/proxychains.conf</code>后发现还是不行，然后又发现了参考5，按照参考5增加了变动之后发现还是下载失败，后来看参考3的评论中发现了可行的方案：<strong>其实设置DNS为114.114.114.114或者8.8.8.8就好了。</strong>。</p><h2 id="6-配置DNS"><a href="#6-配置DNS" class="headerlink" title="6.配置DNS"></a>6.配置DNS</h2><p>详情参见参考6，dns内容我设置的为8.8.8.8，经测试有效。</p><h2 id="7-继续下载nvm并配置node"><a href="#7-继续下载nvm并配置node" class="headerlink" title="7.继续下载nvm并配置node"></a>7.继续下载nvm并配置node</h2><p>nvm下载完成之后还是找不到，然后自己执行了下<code>source ~/.bash_profile</code>，然后出于保险又把相关命令复制到了<code>~/.zshrc</code>中一份，相关命令如下：</p><pre><code class="lang-bash">export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</code></pre><h2 id="8-配置nvm镜像源"><a href="#8-配置nvm镜像源" class="headerlink" title="8.配置nvm镜像源"></a>8.配置nvm镜像源</h2><p>使用nvm安装node命令如下：</p><pre><code class="lang-bash">nvm install 12.14</code></pre><p>然后发现nvm会直接从node的官网去下载，于是乎又失败了，只能配置镜像源，配置方式为将如下命令添加到<code>~/.zshrc</code>中：</p><pre><code class="lang-bash">export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</code></pre><p>配置完成之后更新一下zshrc（即执行命令<code>source ~/.zshrc</code>）然后继续执行install命令便可成功下载。</p><p>然后切换成12.14版本的node，切换命令如下：</p><pre><code class="lang-bash">nvm use 12.14</code></pre><p>然后程序便提示已经成功切换。</p><h2 id="9-参考"><a href="#9-参考" class="headerlink" title="9.参考"></a>9.参考</h2><ol><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档 | Hexo</a></li><li><a href="https://zhuanlan.zhihu.com/p/136552969" target="_blank" rel="noopener">部署Hexo踩过的坑—node14.0配置hexo - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/115450863" target="_blank" rel="noopener">Failed to connect to raw.githubusercontent.com:443 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/124199138" target="_blank" rel="noopener">使用 proxychains-ng 代理命令行 - 知乎</a></li><li><a href="https://guangchuangyu.github.io/cn/2018/09/proxychains/" target="_blank" rel="noopener">一次解决所有代理问题</a></li><li><a href="https://www.jianshu.com/p/a150b13a2031" target="_blank" rel="noopener">Mac ：修改 DNS 及清除 DNS 缓存 - 简书</a></li><li><a href="https://www.jianshu.com/p/bc56e70303f7" target="_blank" rel="noopener">NVM配置国内镜像 - 简书</a></li><li><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm-sh/nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己整了台新Mac，这里简单记录一下同步hexo博客的经历过程，还是有些繁琐的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="macos" scheme="https://www.iamlightsmile.com/tags/macos/"/>
    
      <category term="hexo" scheme="https://www.iamlightsmile.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>设置docker容器内时间</title>
    <link href="https://www.iamlightsmile.com/articles/%E8%AE%BE%E7%BD%AEdocker%E5%AE%B9%E5%99%A8%E5%86%85%E6%97%B6%E9%97%B4/"/>
    <id>https://www.iamlightsmile.com/articles/%E8%AE%BE%E7%BD%AEdocker%E5%AE%B9%E5%99%A8%E5%86%85%E6%97%B6%E9%97%B4/</id>
    <published>2020-11-12T08:56:35.000Z</published>
    <updated>2020-11-12T09:00:14.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-通过文件挂载形式设置与宿主机时间一致"><a href="#1-通过文件挂载形式设置与宿主机时间一致" class="headerlink" title="1. 通过文件挂载形式设置与宿主机时间一致"></a>1. 通过文件挂载形式设置与宿主机时间一致</h2><p>可以在<code>docker-compose</code>文件中设置如下：</p><pre><code class="lang-yml">volumes:    - &quot;/etc/localtime:/etc/localtime:ro&quot;  # 容器只能从主机的/etc/localtime中读取</code></pre><h2 id="2-设置timezone"><a href="#2-设置timezone" class="headerlink" title="2. 设置timezone"></a>2. 设置timezone</h2><p>如设置时区为上海，可在docker容器内部执行：</p><pre><code class="lang-bash">echo &#39;Asia/Shanghai&#39; &gt; /etc/timezone</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-通过文件挂载形式设置与宿主机时间一致&quot;&gt;&lt;a href=&quot;#1-通过文件挂载形式设置与宿主机时间一致&quot; class=&quot;headerlink&quot; title=&quot;1. 通过文件挂载形式设置与宿主机时间一致&quot;&gt;&lt;/a&gt;1. 通过文件挂载形式设置与宿主机时间一致&lt;/h2
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.iamlightsmile.com/categories/Linux/"/>
    
    
      <category term="docker" scheme="https://www.iamlightsmile.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>缓存机制与产品经理</title>
    <link href="https://www.iamlightsmile.com/articles/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8E%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    <id>https://www.iamlightsmile.com/articles/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8E%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/</id>
    <published>2020-11-12T07:19:44.000Z</published>
    <updated>2020-11-12T07:54:10.939Z</updated>
    
    <content type="html"><![CDATA[<p>今天研读同事的代码，发现代码里新增了缓存机制，这里算是自己不太懂的领域，需要学习一下。</p><p>同事用到的Python的缓存库为<a href="https://github.com/pallets/cachelib" target="_blank" rel="noopener">pallets/cachelib</a>，发现这个库用的人还挺少的（至少star数是如此），并且作者也有段时间没更新了，网上搜的话也找不到相关教程。</p><a id="more"></a><p>于是乎只能瞜一眼同事大概是咋用的，然后再读一下这个库的源码，发现还挺简洁的。</p><p>在大致读完代码之后，心里不禁感慨，这个缓存机制真的不错。犹记得，上大学时的计算机系统结构的老师问道：在计算机的发展历史中，引入的哪个功能或组件解决了痛点而又没有引入其他副作用？老师说唯一的答案就是缓存机制。但是当时还不能理解其真正含义。</p><p>打算再看看关于缓存机制介绍的更多的文章，google一下，发现都是讲浏览器缓存的，而我想看些关于机制介绍的更广的东西。</p><p>后来发现了这两篇文章：<a href="http://www.woshipm.com/pmd/856507.html" target="_blank" rel="noopener">浅析互联网中的缓存机制 | 人人都是产品经理</a>以及<a href="https://wizardforcel.gitbooks.io/django-book-20-zh-cn/content/15.html" target="_blank" rel="noopener">第十五章： 缓存机制| Django Book 2.0 中文版</a>，两个也都讲的挺详细的。</p><p>令我没想到的是，有人作为一个产品经理能够将关于缓存机制的东西总结的这么好。于是我不禁反思，一个合格的产品经理应该懂些技术，而一个合格的程序员似乎也应该懂些产品相关的东西，而不应该仅仅着眼于技术实现的层面，更应该以产品经理为师，学习借鉴他们看待问题的视角和方法，提升自己看待问题的层面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天研读同事的代码，发现代码里新增了缓存机制，这里算是自己不太懂的领域，需要学习一下。&lt;/p&gt;
&lt;p&gt;同事用到的Python的缓存库为&lt;a href=&quot;https://github.com/pallets/cachelib&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pallets/cachelib&lt;/a&gt;，发现这个库用的人还挺少的（至少star数是如此），并且作者也有段时间没更新了，网上搜的话也找不到相关教程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://www.iamlightsmile.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="产品经理" scheme="https://www.iamlightsmile.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="缓存机制" scheme="https://www.iamlightsmile.com/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>vim更新及安装插件教程</title>
    <link href="https://www.iamlightsmile.com/articles/vim%E6%9B%B4%E6%96%B0%E5%8F%8A%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E6%95%99%E7%A8%8B/"/>
    <id>https://www.iamlightsmile.com/articles/vim%E6%9B%B4%E6%96%B0%E5%8F%8A%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E6%95%99%E7%A8%8B/</id>
    <published>2020-11-12T03:13:06.000Z</published>
    <updated>2020-11-12T04:26:05.509Z</updated>
    
    <content type="html"><![CDATA[<p>这里简单记录一下自己安装vim以及安装插件的过程。</p><blockquote><p><strong>注意</strong>：以下安装过程适用于Linux以及Macos系统。</p></blockquote><a id="more"></a><h2 id="1-安装vim-plug"><a href="#1-安装vim-plug" class="headerlink" title="1.安装vim-plug"></a>1.安装vim-plug</h2><pre><code class="lang-bash">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</code></pre><h2 id="2-配置vim配置文件"><a href="#2-配置vim配置文件" class="headerlink" title="2.配置vim配置文件"></a>2.配置vim配置文件</h2><p>编辑<code>~/.vimrc</code>文件，如我的<code>~/.vimrc</code>文件下内容目前如下：</p><pre><code class="lang-txt">set encoding=UTF-8set numberset autoindentcall plug#begin(&#39;~/.vim/plugged&#39;)Plug &#39;ryanoasis/vim-devicons&#39;Plug &#39;scrooloose/nerdtree&#39;Plug &#39;frazrepo/vim-rainbow&#39;Plug &#39;itchyny/lightline.vim&#39;Plug &#39;junegunn/fzf&#39;Plug &#39;airblade/vim-gitgutter&#39;call plug#end()map &lt;F3&gt; :NERDTreeMirror&lt;CR&gt;map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</code></pre><h2 id="3-安装vim插件"><a href="#3-安装vim插件" class="headerlink" title="3.安装vim插件"></a>3.安装vim插件</h2><pre><code class="lang-bash"># 进入vim中vim</code></pre><p>以下命令均是在vim下执行</p><pre><code class="lang-bash"># 查看vim相关信息:version# 更新vimrc文件（可选）:source ~/.vimrc# 查看插件状态:PlugStatus# 安装插件:PlugInstall</code></pre><h2 id="4-配置终端字体"><a href="#4-配置终端字体" class="headerlink" title="4.配置终端字体"></a>4.配置终端字体</h2><p>使用<code>nerdtree</code>插件以及<code>vim-devicons</code>插件便可以实现vim下目录或文件的图标效果，但前提是启用了支持终端图标效果的字体，这里我们需要去<a href="https://github.com/ryanoasis/nerd-fonts" target="_blank" rel="noopener">ryanoasis/nerd-fonts</a>下载。</p><p>关于字体安装，如果是windows系统或者macos系统可以直接双击文件进行安装，如果是Linux的话，可以参考<a href="https://www.jianshu.com/p/8517e94a29ae" target="_blank" rel="noopener">[转]Linux CentOS 7 安装字体库和中文字体 - 简书</a>进行配置安装。</p><p>然后设置终端字体为支持Nerd的字体，如下图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/centos-vim1.png" alt="pic1"></p><p>然后打开vim可以看到如下效果：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/centos-vim2.png" alt="pic2"></p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h2><ul><li><a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">junegunn/vim-plug: Minimalist Vim Plugin Manager</a></li><li><a href="https://www.jianshu.com/p/8517e94a29ae" target="_blank" rel="noopener">[转]Linux CentOS 7 安装字体库和中文字体 - 简书</a></li><li><a href="https://www.jianshu.com/p/0c83e6aed270" target="_blank" rel="noopener">Vim-plug：极简 Vim 插件管理器 - 简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里简单记录一下自己安装vim以及安装插件的过程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：以下安装过程适用于Linux以及Macos系统。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.iamlightsmile.com/categories/Linux/"/>
    
    
      <category term="vim" scheme="https://www.iamlightsmile.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>centos更新vim</title>
    <link href="https://www.iamlightsmile.com/articles/centos%E6%9B%B4%E6%96%B0vim/"/>
    <id>https://www.iamlightsmile.com/articles/centos%E6%9B%B4%E6%96%B0vim/</id>
    <published>2020-11-12T03:11:37.000Z</published>
    <updated>2020-11-12T04:25:02.656Z</updated>
    
    <content type="html"><![CDATA[<p>centos默认vim版本为7.4，用起来其实并不舒服，所以这里选择通过源码安装方式（主要是尝试了通过yum安装都没有成功）安装最新版vim（写这篇文档的时候是8.2）</p><a id="more"></a><blockquote><p><strong>注意</strong>：以下命令我都是在root账户下执行的，如果是在普通用户下执行可以选择su切换到root或者前面增加sudo命令。</p></blockquote><h2 id="1-安装依赖库"><a href="#1-安装依赖库" class="headerlink" title="1.安装依赖库"></a>1.安装依赖库</h2><p>源码编译需要安装make、git等工具，但是一般而言服务器上都有，同时教程提到了安装python36，然而现在最新的python都已经到了3.9了，我通过conda安装的python版本环境是3.8，所以并没有严格安装教程来执行相关命令。</p><pre><code class="lang-bash">yum install ncurses-devel</code></pre><h2 id="2-克隆Github的vim项目"><a href="#2-克隆Github的vim项目" class="headerlink" title="2.克隆Github的vim项目"></a>2.克隆Github的vim项目</h2><p>首先切换到一个惯常放置Github项目的目录，如我的在<code>/root/Projects/GithubProjects</code>，然后再执行以下命令，当然位置在哪不大要紧。</p><pre><code class="lang-bash">git clone https://github.com/vim/vim.git</code></pre><h2 id="3-配置并编译vim"><a href="#3-配置并编译vim" class="headerlink" title="3.配置并编译vim"></a>3.配置并编译vim</h2><pre><code class="lang-bash">// 进入项目cd vim// 配置参数./configure --prefix=/usr/local/vim  --enable-pythoninterp=yes --enable-python3interp=yes --with-python-command=python --with-python3-command=python// 编译文件，可能需要使用sudo权限makemake install</code></pre><h2 id="4-复制Vim到系统配置，并修改Profile"><a href="#4-复制Vim到系统配置，并修改Profile" class="headerlink" title="4.复制Vim到系统配置，并修改Profile"></a>4.复制Vim到系统配置，并修改Profile</h2><pre><code class="lang-bash">// 复制前可以备份一下cp /usr/bin/vim /usr/bin/vim.backup// 复制前面编译的vim到系统配置cd /root/Projects/GithubProjects/vim/srccp vim /usr/bin// 修改系统的Profileecho &quot;PATH=\$PATH:/usr/local/vim/bin&quot; &gt;&gt; /etc/profile// 运行刚修改的配置。source /etc/profile// 最后，check versionvim --version// 同时，也能看到它支持Python3了。(7.4是不支持的。)</code></pre><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h2><ul><li><a href="https://www.jianshu.com/p/b44d568aef9f" target="_blank" rel="noopener">CentOS, Vim7.4升级到8.1 (服务器) — 亲试可行 - 简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;centos默认vim版本为7.4，用起来其实并不舒服，所以这里选择通过源码安装方式（主要是尝试了通过yum安装都没有成功）安装最新版vim（写这篇文档的时候是8.2）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.iamlightsmile.com/categories/Linux/"/>
    
    
      <category term="centos" scheme="https://www.iamlightsmile.com/tags/centos/"/>
    
      <category term="vim" scheme="https://www.iamlightsmile.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>开放式信息抽取探索（1）</title>
    <link href="https://www.iamlightsmile.com/articles/%E5%BC%80%E6%94%BE%E5%BC%8F%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96%E6%8E%A2%E7%B4%A2%EF%BC%881%EF%BC%89/"/>
    <id>https://www.iamlightsmile.com/articles/%E5%BC%80%E6%94%BE%E5%BC%8F%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96%E6%8E%A2%E7%B4%A2%EF%BC%881%EF%BC%89/</id>
    <published>2020-11-05T07:41:56.000Z</published>
    <updated>2020-11-12T03:22:21.977Z</updated>
    
    <content type="html"><![CDATA[<p>一直对自然语言处理和知识图谱感兴趣，然而其细分领域中最感兴趣的领域或问题是开放式信息抽取。</p><p>这里简单记录下自己的探索历程和内心感受。</p><a id="more"></a><h2 id="任务划分"><a href="#任务划分" class="headerlink" title="任务划分"></a>任务划分</h2><p>信息抽取主要包含实体抽取、关系抽取和事件抽取，这里主要关注事件抽取。</p><h2 id="可以用监督学习模型吗"><a href="#可以用监督学习模型吗" class="headerlink" title="可以用监督学习模型吗"></a>可以用监督学习模型吗</h2><p>因为是开放式信息抽取，没有标记语料和训练带标签数据的过程，甚至说事件的种类都不是固定已知的，所以不能用监督学习模型。</p><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>打算借助基础nlp工具LTP，调研依存句法、语义角色标注、语义依存分析等功能。</p><h2 id="简单对比"><a href="#简单对比" class="headerlink" title="简单对比"></a>简单对比</h2><p>经过简单对比，觉得语义角色标注有遗漏的情况，而依存句法和语义依存效果相对较好，同时语义依存结果相对复杂，同时还存在一定的Bug。所以选择使用依存句法去入手。</p><h2 id="调研相关文章和开源项目"><a href="#调研相关文章和开源项目" class="headerlink" title="调研相关文章和开源项目"></a>调研相关文章和开源项目</h2><p>在调研网上其他的基于句法的开放式信息抽取的文章和项目时，发现了<a href="https://github.com/lemonhu/open-entity-relation-extraction" target="_blank" rel="noopener">lemonhu/open-entity-relation-extraction: Knowledge triples extraction and knowledge base construction based on dependency syntax for open domain text.</a>。觉得该项目和我要做的相近，于是调研了其代码实现，发现里面的规则是硬编码的，写的比较死，拓展性比较差，于是便思索是否有别的更好的方案。</p><h2 id="新的想法"><a href="#新的想法" class="headerlink" title="新的想法"></a>新的想法</h2><p>苦思冥想着觉得这些规则不应该硬编码，而是别的可拓展或易于修改的方式。后来突然想到树也算图的一种特殊结构，所以树的遍历、树的路径匹配也可以看做图的遍历、图的子图的路径匹配，而最近刚搞了Neo4j，Neo4j自然可以视作一个高效的图计算引擎，因此将句法分析和Neo4j结合在一起搞的想法便初步形成了。相应的，实体可以看做图的节点，实体在事件中所扮演的角色可以看做是到中心词（动词）的边，依存树中的定语（和实体构成定中修饰关系）可以视作实体节点的属性，而状语作为对中心词（动词）的修饰可以视作事件中心词的属性。所以由依存树到知识图谱便对应起来了。于是乎我们可以去构建Cypher查询语句来实现实体和事件的抽取。</p><p>如下图：</p><p><img src="https://lightsmile-img.oss-cn-beijing.aliyuncs.com/openoie-neo4j.png" alt="pic1"></p><h2 id="深入Neo4j"><a href="#深入Neo4j" class="headerlink" title="深入Neo4j"></a>深入Neo4j</h2><p>由于涉及到一些图遍历相关的东西，所以自己便想着通过使用Neo4j的apoc拓展库来实现，之前使用了<code>apoc.path.expand</code>，不过后来发现自己用错了，更应该用的是<code>apoc.path.subgraphNodes</code>，然后写了几个语法发现在一些Case上的提取结果还算不错。</p><h2 id="就难受住"><a href="#就难受住" class="headerlink" title="就难受住"></a>就难受住</h2><p>不过当Case变得复杂的时候，发现依存句法解析的有些问题，自然也就导致部分提取不到，于是自己内心就变得沮丧了起来。这是自己想解决的问题呀，可是好难，自己也不知如何去实现，就难受住。</p><h2 id="柳暗花明"><a href="#柳暗花明" class="headerlink" title="柳暗花明"></a>柳暗花明</h2><p>后来想着要不试试别的工具的效果，包括语义角色标注和语义依存分析，结果竟然发现语义角色标注的解析结果还真的挺好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直对自然语言处理和知识图谱感兴趣，然而其细分领域中最感兴趣的领域或问题是开放式信息抽取。&lt;/p&gt;
&lt;p&gt;这里简单记录下自己的探索历程和内心感受。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识图谱" scheme="https://www.iamlightsmile.com/categories/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    
      <category term="信息抽取" scheme="https://www.iamlightsmile.com/tags/%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>求职随记</title>
    <link href="https://www.iamlightsmile.com/articles/%E6%B1%82%E8%81%8C%E9%9A%8F%E8%AE%B0/"/>
    <id>https://www.iamlightsmile.com/articles/%E6%B1%82%E8%81%8C%E9%9A%8F%E8%AE%B0/</id>
    <published>2020-10-27T14:17:20.000Z</published>
    <updated>2020-10-27T14:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想换工作，于是Boss直聘设置状态为“在职-考虑机会”，同时更新了简历内容，于是乎最近有简历投递邀请，并且今天还收到了好几份面试邀请。</p><a id="more"></a><p>不过今晚最终想了想还是先拒绝掉了，虽然这种做法可能确实有点败人缘、坏人品，但是另一方面，我们小组目前处于比较缺人的状态，并且现在我还主要负责一个电网相关的知识库项目，离开了只会让同事更难做。一方面自己想换个环境继续学习新的知识和技能，另一方面则是一份责任，是自己应该做且做好的事情。只能等把项目推进到年末之后再考虑更换工作吧，现在换工作确实对公司而言有些不厚道了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想换工作，于是Boss直聘设置状态为“在职-考虑机会”，同时更新了简历内容，于是乎最近有简历投递邀请，并且今天还收到了好几份面试邀请。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随念" scheme="https://www.iamlightsmile.com/categories/%E9%9A%8F%E5%BF%B5/"/>
    
    
      <category term="求职" scheme="https://www.iamlightsmile.com/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>国内博客网站说明</title>
    <link href="https://www.iamlightsmile.com/articles/%E5%9B%BD%E5%86%85%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E8%AF%B4%E6%98%8E/"/>
    <id>https://www.iamlightsmile.com/articles/%E5%9B%BD%E5%86%85%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E8%AF%B4%E6%98%8E/</id>
    <published>2020-10-26T05:05:39.000Z</published>
    <updated>2020-10-26T05:08:45.481Z</updated>
    
    <content type="html"><![CDATA[<p>本博客国内网址链接为：<a href="https://www.lightsmile.cn/" target="_blank" rel="noopener">lightsmile’s Blog</a>。</p><p>另：国内网站采用腾讯云服务器，自己写了两篇关于翻墙的文章被人举报，无奈将两篇文章删除，并且不再同步更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本博客国内网址链接为：&lt;a href=&quot;https://www.lightsmile.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lightsmile’s Blog&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另：国内网站采用腾讯云服务器，自己写了两篇关于翻墙的文章
      
    
    </summary>
    
    
      <category term="其他" scheme="https://www.iamlightsmile.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="翻墙" scheme="https://www.iamlightsmile.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
</feed>
